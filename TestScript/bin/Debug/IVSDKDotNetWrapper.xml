<?xml version="1.0"?>
<doc>
    <assembly>
        "IVSDKDotNetWrapper"
    </assembly>
    <members>
        <member name="P:IVSDKDotNet.CPedModelInfo.StreamedPed">
            <summary>
Load from player:/
</summary>
        </member>
        <member name="M:IVSDKDotNet.CPedType.FindPedType(System.String)">
            <summary />
            <param name="type">The pedtype.</param>
            <returns>The pedtype id from string.</returns>
        </member>
        <member name="M:IVSDKDotNet.CPedType.IsPedTypePlayer(System.String)">
            <summary> Takes pedtype string and returns 1 if PLAYER1, PLAYER2, PLAYER_NETWORK or PLAYER_UNUSED. </summary>
            <param name="type">Pedtype string</param>
            <returns>If true the game sets CPedModelInfo::m_bStreamedPed to 1.</returns>
        </member>
        <member name="M:IVSDKDotNet.CShaderLib.GetTechniqueID(System.String)">
            <summary>
default, unlit, deferred, etc.
</summary>
            <param name="name" />
            <returns>The technique ID.</returns>
        </member>
        <member name="P:IVSDKDotNet.audRadioAudioEntity.CurrentRadioStation">
            <summary>
Gets the current radio station index.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CRadioStation.IsFrozen">
            <summary>
Gets if the radio station is frozen.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CRadioStation.Name">
            <summary>
Gets the name of the radio station.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CDraw.ForceHudWidescreen">
            <summary>
m_bWidescreenBorders?
</summary>
        </member>
        <member name="M:IVSDKDotNet.CDraw.CalculateAspectRatio(System.Boolean)">
            <summary>
Calculates the aspect ratio.
</summary>
            <param name="bUnk">True forces it to 1.777... if ForceHudWidescreen byte is non-zero.</param>
            <returns>The calculated aspect ratio.</returns>
        </member>
        <member name="M:IVSDKDotNet.CDraw.Get">
            <summary>
Gets the main CDraw instance.
</summary>
            <returns>The CDraw instance.</returns>
        </member>
        <member name="P:IVSDKDotNet.tGlobalScene.ViewportMobilePhone">
            <summary>
Gets the viewport of the mobile phone.
</summary>
        </member>
        <member name="P:IVSDKDotNet.tGlobalScene.ViewportRadar">
            <summary>
Gets the viewport of the radar.
</summary>
        </member>
        <member name="P:IVSDKDotNet.tGlobalScene.ViewportGame">
            <summary>
Gets the viewport of the game.
</summary>
        </member>
        <member name="P:IVSDKDotNet.tGlobalScene.ViewportPrimaryOrtho">
            <summary>
Gets the orthographic viewport.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CShadows.StoreStaticShadow(System.Boolean,System.Numerics.Vector3,System.Drawing.Color,System.Single,System.Single)">
            <summary>
StoreStaticShadows method with basic parameters.
</summary>
            <param name="castShadows">Should light cast shadows?</param>
            <param name="vPos">The position of the light.</param>
            <param name="vColor">The color of the light.</param>
            <param name="fIntensity">Light Intensity.</param>
            <param name="fRange">Light Range.</param>
        </member>
        <member name="M:IVSDKDotNet.CShadows.StoreStaticShadowAdvanced(System.UInt32,System.UInt32,System.Boolean,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Drawing.Color,System.Single,System.UInt32,System.UInt32,System.Single,System.Single,System.Single,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
StoreStaticShadows method with extended parameters.
</summary>
            <param name="a1">Unknown.</param>
            <param name="a2">Unknown.</param>
            <param name="castShadows">Should light cast shadows?</param>
            <param name="pVec1">Unknown.</param>
            <param name="pVec2">Unknown.</param>
            <param name="vPos">Light Position.</param>
            <param name="vColor">Light Color.</param>
            <param name="fIntensity">Light Intensity.</param>
            <param name="texHash">Unknown.</param>
            <param name="txdSlot">Unknown.</param>
            <param name="fRange">Light Range.</param>
            <param name="a12">Unknown.</param>
            <param name="a13">Unknown.</param>
            <param name="a14">Unknown.</param>
            <param name="a15">Unknown.</param>
            <param name="nID">Light ID.</param>
        </member>
        <member name="P:IVSDKDotNet.CVisibilityPlugins.StipplePath">
            <summary>
Gets or sets the path to platform:/textures
</summary>
        </member>
        <member name="P:IVSDKDotNet.CVisibilityPlugins.CarLodDistanceMed">
            <summary>
Gets or sets the medium car lod distance.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CVisibilityPlugins.CarLodDistanceHigh">
            <summary>
Gets or sets the high car lod distance.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CVisibilityPlugins.PedLodDistanceSlod">
            <summary>
Gets or sets the slod peds lod distance.
All non-mission peds change their modelindex to superlod past this distance.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CVisibilityPlugins.PedLodDistanceVlow">
            <summary>
Gets or sets the vlow ped lod distance.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CVisibilityPlugins.PedLodDistanceLow">
            <summary>
Gets or sets the low ped lod distance.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CVisibilityPlugins.PedLodDistanceMed">
            <summary>
Gets or sets the medium ped lod distance.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CVisibilityPlugins.PedInCarLodDistanceHigh">
            <summary>
Gets or sets the high ped lod in car distance.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CVisibilityPlugins.PedLodDistanceHigh">
            <summary>
Gets or sets the high ped lod distance.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CFileLoader.LoadLevel(System.String,System.Int32)">
            <summary />
            <param name="levelName" />
            <param name="nUnk">Priority? It's set to 2 and 1 for loading default.dat in TBoGT but 0 everywhere else</param>
        </member>
        <member name="P:IVSDKDotNet.CFileLoader.StreamIniPath">
            <summary>
Gets or sets the path to platform:/stream.ini
</summary>
        </member>
        <member name="P:IVSDKDotNet.CFileLoader.ProceduralDatPath">
            <summary>
Gets or sets the path to common:/data/materials
</summary>
        </member>
        <member name="P:IVSDKDotNet.CFileLoader.ButtonsTxdPath">
            <summary>
Gets or sets the path to platform:/textures/buttons_360
</summary>
        </member>
        <member name="P:IVSDKDotNet.CFileLoader.ScenariosDatPath">
            <summary>
Gets or sets the path to common:/DATA/Scenarios.dat
</summary>
        </member>
        <member name="P:IVSDKDotNet.CFileLoader.GameRpfPath">
            <summary>
Gets or sets the path to platform:/data/game.rpf
</summary>
        </member>
        <member name="P:IVSDKDotNet.CFileLoader.AmbientDataPath">
            <summary>
Gets or sets the path to common:/DATA/Ambient.dat
</summary>
        </member>
        <member name="M:IVSDKDotNet.phInstGta.DetachFragmentGroup(System.UInt32)">
            <summary>
This is what's used to detach car parts, groupId is in the same order as groups are in the .oft file.
Use tDoor-&gt;m_nGroupID for vehicle doors, haven't found a way to see the rest of the bones, or anything for other entity types other than guessing.
</summary>
            <param name="groupId" />
            <returns />
        </member>
        <member name="T:IVSDKDotNet.CTaskComplexDie">
            <summary>
TASK_DIE does this but it's not required: CPed.SetHealth(0.0f, 0);
</summary>
        </member>
        <member name="M:IVSDKDotNet.CPools.DeleteObject(System.Int32)">
            <summary>
Deletes a object with the given handle.
</summary>
            <param name="handle">The handle of the object.</param>
        </member>
        <member name="M:IVSDKDotNet.CPools.DeleteCar(System.Int32)">
            <summary>
Deletes a vehicle with the given handle.
</summary>
            <param name="handle">The handle of the vehicle.</param>
        </member>
        <member name="M:IVSDKDotNet.CPools.DeleteChar(System.Int32)">
            <summary>
Deletes a char with the given handle.
</summary>
            <param name="handle">The handle of the char.</param>
        </member>
        <member name="M:IVSDKDotNet.CPool.IsValid(System.Int32)">
            <summary>
Checks if the object at the given slot is valid.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CPool.New">
            <summary>
Undocumented.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CPool.GetIndex(System.UIntPtr)">
            <summary>
Gets the handle of an object.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CPool.GetAt(System.UInt32)">
            <summary>
Gets a pointer to an object from this handle.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CPool.Get(System.Int32)">
            <summary>
Gets a pointer to an object from this slot in the pool.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPool.Type">
            <summary>
Gets the type of this pool.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPool.PoolPointer">
            <summary>
Gets or sets the raw pointer of this pool.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPool.Allocated">
            <summary>
Gets the amount of pools that are currently allocated of this type?
- I rather think it's a boolean that shows if this pool was allocted.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPool.Used">
            <summary>
Gets the amount of things there are currently in the world.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPool.Top">
            <summary>
Undocumented.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPool.EntrySize">
            <summary>
Gets the size of this pool.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPool.Count">
            <summary>
Gets the maximum number of elements this pool can have in it.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CPool.GetFromType(IVSDKDotNet.Enums.ePool)">
            <summary>
Gets a new CPool object from the given type.
</summary>
        </member>
        <member name="M:IVSDKDotNet.tSpawnData.Default">
            <summary>
Gets the default tSpawnData struct with Flag1 and Flag2 being set to 0.
</summary>
            <returns>A new tSpawnData struct initialized with the default values.</returns>
        </member>
        <member name="P:IVSDKDotNet.CPed.UnkPlayerSettingsRelated">
            <summary>
Used in CTaskComplexPlayerSettingsTask, initialized as *(dword_14CB008 + 32).
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPedMoveBlendOnFoot.MaxMoveBlendRatio">
            <summary>
Caps MoveState.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPedMoveBlendOnFoot.MoveLeanAmount">
            <summary>
3 is normal, less than 3 leans left, more than 3 leans right.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPedMoveBlendOnFoot.MoveState">
            <summary>
Move states: 0 - Stopped, 1 - Walk, 2 - Run, 3 - Sprint.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CVehicle.Lights">
            <summary>
Array of all vehicle lights. "1" seems to be when a light is broken and "0" when it's working.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CVehicle.VehicleFragInst">
            <summary>
Use with phInstGta.FromPointer
</summary>
        </member>
        <member name="P:IVSDKDotNet.CVehicle.VehicleFlags.NotDamagedUpsideDown">
            <summary>
Apparently unused.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CHandlingDataMgr.GetHandlingId(System.String)">
            <summary>
Gets the handling id from the given name.
</summary>
            <param name="handlingName">The handling name how it is defined in the handling.dat file.</param>
            <returns>The handling id from the given name.</returns>
        </member>
        <member name="M:IVSDKDotNet.CHandlingDataMgr.GetHandlingData(System.Int32)">
            <summary>
Gets the handling data from the given id.
</summary>
            <param name="id">The handling data id.</param>
            <returns>If successful, the handling data from the given id is returned. Otherwise, null.</returns>
        </member>
        <member name="P:IVSDKDotNet.CHandlingDataMgr.HandlingData">
            <summary>
- DOES NOT WORK PROPERLY YET - Gets the handling data of every car that is definied in the handling.dat file. Length: 160.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CObject.Scale">
            <summary>
Set by SET_OBJECT_SCALE but unused.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPhysical.SubmergedState">
            <summary>
0 - not submerged, 1 - on water surface? (swimming for peds) 2 - below water surface?
</summary>
        </member>
        <member name="P:IVSDKDotNet.CDynamicEntity.Anim">
            <summary>
Undocumented.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CDynamicEntity.GetBoneMatrix2(System.Int32)">
            <summary>
Used for transform modifications e.g. popup lights, firetruck/apc cannon but 1:1 identical to the GetBoneMatrix function.
</summary>
            <param name="boneID">The id of the bone to get the GTAMatrix from.</param>
            <returns>The GTAMatrix of the bone with the given id.</returns>
        </member>
        <member name="M:IVSDKDotNet.CDynamicEntity.GetBoneMatrix(System.Int32)">
            <summary>
Used for reading bone positions e.g. seat locations.
</summary>
            <param name="boneID">The id of the bone to get the GTAMatrix from.</param>
            <returns>The GTAMatrix of the bone with the given id.</returns>
        </member>
        <member name="P:IVSDKDotNet.CWorld.PlayerInFocus">
            <summary>
Gets or sets the current player in focus.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CWorld.GetNextPositionOnStreet(System.Numerics.Vector3)">
            <summary>
Gets the next position on street based on the pos parameter.
</summary>
            <param name="pos">Any position.</param>
            <returns>The next position on street.</returns>
        </member>
        <member name="M:IVSDKDotNet.CWorld.GetNextPositionOnPavement(System.Numerics.Vector3)">
            <summary>
Gets the next position on pavement based on the pos parameter.
</summary>
            <param name="pos">Any position.</param>
            <returns>The next position on pavement.</returns>
        </member>
        <member name="M:IVSDKDotNet.CWorld.ProcessLineOfSight(System.Numerics.Vector3,System.Numerics.Vector3,IVSDKDotNet.tLineOfSightResults@,System.UInt32)">
            <summary>
ProcessLineOfSight function with basic parameters.
</summary>
            <param name="source">Source position of the check.</param>
            <param name="target">Target position of the check.</param>
            <param name="pResults">Returns the line of sight results if the function succeeded.</param>
            <param name="nSeeThroughShootThrough">1 -&gt; Do see through check. 2 -&gt; Do shoot through check</param>
            <returns>True if the processing was successful. False if not.</returns>
        </member>
        <member name="M:IVSDKDotNet.CWorld.ProcessLineOfSight(System.Numerics.Vector3,System.Numerics.Vector3,System.UIntPtr,IVSDKDotNet.tLineOfSightResults@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
ProcessLineOfSight function with extended parameters.
ZMenu uses CWorld::ProcessLineOfSight(v, v2, 0, out tLineOfSightResults ret, 142, 1, 0, 2, 4)
</summary>
            <param name="source">Source position of the check.</param>
            <param name="target">Target position of the check.</param>
            <param name="pUnk">Unknown.</param>
            <param name="pResults">Returns the line of sight results if the function succeeded.</param>
            <param name="nFlags">Unknown.</param>
            <param name="nUnk1">Unknown.</param>
            <param name="nUnk2">Unknown.</param>
            <param name="nSeeThroughShootThrough">1 -&gt; Do see through check. 2 -&gt; Do shoot through check.</param>
            <param name="nUnk4">Unknown.</param>
            <returns>True if the processing was successful. False if not.</returns>
        </member>
        <member name="M:IVSDKDotNet.CWorld.RequestModel(System.Int32)">
            <summary>
Requests the given model.
</summary>
            <param name="model">The model that you want to request.</param>
        </member>
        <member name="M:IVSDKDotNet.CWorld.Remove(IVSDKDotNet.CEntity,System.Boolean)">
            <summary>
Removes an entity from the world.
</summary>
            <param name="entity">The entity to remove.</param>
            <param name="bUnk">Unknown. Mostly false?</param>
        </member>
        <member name="M:IVSDKDotNet.CWorld.Add(IVSDKDotNet.CEntity,System.Boolean)">
            <summary>
Adds an entity to the world.
</summary>
            <param name="entity">The entity to add.</param>
            <param name="bUnk">Unknown. Mostly false?</param>
        </member>
        <member name="P:IVSDKDotNet.CEntity.InstGta">
            <summary>
Cars have fraginst, peds have phinst. Use with phInstGta.FromPointer.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CEntity.EntityFlags2">
            <summary>
0x80 - Cast shadows.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CPad.Pads">
            <summary>
0 = Player 1, 1 = Player 2, 2 = Debug, 3 = Unknown.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CTimer.TimeScale3">
            <summary>
Gets or sets the time scale for death camera.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CTimer.TimeScale2">
            <summary>
Gets or sets the time scale by scripts.
This is usually set by scripts.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CTimer.TimeScale">
            <summary>
Gets or sets the time scale by scripts.
This is usually set by scripts.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CPlayerInfo.FindPlayerVehicle">
            <summary>
- DOES NOT WORK YET -
Finds the current vehicle the player is driving.
</summary>
            <returns>Returns a pointer to the current vehicle the player is driving.</returns>
        </member>
        <member name="M:IVSDKDotNet.CPlayerInfo.FindPlayerPed">
            <summary>
Finds the current player ped.
</summary>
            <returns>Returns a pointer to the current player ped.</returns>
        </member>
        <member name="M:IVSDKDotNet.CPlayerInfo.GetPlayerInfo(System.UInt32)">
            <summary>
Gets the CPlayerInfo object of the given player id.
</summary>
            <param name="nPlayerId">The id of the player you want to get the CPlayerInfo object from.</param>
            <returns>If successful, the CPlayerInfo object is returned. Otherwise, null.</returns>
        </member>
        <member name="M:IVSDKDotNet.CPlayerInfo.IsPlayerActive(System.Int32)">
            <summary>
Check if the player with the given id is active or not.
</summary>
            <param name="id">The player id.</param>
            <returns>True if the player with the given id is active. Otherwise, false.</returns>
        </member>
        <member name="M:IVSDKDotNet.CGame.ShowSubtitleMessage(System.String)">
            <summary>
Shows text at the bottom center of the screen where the subtitles are located.
Only works in-game.
</summary>
            <param name="str">The text to be shown.</param>
        </member>
        <member name="M:IVSDKDotNet.CGame.ShowSubtitleMessage(System.String,System.UInt32)">
            <summary>
Shows text at the bottom center of the screen where the subtitles are located.
Only works in-game.
</summary>
            <param name="str">The text to be shown.</param>
            <param name="time">How long the text should be shown in milliseconds.</param>
        </member>
        <member name="M:IVSDKDotNet.CGame.GetRadarRectangle">
            <summary>
Gets the rectangle of the radar in pixel.
</summary>
            <returns>The rectangle of the radar.</returns>
        </member>
        <member name="M:IVSDKDotNet.CGame.GetRadarRectangle(IVSDKDotNet.Enums.eFontScaling)">
            <summary>
Gets the rectangle of the radar with the specific scaling.
</summary>
            <param name="scaling">The scaling to apply.</param>
            <returns>The rectangle of the radar.</returns>
        </member>
        <member name="M:IVSDKDotNet.CGame.IsKeyPressed(System.Windows.Forms.Keys)">
            <summary>
Checks if the specified key is pressed.
</summary>
            <param name="key">The key to check if it's pressed.</param>
            <returns>True if the key is pressed, otherwise false.</returns>
        </member>
        <member name="M:IVSDKDotNet.CGame.IsInFocus">
            <summary>
Gets if the GTA IV main window is currently in focus.
</summary>
            <returns>True if GTA IV is currently in focus. Otherwise, false.</returns>
        </member>
        <member name="M:IVSDKDotNet.CGame.Initialise(System.String)">
            <summary>
Undocumented.
</summary>
            <param name="sGameDat">Path to the gta.dat file?</param>
            <returns>True if initialization was successful? Otherwise, false.</returns>
        </member>
        <member name="P:IVSDKDotNet.CGame.GameStartupPath">
            <summary>
Gets the absolute path to where GTA IV got started.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.Resolution">
            <summary>
Gets the resolution of the GTA IV window.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.GameVersion">
            <summary>
Gets the current version of GTA IV.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.CurrentEpisodeMenu">
            <summary>
Gets or sets the current episode menu id.
Used for switching hudcolor in each episode's menu screen and for loading the right episode when you hit play.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.CurrentEpisode">
            <summary>
Gets or sets the current episode id.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.GameFile">
            <summary>
Gets or sets the gta.dat path (common:/data/gta.dat).
</summary>
        </member>
        <member name="E:IVSDKDotNet.CGame.OnWindowFocusChanged">
            <summary>
Gets raised when the focus of the GTA IV window changes.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CGame.Mouse.IntersectsWith(System.Drawing.Rectangle)">
            <summary>
Gets if the mouse cursor intersects with the given rectangle.
</summary>
            <param name="rect">The rectangle to check.</param>
            <returns>True if the mouse cursor intersects with the given rectangle. Otherwise, false.</returns>
        </member>
        <member name="P:IVSDKDotNet.CGame.Mouse.Position">
            <summary>
Gets or sets the position of the mouse cursor.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.Mouse.CursorSize">
            <summary>
Gets or sets the size of the cursor.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.Mouse.MouseWheel">
            <summary>
Gets the current mouse wheel value.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.Mouse.XButton2Down">
            <summary>
Gets if the second x button on the mouse is pressed or not.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.Mouse.XButton1Down">
            <summary>
Gets if the first x button on the mouse is pressed or not.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.Mouse.RightButtonDown">
            <summary>
Gets if the right button is pressed or not.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.Mouse.LeftButtonDown">
            <summary>
Gets if the left button is pressed or not.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.Mouse.IsVisible">
            <summary>
Gets or sets if the mouse cursor should be visible.
</summary>
        </member>
        <member name="T:IVSDKDotNet.CGame.Mouse">
            <summary>
Gives you access to some functions of the IV-SDK .NET mouse.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CGame.Console.ExecuteCommand(System.String)">
            <summary>
Executes a command registered in the IV-SDK .NET console by its name.
</summary>
            <param name="name">The name of this command.</param>
            <returns>True if the command got registered. False if the command does not exists, or if the given name is null or whitespace.</returns>
        </member>
        <member name="M:IVSDKDotNet.CGame.Console.RegisterCommand(IVSDKDotNet.Script,System.String,System.Action`1{System.String[]})">
            <summary>
Registers a new console command that you can execute by its name in the IV-SDK .NET console.
</summary>
            <param name="addFor">The script the console command belongs to.</param>
            <param name="name">The name of this command. (Name is not case sensitive)</param>
            <param name="actionToExecute">The action that should be executed if the command gets executed.</param>
            <returns>True if the command got registered. False if the command already exists, or if the given name is null or whitespace.</returns>
        </member>
        <member name="M:IVSDKDotNet.CGame.Console.PrintError(System.String)">
            <summary>
Prints an error to the console.
</summary>
            <param name="str">The string you want to print to the console.</param>
        </member>
        <member name="M:IVSDKDotNet.CGame.Console.PrintWarning(System.String)">
            <summary>
Prints a warning to the console.
</summary>
            <param name="str">The string you want to print to the console.</param>
        </member>
        <member name="M:IVSDKDotNet.CGame.Console.PrintDebug(System.String)">
            <summary>
ONLY AVAILABLE IN DEBUG MODE! Prints a string to the console with the debug colours.
</summary>
            <param name="str">The string you want to print to the console.</param>
        </member>
        <member name="M:IVSDKDotNet.CGame.Console.Print(System.String)">
            <summary>
Prints a string to the console with the default colour.
</summary>
            <param name="str">The string you want to print to the console.</param>
        </member>
        <member name="M:IVSDKDotNet.CGame.Console.Clear">
            <summary>
Clears everything in the IV-SDK .NET console.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CGame.Console.Close">
            <summary>
Closes the IV-SDK .NET console.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CGame.Console.Open">
            <summary>
Opens the IV-SDK .NET console.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CGame.Console.IsConsoleOpen">
            <summary>
Gets if the IV-SDK .NET console is currently open.
</summary>
        </member>
        <member name="T:IVSDKDotNet.CGame.Console">
            <summary>
Gives you access to some functions of the IV-SDK .NET console.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CCam.GetCamOfType(System.Int32,System.Int32)">
            <summary>
Gets a cam of a specific type.
</summary>
            <param name="type">See eCamType enum for cam types.</param>
            <param name="unk">Unknown.</param>
            <returns>The cam of the specific type if found.</returns>
        </member>
        <member name="M:IVSDKDotNet.Direct3D9.D3DGraphics.IsDrawingAvailable">
            <summary>
Checks if drawing is available with IV-SDK .NET.
</summary>
            <returns>True if drawing is available. Otherwise, false.</returns>
        </member>
        <member name="P:IVSDKDotNet.Direct3D9.D3DGraphics.OnAfterDeviceResetEventExecutionTime">
            <summary>
Gets how much time the OnAfterDeviceReset event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Direct3D9.D3DGraphics.OnBeforeDeviceResetEventExecutionTime">
            <summary>
Gets how much time the OnBeforeDeviceReset event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Direct3D9.D3DGraphics.OnDeviceEndSceneEventExecutionTime">
            <summary>
Gets how much time the OnDeviceEndScene event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Direct3D9.D3DGraphics.OnInitEventExecutionTime">
            <summary>
Gets how much time the OnInit event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Direct3D9.D3DGraphics.ScissorRect">
            <summary>
The scissor rectangle is used as a rectangular clipping region.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Direct3D9.D3DGraphics.AvailableTextureMemory">
            <summary>
Gets the available texture memory.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Direct3D9.D3DGraphics.CreatedFor">
            <summary>
Gets the Script this D3DGraphics object was initialized with.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Direct3D9.D3DGraphics.Device">
            <summary>
Gets or sets the D3D9 device pointer. You should avoid setting it manually.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Direct3D9.D3DGraphics.Scaling">
            <summary>
Does not do much currently.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Direct3D9.D3DGraphics.OnAfterDeviceReset">
            <summary>
Gets called after the device got reset.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Direct3D9.D3DGraphics.OnBeforeDeviceReset">
            <summary>
Gets called before a device reset is about to happen.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Direct3D9.D3DGraphics.OnDeviceEndScene">
            <summary>
Gets called everytime EndScene is about to get called. Perfect to draw your stuff.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Direct3D9.D3DGraphics.OnInit">
            <summary>
Gets called on the very first EndScene call so you can initialize all your stuff in here like textures or fonts.
</summary>
        </member>
        <member name="M:IVSDKDotNet.Helper.Vector2Length(System.Single,System.Single)">
            <summary>
Returns the length of the given Vector2 values.
</summary>
            <param name="X">The Vector2 X.</param>
            <param name="Y">The Vector2 Y.</param>
            <returns>The length of the given Vector2 values.</returns>
        </member>
        <member name="M:IVSDKDotNet.Helper.GetPositionInFrontOfEntity(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
            <summary>
Gets the position in front of the given position based on the direction.
</summary>
            <param name="entityPos">The current position.</param>
            <param name="entityDir">The current direction.</param>
            <param name="multiplier">The distance of the in front position.</param>
            <returns>The position in front of the given position.</returns>
        </member>
        <member name="M:IVSDKDotNet.Helper.IsKeyPressedAsync(System.Windows.Forms.Keys)">
            <summary> Checks if the specified key is pressed. </summary>
            <param name="key">: The key to check if it's pressed.</param>
            <returns>True if the key is pressed, otherwise false.</returns>
        </member>
        <member name="T:CLR.CLRBridge">
            <summary>
Bridge between IVSDKDotNet.asi and IVSDKDotNetWrapper.dll.
There can only be one instance of this class.
</summary>
        </member>
        <member name="T:IVSDKDotNet.Manager.ManagerScript">
            <summary>
Only used for the IV-SDK .NET Manager.
There can only be one instance of this class.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.ProcessPadEventExecutionTime">
            <summary>
Gets how much time the ProcessPad event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.ProcessAutomobileEventExecutionTime">
            <summary>
Gets how much time the ProcessAutomobile event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.ProcessCameraEventExecutionTime">
            <summary>
Gets how much time the ProcessCamera event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.DrawingEventExecutionTime">
            <summary>
Gets how much time the Drawing event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.MountDeviceEventExecutionTime">
            <summary>
Gets how much time the MountDevice event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.GameLoadPriorityEventExecutionTime">
            <summary>
Gets how much time the GameLoadPriority event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.GameLoadEventExecutionTime">
            <summary>
Gets how much time the GameLoad event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.TickEventExecutionTime">
            <summary>
Gets how much time the Tick event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.InitializedEventExecutionTime">
            <summary>
Gets how much time the Initialized event took to execute.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.OnlyRaiseKeyEventsWhenInGame">
            <summary>
Gets or sets if the KeyDown and KeyUp events should only be raised when the player is actually in-game and not in main menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.Settings">
            <summary>
The settings file of this script.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.ScriptResourceFolder">
            <summary>
Gets or sets the resource folder for this Script where all the files required by this Script are located.
The folder has to be named the same name as your Script (without extension), and needs to be placed in the scripts folder.
The string will be null if the folder doesn't exist.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.CustomAssembliesPath">
            <summary>
Gets or sets the custom Assemblies path for this Script if you have set the AssembliesLocation to Custom.
The path is relative to the root directory of GTA IV.
Example: IVSDKDotNet\scripts\AssembliesForMyEpicScript - The Assemblies for your Script will now be loaded from the AssembliesForMyEpicScript folder.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.AssembliesLocation">
            <summary>
Gets or sets where the Assemblies are located for this script. Default: GameRootDirectory
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.ScriptDomain">
            <summary>
Gets the current AppDomain of this script.
</summary>
        </member>
        <member name="P:IVSDKDotNet.Script.ID">
            <summary>
The unique ID of this script.
</summary>
        </member>
        <member name="M:IVSDKDotNet.Script.SendScriptCommand(IVSDKDotNet.Script,System.String)">
            <summary>
Allows you to communicate with other scripts.
</summary>
            <param name="toScript">To which the script the command should be sent to.</param>
            <param name="command">The command to sent to the script.</param>
            <returns>If successful, true is returned. Otherwise, false.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.GetAllScripts">
            <summary>
Returns an array of all currently running scripts.
</summary>
            <returns>If successful, an array of all currently running script is returned. Otherwise, null.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.GetScript(System.String)">
            <summary>
Returns a script by its name if available.
</summary>
            <param name="name">The name of the script you want to get.</param>
            <returns>The script if found. Otherwise, null.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.GetScript(System.Guid)">
            <summary>
Returns a script by its id if available.
</summary>
            <param name="id">The id of the script you want to get.</param>
            <returns>The script if found. Otherwise, null.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.IsScriptRunning(System.String)">
            <summary>
Allows you to check if the script you are checking for is running.
</summary>
            <param name="name">The name of the script you want to check for.</param>
            <returns>True if the script is running. Otherwise, false.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.IsScriptRunning(System.Guid)">
            <summary>
Allows you to check if the script you are checking for is running.
</summary>
            <param name="id">The name of the script you want to check for.</param>
            <returns>True if the script is running. Otherwise, false.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.DoesScriptExists(System.String)">
            <summary>
Allows you to check if the script you are checking for exists.
</summary>
            <param name="name">The name of the script you want to check for.</param>
            <returns>True if the script exists. Otherwise, false.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.DoesScriptExists(System.Guid)">
            <summary>
Allows you to check if the script you are checking for exists.
</summary>
            <param name="id">The id of the script you want to check for.</param>
            <returns>True if the script exists. Otherwise, false.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.GetFullPath">
            <summary>
Return the absolute path of this script.
</summary>
            <returns>The absolute path of the script, or an empty string if the full path could not get retrieved.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.GetName">
            <summary>
Returns the name of this script.
</summary>
            <returns>The name of this script, or an empty string if the name could not get retrieved.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.RegisterConsoleCommand(System.String,System.Action`1{System.String[]})">
            <summary>
Registers a new console command that you can execute by its name in the IV-SDK DotNet console.
</summary>
            <param name="name">The name of this command. (Name is not case sensitive)</param>
            <param name="actionToExecute">The action that should be executed if the command gets executed.</param>
            <returns>True if the command got registered. False if the command already exists, or if the given name is null or whitespace.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.Abort">
            <summary>
Aborts this script.
<returns>True if the script got aborted. Otherwise, false.</returns></summary>
        </member>
        <member name="M:IVSDKDotNet.Script.IsKeyPressed(System.Windows.Forms.Keys)">
            <summary>
Checks if the specified key is pressed.
</summary>
            <param name="Key">: The key to check if it's pressed.</param>
            <returns>True if the key is pressed, otherwise false.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.ShowSubtitleMessage(System.String)">
            <summary>
Shows text at the bottom center of the screen where the subtitles are located for 2 seconds.
Only works in-game.
</summary>
            <param name="str">The text to be shown.</param>
        </member>
        <member name="M:IVSDKDotNet.Script.ShowSubtitleMessage(System.String,System.Object[])">
            <summary>
Shows text at the bottom center of the screen where the subtitles are located for 2 seconds.
Only works in-game.
</summary>
            <param name="str">The text to be shown.</param>
        </member>
        <member name="M:IVSDKDotNet.Script.ShowSubtitleMessage(System.String,System.UInt32)">
            <summary>
Shows text at the bottom center of the screen where the subtitles are located.
Only works in-game.
</summary>
            <param name="str">The text to be shown.</param>
            <param name="time">How long the text should be shown in milliseconds.</param>
        </member>
        <member name="M:IVSDKDotNet.Script.ChangeTimerInterval(System.Guid,System.Int32)">
            <summary>
Changes the interval of a timer.
</summary>
            <param name="id">The ID of the timer to change its interval.</param>
            <param name="interval">The new interval. Default is 100 milliseconds.</param>
        </member>
        <member name="M:IVSDKDotNet.Script.ChangeTimerState(System.Guid,System.Boolean)">
            <summary>
Changes the pause state of a timer.
</summary>
            <param name="id">The ID of the timer to change its pause state.</param>
            <param name="pause">Pause, or not pause.</param>
        </member>
        <member name="M:IVSDKDotNet.Script.AbortTaskOrTimer(System.Guid)">
            <summary>
Aborts a task or timer with the given id.
</summary>
            <param name="id">The ID of the task or timer to abort.</param>
        </member>
        <member name="M:IVSDKDotNet.Script.StartNewTimer(System.Int32,System.Action)">
            <summary>
Starts a new asynchronous Timer.
</summary>
            <param name="interval">The interval how fast the Timer should run.</param>
            <param name="actionToExecute">The action that should be executed each Timer Tick.</param>
            <returns>The Guid of the just created Timer which can be used to control the Timer. If Guid is empty then Timer could not get created.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.WaitInTask(System.Guid,System.Int32)">
            <summary>
Waits in the Task for the specified amount of time.
</summary>
            <param name="id">The ID of the Task.</param>
            <param name="waitTimeInMilliseconds">The time to wait in milliseconds.</param>
        </member>
        <member name="M:IVSDKDotNet.Script.StartNewTask(System.Func`1{System.Object},System.Action`1{System.Object})">
            <summary>
Starts a new asynchronous task.
</summary>
            <param name="funcToExecute">The function that should be executed.</param>
            <param name="continueWithAction">The action that should be executed when the given tasks function completed and is about to reach its end. The object parameter of this action is the data returned from the function.</param>
            <returns>The Guid of the just created Task which can be used to control the Task. If Guid is empty then Task could not get created.</returns>
        </member>
        <member name="M:IVSDKDotNet.Script.StartNewTask(System.Func`1{System.Object})">
            <summary>
Starts a new asynchronous task.
</summary>
            <param name="funcToExecute">The function that should be executed.</param>
            <returns>The Guid of the just created Task which can be used to control the Task. If Guid is empty then Task could not get created.</returns>
        </member>
        <member name="E:IVSDKDotNet.Script.AssemblyResolve">
            <summary>
Gets raised when you set Script.AssembliesLocation to DecideManuallyForEachAssembly and an Assembly gets requested for this Script.
You need to return the absolut path of the reqested Assembly.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.ScriptCommandReceived">
            <summary>
Gets raised when another IV-SDK .NET Script has sent a command to this IV-SDK .NET Script. 
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.KeyDown">
            <summary>
Gets raised when a key was pressed.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.KeyUp">
            <summary>
Gets raised when a key was released.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.ProcessPad">
            <summary>
Gets raised EVERYTIME even when in main menu.
You can set all pad controls here, called once per frame for each pad.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.ProcessCamera">
            <summary>
Gets raised after CCamera.m_pFinalCam has been written to.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.Drawing">
            <summary>
Gets raised twice per frame when in-game, and even works in main menu.
(CRenderPhasePostRenderViewport)
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.MountDevice">
            <summary>
Gets raised when game is loading, switching from one episode to another or when loading the same save game again.
Can be used for any rage.fiDevice stuff.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.GameLoadPriority">
            <summary>
Gets raised before GameLoad when game is loading or when switching from one episode to another.
Can be used for files that need to overwrite base game files.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.GameLoad">
            <summary>
Gets raised when game is loading or when switching from one episode to another.
Can be used for addon files that don't interfere with game files.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.Tick">
            <summary>
Gets raised every frame when in-game.
(CGame.Process).
This event uses the CTheScripts.SetDummyThread/RestorePreviousThread method.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.Uninitialize">
            <summary>
Gets raised when the script is about to be unloaded so you can free some previously created stuff in here.
</summary>
        </member>
        <member name="E:IVSDKDotNet.Script.Initialized">
            <summary>
Gets raised after the constructor so you can safely call any functions in here without having to worry about stuff not being initialized yet.
Native functions cannot be called in here yet.
</summary>
        </member>
        <member name="T:IVSDKDotNet.Script">
            <summary>
Marks the class as a IV-SDK .NET Script.
This class needs to be inherited if you want this class to be the entry point of your IV-SDK .NET Script.
</summary>
        </member>
        <member name="P:IVSDKDotNet.SettingsFile.FilePath">
            <summary>
The path to the ini file.
</summary>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.SetVector4(System.String,System.String,System.Numerics.Vector4)">
            <summary>
Sets the Vector4 from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to set the value to.</param>
            <param name="value">The new value.</param>
            <returns>True if the value from the given section and key got changed. Otherwise false if the section or key does not exists.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.GetVector4(System.String,System.String,System.Numerics.Vector4)">
            <summary>
Gets an Vector4 from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to get the value from.</param>
            <param name="defaultValue">The default value if get value fails.</param>
            <returns>The Vector4 from the given section and key strings. Otherwise it returns defaultValue.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.SetVector3(System.String,System.String,System.Numerics.Vector3)">
            <summary>
Sets the Vector3 from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to set the value to.</param>
            <param name="value">The new value.</param>
            <returns>True if the value from the given section and key got changed. Otherwise false if the section or key does not exists.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.GetVector3(System.String,System.String,System.Numerics.Vector3)">
            <summary>
Gets an Vector3 from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to get the value from.</param>
            <param name="defaultValue">The default value if get value fails.</param>
            <returns>The Vector3 from the given section and key strings. Otherwise it returns defaultValue.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.SetVector2(System.String,System.String,System.Numerics.Vector2)">
            <summary>
Sets the Vector2 from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to set the value to.</param>
            <param name="value">The new value.</param>
            <returns>True if the value from the given section and key got changed. Otherwise false if the section or key does not exists.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.GetVector2(System.String,System.String,System.Numerics.Vector2)">
            <summary>
Gets an Vector2 from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to get the value from.</param>
            <param name="defaultValue">The default value if get value fails.</param>
            <returns>The Vector2 from the given section and key strings. Otherwise it returns defaultValue.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.SetQuaternion(System.String,System.String,System.Numerics.Quaternion)">
            <summary>
Sets the Quaternion from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to set the value to.</param>
            <param name="value">The new value.</param>
            <returns>True if the value from the given section and key got changed. Otherwise false if the section or key does not exists.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.GetQuaternion(System.String,System.String,System.Numerics.Quaternion)">
            <summary>
Gets an Quaternion from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to get the value from.</param>
            <param name="defaultValue">The default value if get value fails.</param>
            <returns>The Quaternion from the given section and key strings. Otherwise it returns defaultValue.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.SetKey(System.String,System.String,System.Windows.Forms.Keys)">
            <summary>
Sets the WinForms Key from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to set the value to.</param>
            <param name="value">The new value.</param>
            <returns>True if the value from the given section and key got changed. Otherwise false if the section or key does not exists.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.GetKey(System.String,System.String,System.Windows.Forms.Keys)">
            <summary>
Gets the WinForms Key from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to get the value from.</param>
            <param name="defaultValue">The default value if get value fails.</param>
            <returns>The WinForms Key from the given section and key strings. Otherwise it returns defaultValue.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.SetColor(System.String,System.String,System.Drawing.Color)">
            <summary>
Sets the color from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to set the value to.</param>
            <param name="value">The new value.</param>
            <returns>True if the value from the given section and key got changed. Otherwise false if the section or key does not exists.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.GetColor(System.String,System.String,System.Drawing.Color)">
            <summary>
Gets the color from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to get the value from.</param>
            <param name="defaultValue">The default value if get value fails.</param>
            <returns>The color from the given section and key strings. Otherwise it returns defaultValue.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.SetFloat(System.String,System.String,System.Single)">
            <summary>
Sets the float from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to set the value to.</param>
            <param name="value">The new value.</param>
            <returns>True if the value from the given section and key got changed. Otherwise false if the section or key does not exists.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.GetFloat(System.String,System.String,System.Single)">
            <summary>
Gets the float from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to get the value from.</param>
            <param name="defaultValue">The default value if get value fails.</param>
            <returns>The float from the given section and key strings. Otherwise it returns defaultValue.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.SetInteger(System.String,System.String,System.Int32)">
            <summary>
Sets the integer from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to set the value to.</param>
            <param name="value">The new value.</param>
            <returns>True if the value from the given section and key got changed. Otherwise false if the section or key does not exists.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.GetInteger(System.String,System.String,System.Int32)">
            <summary>
Gets the integer from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to get the value from.</param>
            <param name="defaultValue">The default value if get value fails.</param>
            <returns>The integer from the given section and key strings. Otherwise it returns defaultValue.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.SetBoolean(System.String,System.String,System.Boolean)">
            <summary>
Sets the boolean from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to set the value to.</param>
            <param name="value">The new value.</param>
            <returns>True if the value from the given section and key got changed. Otherwise false if the section or key does not exists.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.GetBoolean(System.String,System.String,System.Boolean)">
            <summary>
Gets the boolean from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to get the value from.</param>
            <param name="defaultValue">The default value if get value fails.</param>
            <returns>The boolean from the given section and key strings. Otherwise it returns defaultValue.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.SetValue(System.String,System.String,System.String)">
            <summary>
Sets the value from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to set the value to.</param>
            <param name="value">The new value.</param>
            <returns>True if the value from the given section and key got changed. Otherwise false if the section or key does not exists.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.GetValue(System.String,System.String,System.String)">
            <summary>
Gets the value from the given section and key strings from the loaded ini file.
</summary>
            <param name="section">The section the key is located.</param>
            <param name="key">The key you want to get the value from.</param>
            <param name="defaultValue">The default value if get value fails.</param>
            <returns>The value from the given section and key strings. Otherwise it returns defaultValue.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.AddKeyToSection(System.String,System.String)">
            <summary>
Adds a new key to the specified section.
</summary>
            <param name="section">The section to add the new key.</param>
            <param name="keyName">The name of the new key.</param>
            <returns>True if the key got created in the section. Otherwise false if the section does not exists, the key already exists in the ini or if the name is null.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.AddSection(System.String)">
            <summary>
Adds a new section to the ini file.
</summary>
            <param name="sectionName">The name of the new section.</param>
            <returns>True if the section got created. Otherwise false if the section already exists in the ini or if the name is null.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.Load">
            <summary>
Loads the content of the specified ini file.
If you made changes to the ini via SetValue and reload the file those changes are getting lost if you haven't saved the file first with Save.
</summary>
            <returns>True if the file got loaded. False when the file does not exists.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.Save">
            <summary>
Overrides the current ini file with the new content.
</summary>
            <returns>True if the file got saved. False when the file does not exists or if there is nothing to save.</returns>
        </member>
        <member name="M:IVSDKDotNet.SettingsFile.#ctor(System.String)">
            <summary>
Creates a new instance of the SettingsFile class.
</summary>
            <param name="filePath">The path to the ini file.</param>
        </member>
        <member name="T:IVSDKDotNet.Native.Function">
            <summary>
This class gives you the possiblity to manually call Native Functions by their Name.
</summary>
        </member>
        <member name="M:IVSDKDotNet.Native.Natives.CREATE_WIDGET_GROUP(System.Int32)">
            <summary>Hey, isn't that Zolika1351?</summary>
        </member>
        <member name="T:IVSDKDotNet.Native.Natives">
            <summary>
GTA IV Native Functions.
Natives with an underscore at the beginning will likely crash the game.
If they crash the game, they might work if you do CTheScripts.SetDummyThread(), then call the native, and then CTheScripts.RestorePreviousThread().
</summary>
        </member>
        <member name="M:IVSDKDotNet.CTheScripts.GivePedScriptedTask(System.Int32,System.UIntPtr,System.Int32)">
            <summary>
Gives the specified ped a task.
</summary>
            <param name="handle">The ped handle.</param>
            <param name="task">The task you want to assign to the ped.</param>
            <param name="unk">Unknown.</param>
        </member>
        <member name="M:IVSDKDotNet.CTheScripts.IsPlayerOnAMission">
            <summary>
Gets if the player is on a mission.
</summary>
            <returns>True if the player is on a mission. Otherwise, false.</returns>
        </member>
        <member name="M:IVSDKDotNet.CTheScripts.FindNativeAddress(System.UInt32)">
            <summary>
Gets the native address from the given native hash.
</summary>
            <param name="nativeHash">The native hash.</param>
            <returns>The native address.</returns>
        </member>
        <member name="M:IVSDKDotNet.CTheScripts.RestorePreviousThread">
            <summary>
Restores the current thread to the thread previously stored by the SetDummyThread method. Should be called after you called SetDummyThread for a native function.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CTheScripts.SetDummyThread">
            <summary>
Sets the current thread to a dummy thread: uint8_t threadDummy[256]; - Needed for the GivePedScriptedTask method and some native functions.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Game.ClipCapture">
            <summary>
Gets or sets the Clip Capture value set in the "Game" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Game.AutoSave">
            <summary>
Gets or sets the Autosave value set in the "Game" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Graphics.VehicleDensity">
            <summary>
Gets or sets the Vehicle Density value set in the "Graphics" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Display.HudOn">
            <summary>
Gets or sets the HUD value set in the "Display" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Display.RadarMode">
            <summary>
Gets or sets the Radar value set in the "Display" settings menu.
O = Off, 1 = On, 2 = Blips only.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Display.FloatSaturation">
            <summary>
Gets or sets the float Saturation value set in the "Display" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Display.Saturation">
            <summary>
Gets or sets the Saturation value set in the "Display" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Display.FloatContrast">
            <summary>
Gets or sets the float Contrast value set in the "Display" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Display.Contrast">
            <summary>
Gets or sets the Contrast value set in the "Display" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Display.FloatBrightness">
            <summary>
Gets or sets the float Brightness value set in the "Display" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Display.Brightness">
            <summary>
Gets or sets the Brightness value set in the "Display" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Controls.MouseSensitivity">
            <summary>
Gets or sets the Mouse Sensitivity value set in the "Controls" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Controls.HeliMouseControls">
            <summary>
Gets or sets the Helicopter Mouse Controls value set in the "Controls" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Controls.InvertRightStickX">
            <summary>
Gets or sets the Invert Right Stick value set in the "Controls" settings menu.
</summary>
        </member>
        <member name="P:IVSDKDotNet.CMenuManager.Controls.InvertMouseX">
            <summary>
Gets or sets the Invert Mouse value set in the "Controls" settings menu.
</summary>
        </member>
        <member name="M:IVSDKDotNet.RAGE.InitWndProcHook">
            <summary>
Initializes the WndProc hook. This method will automatically be called when IV-SDK .NET initializes.
</summary>
            <returns>True when the hook got initialized successfully. Otherwise, false.</returns>
        </member>
        <member name="M:IVSDKDotNet.RAGE.GetDirect3DDevice9">
            <summary>
Gets the IDirect3DDevice9 pointer.
</summary>
            <returns>The pointer to the IDirect3DDevice9 of GTA IV.</returns>
        </member>
        <member name="M:IVSDKDotNet.RAGE.GetHWND">
            <summary>
Gets the main window handle pointer.
</summary>
            <returns>The pointer to the main window handle of GTA IV.</returns>
        </member>
        <member name="E:IVSDKDotNet.RAGE.OnWndProcMessageReceived">
            <summary>
Gets raised when the GTA IV window receives Windows Messages. See https://wiki.winehq.org/List_Of_Windows_Messages for a list of all Windows Messages. If you return true from this event, this says that you do not want GTA IV to receive its original message.
</summary>
        </member>
        <member name="P:IVSDKDotNet.MemoryAccess.GameVersion">
            <summary>
Gets the current version of GTA IV.
</summary>
        </member>
        <member name="P:IVSDKDotNet.MemoryAccess.BaseAddress">
            <summary>
The base address of GTA IV.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DFontDescription.FontPitchAndFamily">
            <summary>
Pitch and family of the font.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DFontDescription.FontCharSet">
            <summary>
Character set.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DFontDescription.FontPrecision">
            <summary>
Output precision. The output precision defines how closely the output must match
the requested font height, width, character orientation, escapement, pitch, and
font type.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DFontDescription.FontQuality">
            <summary>
Output quality.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DFontDescription.FontWeight">
            <summary>
Weight of the font in the range from 0 through 1000.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DFontDescription.Italic">
            <summary>
Set to TRUE for an Italic font.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DFontDescription.MipLevels">
            <summary>
Number of mip levels requested. If this value is zero or D3DX_DEFAULT, a complete
mipmap chain is created. If the value is 1, the texture space is mapped identically
to the screen space.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DFontDescription.Height">
            <summary>
Height, in logical units, of the font's character cell or character.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DFontDescription.Width">
            <summary>
Width, in logical units, of characters in the font.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DFontDescription.FaceName">
            <summary>
A null-terminated string or characters that specifies the typeface name of the
font. The length of the string must not exceed 32 characters, including the terminating
null character. If FaceName is an empty string, the first font that matches the
other specified attributes will be used. If the compiler settings require Unicode,
the data type TCHAR resolves to WCHAR; otherwise, the data type resolves to CHAR.
See Remarks.
</summary>
        </member>
        <member name="M:IVSDKDotNet.Direct3D9.D3DFontDescription.Default">
            <summary>
Creates a D3DFontDescription object with the font family being Arial, the height being 24 and everything else being the default value.
</summary>
            <returns>The D3DFontDescription object.</returns>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.PresentationInterval">
            <summary>
The maximum rate at which the swap chain's back buffers can be presented to the
front buffer. For a detailed explanation of the modes and the intervals that
are supported, see SharpDX.Direct3D9.Present.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.FullScreenRefreshRateInHz">
            <summary>
The rate at which the display adapter refreshes the screen. The value depends
on the mode in which the application is running: For windowed mode, the refresh
rate must be 0. For full-screen mode, the refresh rate is one of the refresh
rates returned by EnumAdapterModes.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.PresentFlags">
            <summary>
One of the SharpDX.Direct3D9.PresentFlags constants.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.AutoDepthStencilFormat">
            <summary>
Member of the SharpDX.Direct3D9.Format enumerated type. The format of the automatic
depth-stencil surface that the device will create. This member is ignored unless
EnableAutoDepthStencil is TRUE.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.EnableAutoDepthStencil">
            <summary>
If this value is TRUE, Direct3D will manage depth buffers for the application.
The device will create a depth-stencil buffer when it is created. The depth-stencil
buffer will be automatically set as the render target of the device. When the
device is reset, the depth-stencil buffer will be automatically destroyed and
recreated in the new size. If EnableAutoDepthStencil is TRUE, then AutoDepthStencilFormat
must be a valid depth-stencil format.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.Windowed">
            <summary>
True if the application runs windowed; False if the application runs full-screen.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.DeviceWindowHandle">
            <summary>
The device window determines the location and size of the back buffer on screen.
This is used by Direct3D when the back buffer contents are copied to the front
buffer during Present. For a full-screen application, this is a handle to the
top window (which is the focus window). For applications that use multiple full-screen
devices (such as a multimonitor system), exactly one device can use the focus
window as the device window. All other devices must have unique device windows.
For a windowed-mode application, this handle will be the default target window
for Present. If this handle is null, the focus window will be taken. Note that
no attempt is made by the runtime to reflect user changes in window size. The
back buffer is not implicitly reset when this window is reset. However, the Present
method does automatically track window position changes.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.SwapEffect">
            <summary>
Member of the SharpDX.Direct3D9.SwapEffect enumerated type. The runtime will
guarantee the implied semantics concerning buffer swap behavior; therefore, if
Windowed is TRUE and SwapEffect is set to SharpDX.Direct3D9.SwapEffect.Flip,
the runtime will create one extra back buffer and copy whichever becomes the
front buffer at presentation time. SharpDX.Direct3D9.SwapEffect.Copy requires
that BackBufferCount be set to 1. SharpDX.Direct3D9.SwapEffect.Discard will be
enforced in the debug runtime by filling any buffer with noise after it is presented.
Differences between Direct3D9 and Direct3D9Ex In Direct3D9Ex, SharpDX.Direct3D9.SwapEffect.FlipEx
is added to designate when an application is adopting flip mode. That is, whan
an application's frame is passed in window's mode (instead of copied) to the
Desktop Window Manager(DWM) for composition. Flip mode provides more efficient
memory bandwidth and enables an application to take advantage of full-screen-present
statistics. It does not change full screen behavior. Flip mode behavior is available
beginning with Windows 7. ?
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.MultiSampleQuality">
            <summary>
Quality level. The valid range is between zero and one less than the level returned
by pQualityLevels used by CheckDeviceMultiSampleType. Passing a larger value
returns the error SharpDX.Direct3D9.ResultCode.InvalidCall. Paired values of
render targets or of depth stencil surfaces and SharpDX.Direct3D9.MultisampleType
must match.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.MultiSampleType">
            <summary>
Member of the SharpDX.Direct3D9.MultisampleType enumerated type. The value must
be SharpDX.Direct3D9.MultisampleType.None unless SwapEffect has been set to SharpDX.Direct3D9.SwapEffect.Discard.
Multisampling is supported only if the swap effect is SharpDX.Direct3D9.SwapEffect.Discard.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.BackBufferCount">
            <summary>
This value can be between 0 and SharpDX.Direct3D9.Present.BackBuffersMaximum
(or SharpDX.Direct3D9.Present.BackBuffersMaximumEx when using Direct3D 9Ex).
Values of 0 are treated as 1. If the number of back buffers cannot be created,
the runtime will fail the method call and fill this value with the number of
back buffers that could be created. As a result, an application can call the
method twice with the same SharpDX.Direct3D9.PresentParameters structure and
expect it to work the second time. The method fails if one back buffer cannot
be created. The value of BackBufferCount influences what set of swap effects
are allowed. Specifically, any SharpDX.Direct3D9.SwapEffect.Copy swap effect
requires that there be exactly one back buffer.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.BackBufferFormat">
            <summary>
The back buffer format. For more information about formats, see SharpDX.Direct3D9.Format.
This value must be one of the render-target formats as validated by CheckDeviceType.
You can use GetDisplayMode to obtain the current format. In fact, SharpDX.Direct3D9.Format.Unknown
can be specified for the BackBufferFormat while in windowed mode. This tells
the runtime to use the current display-mode format and eliminates the need to
call GetDisplayMode. For windowed applications, the back buffer format no longer
needs to match the display-mode format because color conversion can now be done
by the hardware (if the hardware supports color conversion). The set of possible
back buffer formats is constrained, but the runtime will allow any valid back
buffer format to be presented to any desktop format. (There is the additional
requirement that the device be operable in the desktop; devices typically do
not operate in 8 bits per pixel modes.) Full-screen applications cannot do color
conversion.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.BackBufferHeight">
            <summary>
Height of the new swap chain's back buffers, in pixels. If Windowed is SharpDX.Result.False
(the presentation is full-screen), this value must equal the height of one of
the enumerated display modes found through EnumAdapterModes. If Windowed is TRUE
and either BackBufferWidth or BackBufferHeight is zero, the corresponding dimension
of the client area of the hDeviceWindow (or the focus window, if hDeviceWindow
is null) is taken.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.D3DPresentParameters.BackBufferWidth">
            <summary>
Width of the new swap chain's back buffers, in pixels. If Windowed is SharpDX.Result.False
(the presentation is full-screen), this value must equal the width of one of
the enumerated display modes found through EnumAdapterModes. If Windowed is TRUE
and either BackBufferWidth or BackBufferHeight is zero, the corresponding dimension
of the client area of the hDeviceWindow (or the focus window, if hDeviceWindow
is null) is taken.
</summary>
        </member>
        <member name="M:IVSDKDotNet.Direct3D9.D3DPresentParameters.Default">
            <summary>
Creates a D3DPresentParameters object with default values.
</summary>
            <returns>The D3DPresentParameters object.</returns>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontDrawFlags.WordBreak">
            <summary>
Allow word breaks.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontDrawFlags.VerticalCenter">
            <summary>
Vertically align the text to the center.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontDrawFlags.Top">
            <summary>
Align the text to the top.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontDrawFlags.SingleLine">
            <summary>
Force all text to a single line.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontDrawFlags.RtlReading">
            <summary>
Rendering the text in right-to-left reading order.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontDrawFlags.Right">
            <summary>
Align the text to the right.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontDrawFlags.NoClip">
            <summary>
Don't clip the text.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontDrawFlags.Left">
            <summary>
Align the text to the left.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontDrawFlags.ExpandTabs">
            <summary>
Expand tab characters.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontDrawFlags.Center">
            <summary>
Align the text to the center.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontDrawFlags.Bottom">
            <summary>
Align the text to the bottom.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Variable">
            <summary>
Variable pitch.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Swiss">
            <summary>
Use the Swiss family.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Script">
            <summary>
Use the Script family.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Roman">
            <summary>
Use the Roman family.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Mono">
            <summary>
Mono pitch.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Modern">
            <summary>
Use the Modern family.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Fixed">
            <summary>
Fixed pitch.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.DontCare">
            <summary>
The font family doesn't matter.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Decorative">
            <summary>
Use the Decorative family.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ClearTypeNatural">
            <summary>
ClearTypeNatural
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ClearType">
            <summary>
ClearType
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Antialiased">
            <summary>
Antialiased
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.NonAntialiased">
            <summary>
Non antialiased
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Proof">
            <summary>
Proof
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Draft">
            <summary>
Draft
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PostScriptOnly">
            <summary>
PostScriptOnly
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ScreenOutline">
            <summary>
ScreenOutline
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Outline">
            <summary>
Outline
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TrueTypeOnly">
            <summary>
TrueTypeOnly
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Raster">
            <summary>
Raster
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Device">
            <summary>
Device
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TrueType">
            <summary>
TrueType
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Stroke">
            <summary>
Stroke
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Character">
            <summary>
Character
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.String">
            <summary>
String
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Vietnamese">
            <summary>
The Vietnamese character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Turkish">
            <summary>
The Turkish character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Thai">
            <summary>
The Thai character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Symbol">
            <summary>
The symbol character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ShiftJIS">
            <summary>
The ShiftJIS character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Russian">
            <summary>
The Russian character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Oem">
            <summary>
The OEM character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Mac">
            <summary>
The Mac character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Johab">
            <summary>
The Johab character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Hebrew">
            <summary>
The Hebrew character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Hangul">
            <summary>
The Hangul character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Greek">
            <summary>
The Greek character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.GB2312">
            <summary>
The GB2312 character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.EastEurope">
            <summary>
The East Europe character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Default">
            <summary>
The default system character set.
</summary>
            <summary>
Default
</summary>
            <summary>
Default
</summary>
            <summary>
Default pitch.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ChineseBig5">
            <summary>
The Chinese character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Baltic">
            <summary>
The Baltic character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Arabic">
            <summary>
The Arabic character set.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.Ansi">
            <summary>
The ANSI character set.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.UltraLight">
            <summary>
Make the font ultra light.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.UltraBold">
            <summary>
Use an ultra bold weight.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.Thin">
            <summary>
Make the font thin.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.SemiBold">
            <summary>
Use a semi-bold weight.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.Regular">
            <summary>
Use a regular weight.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.Normal">
            <summary>
Use a normal weight.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.Medium">
            <summary>
Use a medium weight.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.Light">
            <summary>
Make the font light.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.Heavy">
            <summary>
Use a heavy weight.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.ExtraLight">
            <summary>
Make the font extra light.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.ExtraBold">
            <summary>
Use an extra bold weight.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.DoNotCare">
            <summary>
The font weight doesn't matter.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.DemiBold">
            <summary>
Use a demi-bold weight.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.Bold">
            <summary>
Use a bold weight.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3DFontWeight.Black">
            <summary>
Use a black weight.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3D9ResourceType.Font">
            <summary>
Specifies that the resource is a font resource.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Direct3D9.eD3D9ResourceType.Texture">
            <summary>
Specifies that the resource is a texture resource.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Enums.eNewGetInVehicleType.GET_IN_DEFAULT_PLAYER">
            <summary>
The default.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Enums.eNewGetInVehicleType.GET_IN_TRAIN">
            <summary>
Trains will only work using this type but regular cars are unaffected.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Enums.eNewGetInVehicleType.GET_IN_NETWORK">
            <summary>
Get into the passenger seat if the driver is friendly.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Enums.eFontScaling.Pixel">
            <summary>
A value between 0 and the maximum screen resolution (check CGame.Resolution to get the size)
</summary>
        </member>
        <member name="F:IVSDKDotNet.Enums.eFontScaling.ScreenUnits">
            <summary>
A value between 0 and 1, where 1 equals full screen size
</summary>
        </member>
        <member name="F:IVSDKDotNet.Enums.eFontScaling.FontSize">
            <summary>
A value between 0 and 20, where 20 equals full screen size
</summary>
        </member>
        <member name="T:IVSDKDotNet.Enums.eNmID">
            <summary>
Euphoria related (natives *NM_MESSAGE)
</summary>
        </member>
        <member name="F:IVSDKDotNet.Enums.eAssembliesLocation.Custom">
            <summary>
If Script.AssembliesLocation is set to Custom, you can specify your own path to the Assemblies for your Script.
The path is relative to the root directory of GTA IV.
Example: IVSDKDotNet\scripts\AssembliesForMyEpicScript - The Assemblies for your Script will now be loaded from the AssembliesForMyEpicScript folder.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Enums.eAssembliesLocation.DecideManuallyForEachAssembly">
            <summary>
If Script.AssembliesLocation is set to DecideManuallyForEachAssembly, you say that you want to manually give return absolut path for each Assembly that you use in your Script.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Enums.eAssembliesLocation.ScriptsDirectory">
            <summary>
If Script.AssembliesLocation is set to ScriptDirectory, you say that the Assemblies for your Script are located within the scripts folder.
</summary>
        </member>
        <member name="F:IVSDKDotNet.Enums.eAssembliesLocation.GameRootDirectory">
            <summary>
If Script.AssembliesLocation is set to GameRootDirectory, you say that the Assemblies for your Script are located within the root directory of GTA IV.
</summary>
        </member>
        <member name="M:IVSDKDotNet.CStreaming.AddImageList(System.String)">
            <summary>
images.txt
</summary>
            <param name="fileName">The path to the new images.txt file to add</param>
        </member>
        <member name="M:IVSDKDotNet.CStreaming.ScriptRequestModel(System.Int32,System.UIntPtr)">
            <summary>
This is easier to use until RequestModel is fully documented.
</summary>
            <param name="nHash">The model hash of the model you want to request.</param>
            <param name="pRunningThread">?</param>
        </member>
        <member name="M:IVSDKDotNet.CStreaming.ScriptRequestModel(System.Int32)">
            <summary>
This is easier to use until RequestModel is fully documented.
</summary>
            <param name="nHash">The model hash of the model you want to request.</param>
        </member>
        <!-- Discarding badly formed XML document comment for member 'E:IVSDKDotNet.Script.ProcessAutomobile'. -->
    </members>
</doc>