#pragma once

namespace IVSDKDotNet
{
	namespace Enums
	{

		public enum class eGameVersion
		{
			VERSION_NONE,
			VERSION_1070,
			VERSION_1080,
			VERSION_1040,
		};

		public enum class eAssembliesLocation
		{
			/// <summary>
			/// If Script.AssembliesLocation is set to GameRootDirectory, you say that the Assemblies for your Script are located within the root directory of GTA IV.
			/// </summary>
			GameRootDirectory,

			/// <summary>
			/// If Script.AssembliesLocation is set to ScriptDirectory, you say that the Assemblies for your Script are located within the scripts folder.
			/// </summary>
			ScriptsDirectory,

			/// <summary>
			/// If Script.AssembliesLocation is set to DecideManuallyForEachAssembly, you say that you want to manually give return absolut path for each Assembly that you use in your Script.
			/// </summary>
			DecideManuallyForEachAssembly,

			/// <summary>
			/// If Script.AssembliesLocation is set to Custom, you can specify your own path to the Assemblies for your Script.
			/// The path is relative to the root directory of GTA IV.
			/// Example: IVSDKDotNet\scripts\AssembliesForMyEpicScript - The Assemblies for your Script will now be loaded from the AssembliesForMyEpicScript folder.
			/// </summary>
			Custom
		};

		public enum class eKey
		{
			KEY_ESC = 1,
			KEY_1 = 2,
			KEY_2 = 3,
			KEY_3 = 4,
			KEY_4 = 5,
			KEY_5 = 6,
			KEY_6 = 7,
			KEY_7 = 8,
			KEY_8 = 9,
			KEY_9 = 10,
			KEY_0 = 11,
			KEY_MINUS = 12,
			KEY_EQUAL = 13,
			KEY_BACKSPACE = 14,
			KEY_TAB = 15,
			KEY_Q = 16,
			KEY_W = 17,
			KEY_E = 18,
			KEY_R = 19,
			KEY_T = 20,
			KEY_Y = 21,
			KEY_U = 22,
			KEY_I = 23,
			KEY_O = 24,
			KEY_P = 25,
			KEY_SQUARE_BRACKET_LEFT = 26,
			KEY_SQUARE_BRACKET_RIGHT = 27,
			KEY_ENTER = 28,
			KEY_LEFT_CTRL = 29,
			KEY_A = 30,
			KEY_S = 31,
			KEY_D = 32,
			KEY_F = 33,
			KEY_G = 34,
			KEY_H = 35,
			KEY_J = 36,
			KEY_K = 37,
			KEY_L = 38,
			KEY_SEMI_COLON = 39,
			KEY_APOSTROPHE = 40,
			KEY_GRAVE = 41,
			KEY_LEFT_SHIFT = 42,
			KEY_BACKSLASH = 43,
			KEY_Z = 44,
			KEY_X = 45,
			KEY_C = 46,
			KEY_V = 47,
			KEY_B = 48,
			KEY_N = 49,
			KEY_M = 50,
			KEY_COMMA = 51,
			KEY_PERIOD = 52,
			KEY_FORWARDSLASH = 53,
			KEY_RIGHT_SHIFT = 54,
			KEY_ASTERISK = 55,
			KEY_LEFT_ALT = 56,
			KEY_SPACE = 57,
			KEY_CAPS_LOCK = 58,
			KEY_F1 = 59,
			KEY_F2 = 60,
			KEY_F3 = 61,
			KEY_F4 = 62,
			KEY_F5 = 63,
			KEY_F6 = 64,
			KEY_F7 = 65,
			KEY_F8 = 66,
			KEY_F9 = 67,
			KEY_F10 = 68,
			KEY_NUMLOCK = 69,
			KEY_SCROLL_LOCK = 70,
			KEY_NUMPAD_7 = 71,
			KEY_NUMPAD_8 = 72,
			KEY_NUMPAD_9 = 73,
			KEY_NUMPAD_MINUS = 74,
			KEY_NUMPAD_4 = 75,
			KEY_NUMPAD_5 = 76,
			KEY_NUMPAD_6 = 77,
			KEY_NUMPAD_PLUS = 78,
			KEY_NUMPAD_1 = 79,
			KEY_NUMPAD_2 = 80,
			KEY_NUMPAD_3 = 81,
			KEY_NUMPAD_0 = 82,
			KEY_NUMPAD_PERIOD = 83,
	
			KEY_F11 = 87,
			KEY_F12 = 88,
			KEY_F13 = 100,//			(NEC PC98)
			KEY_F14 = 101,//			(NEC PC98)
			KEY_F15 = 102,//			(NEC PC98)
	
			KEY_PAUSE = 119,//			Might Be Wrong Pause and Break acts as different keys
	
			KEY_KANA = 112,//			(Japanese keyboard)
			KEY_CONVERT = 121,//		(Japanese keyboard)
			KEY_NOCONVERT = 123,//		(Japanese keyboard)
			KEY_YEN = 125,//			(Japanese keyboard)
			KEY_NUMPAD_EQUAL = 141,//	(NEC PC98) = on numeric keypad
			KEY_CIRCUMFLEX = 144,//		(Japanese keyboard)
			KEY_AT = 145,//				(NEC PC98)
			KEY_COLON = 146,//			(NEC PC98)
			KEY_UNDERLINE = 147,//		(NEC PC98)
			KEY_KANJI = 148,//			(Japanese keyboard)
			KEY_STOP = 149,//			(NEC PC98)
			KEY_AX = 150,//				(Japan AX)
			KEY_UNLABELED = 151,//		(J3100)
			KEY_NUMPAD_ENTER = 156,
			KEY_RIGHT_CTRL = 157,
			KEY_NUMPAD_COMMA = 179,//	(NEC PC98) , on numeric keypad
			KEY_NUMPAD_FORWARDSLASH = 181,
			KEY_SYSRQ = 183,
			KEY_RIGHT_ALT = 184,
			KEY_HOME = 199,
			KEY_ARROW_UP = 200,
			KEY_PAGEUP = 201,
			KEY_ARROW_LEFT = 203,
			KEY_ARROW_RIGHT = 205,
			KEY_END = 207,
			KEY_ARROW_DOWN = 208,
			KEY_PAGEDOWN = 209,
			KEY_INSERT = 210,
			KEY_DELETE = 211,
			KEY_LEFT_WINDOWS = 219,//	Left Windows key
			KEY_RIGHT_WINDOWS = 220,//	Right Windows key
			KEY_APPMENU = 221,//		AppMenu key
	
			//Other Key Definitions
			KEY_NUMPAD_HOME = 71,
			KEY_NUMPAD_UP = 72,
			KEY_NUMPAD_PAGEUP = 73,
			KEY_NUMPAD_LEFT = 75,
			KEY_NUMPAD_RIGHT = 77,
			KEY_NUMPAD_END = 79,
			KEY_NUMPAD_DOWN = 80,
			KEY_NUMPAD_PAGEDOWN = 81,
			KEY_NUMPAD_INSERT = 82,
			KEY_NUMPAD_DELETE = 83,
			KEY_PRTSC = 183,
		};

		public enum class eButton
		{
			BUTTON_LB = 4,
			BUTTON_LT = 5,
			BUTTON_RB = 6,
			BUTTON_RT = 7,
			BUTTON_DPAD_UP = 8,
			BUTTON_DPAD_DOWN = 9,
			BUTTON_DPAD_LEFT = 10,
			BUTTON_DPAD_RIGHT = 11,
			BUTTON_START = 12,
			BUTTON_BACK = 13,
	
#if PLATFORM == PLATFORM_X360 || PLATFORM == PLATFORM_PC
			BUTTON_X = 14,
#elif PLATFORM == PLATFORM_PS3
			BUTTON_X = 16,
#endif
	
			BUTTON_Y = 15,
			BUTTON_A = 16,
			BUTTON_B = 17,
			STICK_LEFT = 18,
			STICK_RIGHT = 19,
	
			BUTTON_L1 = 4,
			BUTTON_L2 = 5,
			BUTTON_R1 = 6,
			BUTTON_R2 = 7,
			BUTTON_SELECT = 13,
			BUTTON_SQUARE = 14,
			BUTTON_TRIANGLE = 15,
			BUTTON_O = 17,
	
	};

		public enum class eWeaponType
		{
			WEAPON_UNARMED,
			WEAPON_BASEBALLBAT,
			WEAPON_POOLCUE,
			WEAPON_KNIFE,
			WEAPON_GRENADE,
			WEAPON_MOLOTOV,
			WEAPON_ROCKET,
			WEAPON_PISTOL,
			WEAPON_UNUSED0,
			WEAPON_DEAGLE,
			WEAPON_SHOTGUN,
			WEAPON_BARETTA,
			WEAPON_MICRO_UZI,
			WEAPON_MP5,
			WEAPON_AK47,
			WEAPON_M4,
			WEAPON_SNIPERRIFLE,
			WEAPON_M40A1,
			WEAPON_RLAUNCHER,
			WEAPON_FTHROWER,
			WEAPON_MINIGUN,
			WEAPON_EPISODIC_1,//Grenade Launcher TLAD/TBOGT
			WEAPON_EPISODIC_2,//Sweeper Shotgun TLAD
			WEAPON_EPISODIC_3,
			WEAPON_EPISODIC_4,//POOL CUE TLAD
			WEAPON_EPISODIC_5,//Grenade From the Grenade Launcher TLAD/TBOGT
			WEAPON_EPISODIC_6,//Sawnoff Shotgun TLAD
			WEAPON_EPISODIC_7,//Automatic 9mm TLAD
			WEAPON_EPISODIC_8,//Pipe Bomb TLAD
			WEAPON_EPISODIC_9,//.44 Pistol TBOGT
			WEAPON_EPISODIC_10,//Explosive AA12 TBOGT
			WEAPON_EPISODIC_11,//AA12 TBOGT
			WEAPON_EPISODIC_12,//P-90 TBOGT
			WEAPON_EPISODIC_13,//Golden Uzi TBOGT
			WEAPON_EPISODIC_14,//M249 TBOGT
			WEAPON_EPISODIC_15,//Explosive Sniper TBOGT
			WEAPON_EPISODIC_16,//Sticky Bombs TBOGT
			WEAPON_EPISODIC_17,//BUZZARD (heli) rocket launcher/null TBOGT
			WEAPON_EPISODIC_18,//BUZZARD (heli) rocket for BUZZARD rocket launcher/freeze TBOGT
			WEAPON_EPISODIC_19,//BUZZARD (heli) minigun TBOGT
			WEAPON_EPISODIC_20,//APC cannon TBOGT
			WEAPON_EPISODIC_21,//Parachute TBOGT
			WEAPON_EPISODIC_22,
			WEAPON_EPISODIC_23,
			WEAPON_EPISODIC_24,
			WEAPON_CAMERA,
			WEAPON_OBJECT,
			WEAPON_WEAPONTYPE_LAST_WEAPONTYPE,
			WEAPON_ARMOUR,
			WEAPON_RAMMEDBYCAR,
			WEAPON_RUNOVERBYCAR,
			WEAPON_EXPLOSION,
			WEAPON_UZI_DRIVEBY,
			WEAPON_DROWNING,
			WEAPON_FALL,
			WEAPON_UNIDENTIFIED,
			WEAPON_ANYMELEE,
			WEAPON_ANYWEAPON,
		};

		public enum class eWeather
		{
			WEATHER_EXTRA_SUNNY,
			WEATHER_SUNNY,
			WEATHER_SUNNY_WINDY,
			WEATHER_CLOUDY,
			WEATHER_RAINING,
			WEATHER_DRIZZLE,
			WEATHER_FOGGY,
			WEATHER_LIGHTNING,
			WEATHER_EXTRA_SUNNY_2,
			WEATHER_SUNNY_WINDY_2
		};

		public enum class ePed : uint32_t
		{
			// Peds GTAIV
			PED_PLAYER = 0x6F0783F5,
			PED_M_Y_MULTIPLAYER = 0x879495E2,
			PED_F_Y_MULTIPLAYER = 0xD9BDC03A,
			PED_SUPERLOD = 0xAE4B15D6,
			PED_IG_KILLYOURSELF = 0x76855EEF,
			PED_IG_ANNA = 0x6E7BF45F,
			PED_IG_ANTHONY = 0x9DD666EE,
			PED_IG_BADMAN = 0x5927A320,
			PED_IG_BERNIE_CRANE = 0x596FB508,
			PED_IG_BLEDAR = 0x6734C2C8,
			PED_IG_BRIAN = 0x192BDD4A,
			PED_IG_BRUCIE = 0x98E29920,
			PED_IG_BULGARIN = 0x0E28247F,
			PED_IG_CHARISE = 0x0548F609,
			PED_IG_CHARLIEUC = 0xB0D18783,
			PED_IG_CLARENCE = 0x500EC110,
			PED_IG_DARDAN = 0x5786C78F,
			PED_IG_DARKO = 0x1709B920,
			PED_IG_DERRICK_MC = 0x45B445F9,
			PED_IG_DMITRI = 0x0E27ECC1,
			PED_IG_DWAYNE = 0xDB354C19,
			PED_IG_EDDIELOW = 0xA09901F1,
			PED_IG_FAUSTIN = 0x03691799,
			PED_IG_FRANCIS_MC = 0x65F4D88D,
			PED_IG_FRENCH_TOM = 0x54EABEE4,
			PED_IG_GORDON = 0x7EED7363,
			PED_IG_GRACIE = 0xEAAEA78E,
			PED_IG_HOSSAN = 0x3A7556B2,
			PED_IG_ILYENA = 0xCE3779DA,
			PED_IG_ISAAC = 0xE369F2A6,
			PED_IG_IVAN = 0x458B61F3,
			PED_IG_JAY = 0x15BCAD23,
			PED_IG_JASON = 0x0A2D8896,
			PED_IG_JEFF = 0x17446345,
			PED_IG_JIMMY = 0xEA28DB14,
			PED_IG_JOHNNYBIKER = 0xC9AB7F1C,
			PED_IG_KATEMC = 0xD1E17FCA,
			PED_IG_KENNY = 0x3B574ABA,
			PED_IG_LILJACOB = 0x58A1E271,
			PED_IG_LILJACOBW = 0xB4008E4D,
			PED_IG_LUCA = 0xD75A60C8,
			PED_IG_LUIS = 0xE2A57E5E,
			PED_IG_MALLORIE = 0xC1FE7952,
			PED_IG_MAMC = 0xECC3FBA7,
			PED_IG_MANNY = 0x5629F011,
			PED_IG_MARNIE = 0x188232D0,
			PED_IG_MEL = 0xCFE0FB92,
			PED_IG_MICHAEL = 0x2BD27039,
			PED_IG_MICHELLE = 0xBF9672F4,
			PED_IG_MICKEY = 0xDA0D3182,
			PED_IG_PACKIE_MC = 0x64C74D3B,
			PED_IG_PATHOS = 0xF6237664,
			PED_IG_PETROVIC = 0x8BE8B7F2,
			PED_IG_PHIL_BELL = 0x932272CA,
			PED_IG_PLAYBOY_X = 0x6AF081E8,
			PED_IG_RAY_BOCCINO = 0x38E02AB6,
			PED_IG_RICKY = 0xDCFE251C,
			PED_IG_ROMAN = 0x89395FC9,
			PED_IG_ROMANW = 0x2145C7A5,
			PED_IG_SARAH = 0xFEF00775,
			PED_IG_TUNA = 0x528AE104,
			PED_IG_VINNY_SPAZ = 0xC380AE97,
			PED_IG_VLAD = 0x356E1C42,
			PED_CS_ANDREI = 0x3977107D,
			PED_CS_ANGIE = 0xF866DC66,
			PED_CS_BADMAN = 0xFC012F67,
			PED_CS_BLEDAR = 0xA2DDDBA7,
			PED_CS_BULGARIN = 0x009E4F3E,
			PED_CS_BULGARINHENCH = 0x1F32DB93,
			PED_CS_CIA = 0x4B13F8D4,
			PED_CS_DARDAN = 0xF4386436,
			PED_CS_DAVETHEMATE = 0x1A5B22F0,
			PED_CS_DMITRI = 0x030B4624,
			PED_CS_EDTHEMATE = 0xC74969B0,
			PED_CS_FAUSTIN = 0xA776BDC7,
			PED_CS_FRANCIS = 0x4AA2E9EA,
			PED_CS_HOSSAN = 0x2B578C90,
			PED_CS_ILYENA = 0x2EB3F295,
			PED_CS_IVAN = 0x4A85C1C4,
			PED_CS_JAY = 0x96E9F99A,
			PED_CS_JIMMY_PEGORINO = 0x7055C230,
			PED_CS_MEL = 0x298ACEC3,
			PED_CS_MICHELLE = 0x70AEB9C8,
			PED_CS_MICKEY = 0xA1DFB431,
			PED_CS_OFFICIAL = 0x311DB819,
			PED_CS_RAY_BOCCINO = 0xD09ECB11,
			PED_CS_SERGEI = 0xDBAC6805,
			PED_CS_VLAD = 0x7F5B9540,
			PED_CS_WHIPPINGGIRL = 0x5A6C9C5F,
			PED_CS_MANNY = 0xD0F8F893,
			PED_CS_ANTHONY = 0x6B941ABA,
			PED_CS_ASHLEY = 0x26C3D079,
			PED_CS_ASSISTANT = 0x394C11AD,
			PED_CS_CAPTAIN = 0xE6829281,
			PED_CS_CHARLIEUC = 0xEC96EE3A,
			PED_CS_DARKO = 0xC4B4204C,
			PED_CS_DWAYNE = 0xFB9190AC,
			PED_CS_ELI_JESTER = 0x3D47C135,
			PED_CS_ELIZABETA = 0xAED416AF,
			PED_CS_GAYTONY = 0x04F78844,
			PED_CS_GERRYMC = 0x26DE3A8A,
			PED_CS_GORDON = 0x49D3EAD3,
			PED_CS_ISSAC = 0xB93A5686,
			PED_CS_JOHNNYTHEBIKER = 0x2E009A8D,
			PED_CS_JONGRAVELLI = 0xD7D47612,
			PED_CS_JORGE = 0x5906B7A5,
			PED_CS_KAT = 0x71A11E4C,
			PED_CS_KILLER = 0xB4D0F581,
			PED_CS_LUIS = 0x5E730218,
			PED_CS_MAGICIAN = 0x1B508682,
			PED_CS_MAMC = 0xA17C3253,
			PED_CS_MELODY = 0xEA01EFDC,
			PED_CS_MITCHCOP = 0xD8BA6C47,
			PED_CS_MORI = 0x9B333E73,
			PED_CS_PBXGIRL2 = 0xE9C3C332,
			PED_CS_PHILB = 0x5BEB1A2D,
			PED_CS_PLAYBOYX = 0xE9F368C6,
			PED_CS_PRIEST = 0x4D6DE57E,
			PED_CS_RICKY = 0x88F35A20,
			PED_CS_TOMMY = 0x626C3F77,
			PED_CS_TRAMP = 0x553CBE07,
			PED_CS_BRIAN = 0x2AF6831D,
			PED_CS_CHARISE = 0x7AE0A064,
			PED_CS_CLARENCE = 0xE7AC8418,
			PED_CS_EDDIELOW = 0x6463855D,
			PED_CS_GRACIE = 0x999B9B33,
			PED_CS_JEFF = 0x17C32FB4,
			PED_CS_MARNIE = 0x574DE134,
			PED_CS_MARSHAL = 0x8B0322AF,
			PED_CS_PATHOS = 0xD77D71DF,
			PED_CS_SARAH = 0xEFF3F84D,
			PED_CS_ROMAN_D = 0x42F6375E,
			PED_CS_ROMAN_T = 0x6368F847,
			PED_CS_ROMAN_W = 0xE37B786A,
			PED_CS_BRUCIE_B = 0x0E37C613,
			PED_CS_BRUCIE_T = 0x0E1B45E6,
			PED_CS_BRUCIE_W = 0x765C9667,
			PED_CS_BERNIE_CRANEC = 0x7183C75F,
			PED_CS_BERNIE_CRANET = 0x4231E7AC,
			PED_CS_BERNIE_CRANEW = 0x1B4899DE,
			PED_CS_LILJACOB_B = 0xB0B4BC37,
			PED_CS_LILJACOB_J = 0x7EF858B3,
			PED_CS_MALLORIE_D = 0x5DF63F45,
			PED_CS_MALLORIE_J = 0xCC381BCB,
			PED_CS_MALLORIE_W = 0x45768E2E,
			PED_CS_DERRICKMC_B = 0x8469C377,
			PED_CS_DERRICKMC_D = 0x2FBC9A1E,
			PED_CS_MICHAEL_B = 0x7D0BADD3,
			PED_CS_MICHAEL_D = 0xCF5FD27A,
			PED_CS_PACKIEMC_B = 0x4DFB1B0C,
			PED_CS_PACKIEMC_D = 0x68EED0F3,
			PED_CS_KATEMC_D = 0xAF3F2AC0,
			PED_CS_KATEMC_W = 0x4ABDE1C7,
			PED_M_Y_GAFR_LO_01 = 0xEE0BB2A4,
			PED_M_Y_GAFR_LO_02 = 0xBBD14E30,
			PED_M_Y_GAFR_HI_01 = 0x33D38899,
			PED_M_Y_GAFR_HI_02 = 0x25B4EC5C,
			PED_M_Y_GALB_LO_01 = 0xE1F6A366,
			PED_M_Y_GALB_LO_02 = 0xF1F54363,
			PED_M_Y_GALB_LO_03 = 0x0C61783B,
			PED_M_Y_GALB_LO_04 = 0x1EA71CCE,
			PED_M_M_GBIK_LO_03 = 0x029035B4,
			PED_M_Y_GBIK_HI_01 = 0x5044865F,
			PED_M_Y_GBIK_HI_02 = 0x9C071DE3,
			PED_M_Y_GBIK02_LO_02 = 0xA8E69DBF,
			PED_M_Y_GBIK_LO_01 = 0x5DDE4F9B,
			PED_M_Y_GBIK_LO_02 = 0x8B932B00,
			PED_M_Y_GIRI_LO_01 = 0x10B7B44B,
			PED_M_Y_GIRI_LO_02 = 0xFEDA1090,
			PED_M_Y_GIRI_LO_03 = 0x6DF3EEC6,
			PED_M_M_GJAM_HI_01 = 0x5FF2E9AF,
			PED_M_M_GJAM_HI_02 = 0xEC4D0269,
			PED_M_M_GJAM_HI_03 = 0x4295AEF5,
			PED_M_Y_GJAM_LO_01 = 0xA691BED3,
			PED_M_Y_GJAM_LO_02 = 0xCB77889E,
			PED_M_Y_GKOR_LO_01 = 0x5BD063B5,
			PED_M_Y_GKOR_LO_02 = 0x2D8D8730,
			PED_M_Y_GLAT_LO_01 = 0x1D55921C,
			PED_M_Y_GLAT_LO_02 = 0x8D32F1D9,
			PED_M_Y_GLAT_HI_01 = 0x45A43081,
			PED_M_Y_GLAT_HI_02 = 0x97E25504,
			PED_M_Y_GMAF_HI_01 = 0xEDFA50E3,
			PED_M_Y_GMAF_HI_02 = 0x9FA03430,
			PED_M_Y_GMAF_LO_01 = 0x03DBB737,
			PED_M_Y_GMAF_LO_02 = 0x1E6BEC57,
			PED_M_O_GRUS_HI_01 = 0x9290C4A3,
			PED_M_Y_GRUS_LO_01 = 0x83892528,
			PED_M_Y_GRUS_LO_02 = 0x75CF09B4,
			PED_M_Y_GRUS_HI_02 = 0x5BFE7C54,
			PED_M_M_GRU2_HI_01 = 0x6F31C4B4,
			PED_M_M_GRU2_HI_02 = 0x19BB19C8,
			PED_M_M_GRU2_LO_02 = 0x66CB1E64,
			PED_M_Y_GRU2_LO_01 = 0xB9A05501,
			PED_M_M_GTRI_HI_01 = 0x33EEB47F,
			PED_M_M_GTRI_HI_02 = 0x28C09E23,
			PED_M_Y_GTRI_LO_01 = 0xBF635A9F,
			PED_M_Y_GTRI_LO_02 = 0xF62B4836,
			PED_F_O_MAID_01 = 0xD33B8FE9,
			PED_F_O_BINCO = 0xF97D04E6,
			PED_F_Y_BANK_01 = 0x516F7106,
			PED_F_Y_DOCTOR_01 = 0x14A4B50F,
			PED_F_Y_GYMGAL_01 = 0x507AAC5B,
			PED_F_Y_FF_BURGER_R = 0x37214098,
			PED_F_Y_FF_CLUCK_R = 0xEB5AB08B,
			PED_F_Y_FF_RSCAFE = 0x8292BFB5,
			PED_F_Y_FF_TWCAFE = 0x0CB09BED,
			PED_F_Y_FF_WSPIZZA_R = 0xEEB5DE91,
			PED_F_Y_HOOKER_01 = 0x20EF1FEB,
			PED_F_Y_HOOKER_03 = 0x3B61D4D0,
			PED_F_Y_NURSE = 0xB8D8632B,
			PED_F_Y_STRIPPERC01 = 0x42615D12,
			PED_F_Y_STRIPPERC02 = 0x50AFF9AF,
			PED_F_Y_WAITRESS_01 = 0x0171C5D1,
			PED_M_M_ALCOHOLIC = 0x97093869,
			PED_M_M_ARMOURED = 0x401C1901,
			PED_M_M_BUSDRIVER = 0x07FDDC3F,
			PED_M_M_CHINATOWN_01 = 0x2D243DEF,
			PED_M_M_CRACKHEAD = 0x9313C198,
			PED_M_M_DOC_SCRUBS_01 = 0x0D13AEF5,
			PED_M_M_DOCTOR_01 = 0xB940B896,
			PED_M_M_DODGYDOC = 0x16653776,
			PED_M_M_EECOOK = 0x7D77FE8D,
			PED_M_M_ENFORCER = 0xF410AB9B,
			PED_M_M_FACTORY_01 = 0x2FB107C1,
			PED_M_M_FATCOP_01 = 0xE9EC3678,
			PED_M_M_FBI = 0xC46CBC16,
			PED_M_M_FEDCO = 0x89275CA8,
			PED_M_M_FIRECHIEF = 0x24696C93,
			PED_M_M_GUNNUT_01 = 0x1CFC648F,
			PED_M_M_HELIPILOT_01 = 0xD19BD6D0,
			PED_M_M_HPORTER_01 = 0x2536480C,
			PED_M_M_KOREACOOK_01 = 0x959D9B8A,
			PED_M_M_LAWYER_01 = 0x918DD1CF,
			PED_M_M_LAWYER_02 = 0xBC5DA76E,
			PED_M_M_LOONYBLACK = 0x1699B3B8,
			PED_M_M_PILOT = 0x8C0F140E,
			PED_M_M_PINDUS_01 = 0x301D7295,
			PED_M_M_POSTAL_01 = 0xEF0CF791,
			PED_M_M_SAXPLAYER_01 = 0xB92CCD03,
			PED_M_M_SECURITYMAN = 0x907AF88D,
			PED_M_M_SELLER_01 = 0x1916A97C,
			PED_M_M_SHORTORDER = 0x6FF14E0F,
			PED_M_M_STREETFOOD_01 = 0x0881E67C,
			PED_M_M_SWEEPER = 0xD6D5085C,
			PED_M_M_TAXIDRIVER = 0x0085DCEE,
			PED_M_M_TELEPHONE = 0x46B50EAA,
			PED_M_M_TENNIS = 0xE96555E2,
			PED_M_M_TRAIN_01 = 0x452086C4,
			PED_M_M_TRAMPBLACK = 0xF7835A1A,
			PED_M_M_TRUCKER_01 = 0xFD3979FD,
			PED_M_O_JANITOR = 0xB376FD38,
			PED_M_O_HOTEL_FOOT = 0x015E1A07,
			PED_M_O_MPMOBBOSS = 0x463E4B5D,
			PED_M_Y_AIRWORKER = 0xA8B24166,
			PED_M_Y_BARMAN_01 = 0x80807842,
			PED_M_Y_BOUNCER_01 = 0x95DCB0F5,
			PED_M_Y_BOUNCER_02 = 0xE79AD470,
			PED_M_Y_BOWL_01 = 0xD05CB843,
			PED_M_Y_BOWL_02 = 0xE61EE3C7,
			PED_M_Y_CHINVEND_01 = 0x2DCD7F4C,
			PED_M_Y_CLUBFIT = 0x2851C93C,
			PED_M_Y_CONSTRUCT_01 = 0xD4F6DA2A,
			PED_M_Y_CONSTRUCT_02 = 0xC371B720,
			PED_M_Y_CONSTRUCT_03 = 0xD56DDB14,
			PED_M_Y_COP = 0xF5148AB2,
			PED_M_Y_COP_TRAFFIC = 0xA576D885,
			PED_M_Y_COURIER = 0xAE46285D,
			PED_M_Y_COWBOY_01 = 0xDDCCAF85,
			PED_M_Y_DEALER = 0xB380C536,
			PED_M_Y_DRUG_01 = 0x565A4099,
			PED_M_Y_FF_BURGER_R = 0x000F192D,
			PED_M_Y_FF_CLUCK_R = 0xC3B54549,
			PED_M_Y_FF_RSCAFE = 0x75FDB605,
			PED_M_Y_FF_TWCAFE = 0xD11FBA8B,
			PED_M_Y_FF_WSPIZZA_R = 0x0C55ACF1,
			PED_M_Y_FIREMAN = 0xDBA0B619,
			PED_M_Y_GARBAGE = 0x43BD9C04,
			PED_M_Y_GOON_01 = 0x358464B5,
			PED_M_Y_GYMGUY_01 = 0x8E96352C,
			PED_M_Y_MECHANIC_02 = 0xEABA11B9,
			PED_M_Y_MODO = 0xC10A9D57,
			PED_M_Y_NHELIPILOT = 0x479F2007,
			PED_M_Y_PERSEUS = 0xF6FFEBB2,
			PED_M_Y_PINDUS_01 = 0x1DDEBBCF,
			PED_M_Y_PINDUS_02 = 0x0B1F9651,
			PED_M_Y_PINDUS_03 = 0xF958F2C4,
			PED_M_Y_PMEDIC = 0xB9F5BEA0,
			PED_M_Y_PRISON = 0x9C0BF5CC,
			PED_M_Y_PRISONAOM = 0x0CD38A07,
			PED_M_Y_ROMANCAB = 0x5C907185,
			PED_M_Y_RUNNER = 0xA7ABA2BA,
			PED_M_Y_SHOPASST_01 = 0x15556BF3,
			PED_M_Y_STROOPER = 0xFAAD5B99,
			PED_M_Y_SWAT = 0xC41C88BE,
			PED_M_Y_SWORDSWALLOW = 0xFC2BE1B8,
			PED_M_Y_THIEF = 0xB2F9C1A1,
			PED_M_Y_VALET = 0x102B77F0,
			PED_M_Y_VENDOR = 0xF4E8205B,
			PED_M_Y_FRENCHTOM = 0x87DB1287,
			PED_M_Y_JIM_FITZ = 0x75E29A7D,
			PED_F_O_PEASTEURO_01 = 0xF3D9C032,
			PED_F_O_PEASTEURO_02 = 0x0B50EF20,
			PED_F_O_PHARBRON_01 = 0xEB320486,
			PED_F_O_PJERSEY_01 = 0xF92630A4,
			PED_F_O_PORIENT_01 = 0x9AD4BE64,
			PED_F_O_RICH_01 = 0x0600A909,
			PED_F_M_BUSINESS_01 = 0x093E163C,
			PED_F_M_BUSINESS_02 = 0x1780B2C1,
			PED_F_M_CHINATOWN = 0x51FFF4A5,
			PED_F_M_PBUSINESS = 0xEF0F006B,
			PED_F_M_PEASTEURO_01 = 0x2864B0DC,
			PED_F_M_PHARBRON_01 = 0xB92CE9DD,
			PED_F_M_PJERSEY_01 = 0x844EA438,
			PED_F_M_PJERSEY_02 = 0xAF1EF9D8,
			PED_F_M_PLATIN_01 = 0x3067DA63,
			PED_F_M_PLATIN_02 = 0xF84BEA2C,
			PED_F_M_PMANHAT_01 = 0x32CEF1D1,
			PED_F_M_PMANHAT_02 = 0x04901554,
			PED_F_M_PORIENT_01 = 0x81BA39A8,
			PED_F_M_PRICH_01 = 0x605DF31F,
			PED_F_Y_BUSINESS_01 = 0x1B0DCC86,
			PED_F_Y_CDRESS_01 = 0x3120FC7F,
			PED_F_Y_PBRONX_01 = 0xAECAC8C7,
			PED_F_Y_PCOOL_01 = 0x9568444C,
			PED_F_Y_PCOOL_02 = 0xA52AE3D1,
			PED_F_Y_PEASTEURO_01 = 0xC760585B,
			PED_F_Y_PHARBRON_01 = 0x8D2AC355,
			PED_F_Y_PHARLEM_01 = 0x0A047A8F,
			PED_F_Y_PJERSEY_02 = 0x0006BC78,
			PED_F_Y_PLATIN_01 = 0x0339B6D8,
			PED_F_Y_PLATIN_02 = 0xEE8D8D80,
			PED_F_Y_PLATIN_03 = 0x67F08048,
			PED_F_Y_PMANHAT_01 = 0x6392D986,
			PED_F_Y_PMANHAT_02 = 0x50B8B3D2,
			PED_F_Y_PMANHAT_03 = 0x3EFE105D,
			PED_F_Y_PORIENT_01 = 0xB8DA98D7,
			PED_F_Y_PQUEENS_01 = 0x2A8A0FF0,
			PED_F_Y_PRICH_01 = 0x95E177F9,
			PED_F_Y_PVILLBO_02 = 0xC73ECED1,
			PED_F_Y_SHOP_03 = 0x5E8CD2B8,
			PED_F_Y_SHOP_04 = 0x6E2671EB,
			PED_F_Y_SHOPPER_05 = 0x9A8CFCFD,
			PED_F_Y_SOCIALITE = 0x4680C12E,
			PED_F_Y_STREET_02 = 0xCA5194CB,
			PED_F_Y_STREET_05 = 0x110C2243,
			PED_F_Y_STREET_09 = 0x57D62FD6,
			PED_F_Y_STREET_12 = 0x91AFE421,
			PED_F_Y_STREET_30 = 0x4CEF5CF5,
			PED_F_Y_STREET_34 = 0x6F96222E,
			PED_F_Y_TOURIST_01 = 0x6892A334,
			PED_F_Y_VILLBO_01 = 0x2D6795BA,
			PED_M_M_BUSINESS_02 = 0xDA0E92D1,
			PED_M_M_BUSINESS_03 = 0x976C0D95,
			PED_M_M_EE_HEAVY_01 = 0xA59C6FD2,
			PED_M_M_EE_HEAVY_02 = 0x9371CB7D,
			PED_M_M_FATMOB_01 = 0x74636532,
			PED_M_M_GAYMID = 0x894A8CB2,
			PED_M_M_GENBUM_01 = 0xBF963CE7,
			PED_M_M_LOONYWHITE = 0x1D88B92A,
			PED_M_M_MIDTOWN_01 = 0x89BC811F,
			PED_M_M_PBUSINESS_01 = 0x3F688D84,
			PED_M_M_PEASTEURO_01 = 0x0C717BCE,
			PED_M_M_PHARBRON_01 = 0xC3306A8C,
			PED_M_M_PINDUS_02 = 0x6A3B66CC,
			PED_M_M_PITALIAN_01 = 0xAC686EC9,
			PED_M_M_PITALIAN_02 = 0x9EF053D9,
			PED_M_M_PLATIN_01 = 0x450E5DBF,
			PED_M_M_PLATIN_02 = 0x75633E74,
			PED_M_M_PLATIN_03 = 0x60AD1508,
			PED_M_M_PMANHAT_01 = 0xD8CF835D,
			PED_M_M_PMANHAT_02 = 0xB217B5E2,
			PED_M_M_PORIENT_01 = 0x2BC50FD3,
			PED_M_M_PRICH_01 = 0x6F2AE4DB,
			PED_M_O_EASTEURO_01 = 0xE6372469,
			PED_M_O_HASID_01 = 0x9E495AD7,
			PED_M_O_MOBSTER = 0x62B5E24B,
			PED_M_O_PEASTEURO_02 = 0x793F36B1,
			PED_M_O_PHARBRON_01 = 0x4E76BDF6,
			PED_M_O_PJERSEY_01 = 0x3A78BA45,
			PED_M_O_STREET_01 = 0xB29788AB,
			PED_M_O_SUITED = 0x0E86251C,
			PED_M_Y_BOHO_01 = 0x7C54115F,
			PED_M_Y_BOHOGUY_01 = 0x0D2FF2BF,
			PED_M_Y_BRONX_01 = 0x031EE9E3,
			PED_M_Y_BUSINESS_01 = 0x5B404032,
			PED_M_Y_BUSINESS_02 = 0x2924DBD8,
			PED_M_Y_CHINATOWN_03 = 0xBB784DE6,
			PED_M_Y_CHOPSHOP_01 = 0xED4319C3,
			PED_M_Y_CHOPSHOP_02 = 0xDF0C7D56,
			PED_M_Y_DODGY_01 = 0xBE9A3CD6,
			PED_M_Y_DORK_02 = 0x962996E4,
			PED_M_Y_DOWNTOWN_01 = 0x47F77FC9,
			PED_M_Y_DOWNTOWN_02 = 0x5971A2B9,
			PED_M_Y_DOWNTOWN_03 = 0x236BB6B2,
			PED_M_Y_GAYYOUNG = 0xD36D1B5D,
			PED_M_Y_GENSTREET_11 = 0xD7A357ED,
			PED_M_Y_GENSTREET_16 = 0x9BF260A8,
			PED_M_Y_GENSTREET_20 = 0x3AF39D6C,
			PED_M_Y_GENSTREET_34 = 0x4658B34E,
			PED_M_Y_HARDMAN_01 = 0xAB537AD4,
			PED_M_Y_HARLEM_01 = 0xB71B0F29,
			PED_M_Y_HARLEM_02 = 0x97EBD0CB,
			PED_M_Y_HARLEM_04 = 0x7D701BD4,
			PED_M_Y_HASID_01 = 0x90442A67,
			PED_M_Y_LEASTSIDE_01 = 0xC1181556,
			PED_M_Y_PBRONX_01 = 0x22522444,
			PED_M_Y_PCOOL_01 = 0xFBB5AA01,
			PED_M_Y_PCOOL_02 = 0xF45E1B4E,
			PED_M_Y_PEASTEURO_01 = 0x298F268A,
			PED_M_Y_PHARBRON_01 = 0x27F5967B,
			PED_M_Y_PHARLEM_01 = 0x01961E02,
			PED_M_Y_PJERSEY_01 = 0x5BF734C6,
			PED_M_Y_PLATIN_01 = 0x944D1A30,
			PED_M_Y_PLATIN_02 = 0xC30777A4,
			PED_M_Y_PLATIN_03 = 0xB0F0D377,
			PED_M_Y_PMANHAT_01 = 0x243BD606,
			PED_M_Y_PMANHAT_02 = 0x7554785A,
			PED_M_Y_PORIENT_01 = 0xEB7CE59F,
			PED_M_Y_PQUEENS_01 = 0x21673B90,
			PED_M_Y_PRICH_01 = 0x509627D1,
			PED_M_Y_PVILLBO_01 = 0x0D55CAAC,
			PED_M_Y_PVILLBO_02 = 0xB5559AAD,
			PED_M_Y_PVILLBO_03 = 0xA2E575D9,
			PED_M_Y_QUEENSBRIDGE = 0x48E8EE31,
			PED_M_Y_SHADY_02 = 0xB73D062F,
			PED_M_Y_SKATEBIKE_01 = 0x68A019EE,
			PED_M_Y_SOHO_01 = 0x170C6DAE,
			PED_M_Y_STREET_01 = 0x03B99DE1,
			PED_M_Y_STREET_03 = 0x1F3854DE,
			PED_M_Y_STREET_04 = 0x3082F773,
			PED_M_Y_STREETBLK_02 = 0xA37B1794,
			PED_M_Y_STREETBLK_03 = 0xD939030F,
			PED_M_Y_STREETPUNK_02 = 0xD3E34ABA,
			PED_M_Y_STREETPUNK_04 = 0x8D1CBD36,
			PED_M_Y_STREETPUNK_05 = 0x51E946D0,
			PED_M_Y_TOUGH_05 = 0xBC0DDE62,
			PED_M_Y_TOURIST_02 = 0x303963D0,
	
			// Peds TLAD
			PED_IG_ASHLEYA = 0xD49C2B16,
			PED_IG_CLAY = 0x6CCFE08A,
			PED_IG_MALC = 0xF1BCA919,
			PED_IG_BILLY = 0xE5135137,
			PED_IG_JIM_FITZ = 0x33E8C374,
			PED_IG_BRIANJ = 0x14DA2838,
			PED_IG_EVAN = 0xD07B6195,
			PED_IG_TERRY = 0x67000B94,
			PED_IG_DAVE_GROSSMAN = 0xB634B03C,
			PED_IG_LOSTGIRL = 0xCF8E5838,
			PED_IG_BILLYPRISON = 0xCCC15E4E,
			PED_IG_MARTA = 0xA0367380,
			PED_IG_DESEAN = 0xFB9A0BD0,
			PED_IG_MATTHEWS = 0xF60A3CF3,
			PED_IG_MCCORNISH = 0x1609B707,
			PED_IG_PGIRL_01 = 0xA47978B5,
			PED_IG_PGIRL_02 = 0x4BC8C755,
			PED_IG_ROMAN_E1 = 0xD31529F3,
			PED_IG_STROOPER = 0x95D15467,
			PED_M_Y_GANGELS_01 = 0x3A432BB8,
			PED_M_Y_GANGELS_02 = 0xBAE8AD11,
			PED_M_Y_GANGELS_03 = 0x1C997071,
			PED_M_Y_GANGELS_04 = 0x0D7ED23C,
			PED_M_Y_GANGELS_05 = 0x00F3B926,
			PED_M_Y_GANGELS_06 = 0x82613BFF,
			PED_F_Y_GANGELS_01 = 0xF7055110,
			PED_F_Y_GANGELS_02 = 0x292B355B,
			PED_F_Y_GANGELS_03 = 0xE1F526F0,
			PED_M_Y_GLOST_01 = 0x55CEC30B,
			PED_M_Y_GLOST_02 = 0x678B6684,
			PED_M_Y_GLOST_03 = 0xE776E65D,
			PED_M_Y_GLOST_04 = 0x81041975,
			PED_M_Y_GLOST_05 = 0x92C5BCF8,
			PED_M_Y_GLOST_06 = 0x9C70D04E,
			PED_F_Y_GLOST_01 = 0x0B3AE9B8,
			PED_F_Y_GLOST_02 = 0x5453FBF5,
			PED_F_Y_GLOST_03 = 0x25911E70,
			PED_F_Y_GLOST_04 = 0x6677A03C,
			PED_M_Y_GRYDERS_01 = 0x0E1BA167,
			PED_M_Y_GRYDERS_02 = 0x5EC9C2C2,
			PED_F_Y_GRYDERS_01 = 0xB3E305FD,
			PED_M_Y_GTRIAD_HI_01 = 0x4B0BC9FA,
			PED_M_Y_GTRI_02 = 0x9EF03294,
			PED_F_Y_BIKESTRIPPER_01 = 0x86BF8536,
			PED_F_Y_EMIDTOWN_01 = 0x1DE2861D,
			PED_M_M_SPRETZER = 0x81F47D63,
			PED_M_Y_CIADLC_01 = 0xE82B8B50,
			PED_M_Y_CIADLC_02 = 0xFA832FFF,
			PED_M_Y_DOORMAN_01 = 0xFAF80EF6,
			PED_M_Y_PRISONDLC_01 = 0xCEDC662A,
			PED_M_Y_PRISONGUARD = 0x8DC7AE18,
			PED_F_Y_UPTOWN_01 = 0x04E5D55F,
			PED_M_M_SMARTBLACK = 0x9607A6C2,
			PED_M_Y_HIPMALE_01 = 0xD1A697ED,
			PED_M_Y_BUSIASIAN = 0xF2200C7B,
			PED_M_M_UPEAST_01 = 0x01A25B7E,
			PED_F_Y_BUSIASIAN = 0xE4CADE41,
			PED_M_O_HISPANIC_01 = 0xC2700A81,
			PED_M_Y_BUSIMIDEAST = 0x836DCFB6,
			PED_M_Y_HISPANIC_01 = 0x5A99A8C0,
			PED_M_Y_BIKEMECH = 0xFB504807,
			PED_M_M_UPTOWN_01 = 0x38D04A7D,
			PED_M_Y_GAYGANG_01 = 0x636CDA80,
			PED_M_Y_HIP_02 = 0xE58A26AC,
			PED_M_Y_PRISONBLACK = 0xA97ED37B,
			PED_F_Y_UPTOWN_CS = 0x8ED1E138,
			PED_LOSTBUDDY_01 = 0x721B6514,
			PED_LOSTBUDDY_02 = 0x808A01F1,
			PED_LOSTBUDDY_03 = 0x487511C8,
			PED_LOSTBUDDY_04 = 0x65BE4C5A,
			PED_LOSTBUDDY_05 = 0x2AC45667,
			PED_LOSTBUDDY_06 = 0x3985F3EA,
			PED_LOSTBUDDY_07 = 0x295D53B5,
			PED_LOSTBUDDY_08 = 0x1B1AB730,
			PED_LOSTBUDDY_09 = 0x540128FC,
			PED_LOSTBUDDY_10 = 0x2DBE5DAB,
			PED_LOSTBUDDY_11 = 0x64894B40,
			PED_LOSTBUDDY_12 = 0x725066CE,
			PED_LOSTBUDDY_13 = 0x192F348D,
			PED_CS_NIKO = 0xF88260C2,
			PED_CS_ANDREAS = 0xE7565327,
			PED_CS_ANGELGUY = 0x577BC88F,
			PED_CS_ANGUS = 0x8BC6A2D3,
			PED_CS_ASHLEYA = 0x9A1DD05C,
			PED_CS_BILLY = 0x64E196FE,
			PED_CS_BIKESTRIPPER = 0xC3709E91,
			PED_CS_BRIANJ = 0xF54AEE52,
			PED_CS_CLAY = 0xDBCB9834,
			PED_CS_DAVE_GROSSMAN = 0x3D0E2E09,
			PED_CS_DESEAN = 0x19BCAE55,
			PED_CS_ELIZABETAT = 0xE83DE099,
			PED_CS_FRANKIE = 0x549E6E7B,
			PED_CS_JASON = 0xD4C6DAAD,
			PED_CS_JIM_FITZ = 0xAD24C399,
			PED_CS_MAITRE_D = 0x43778033,
			PED_CS_MALC = 0x037DF2C9,
			PED_CS_MITCHB = 0xB72CBF92,
			PED_CS_MARTA = 0xC87AA743,
			PED_CS_MASSEUSE = 0xA771945A,
			PED_CS_MATTHEWS = 0xA6CA5E6D,
			PED_CS_MCCORNISH = 0xA394626B,
			PED_CS_PAUL_LAMONT = 0x65F93B1E,
			PED_CS_PRISONDLC_01 = 0xAA6012BB,
			PED_CS_PRISONGUARD = 0x6C7A638E,
			PED_CS_RAYGOON = 0x90C767F3,
			PED_CS_RAY_LEATHER = 0xF8AD9C83,
			PED_CS_RONCERO = 0x1A546487,
			PED_CS_RUSSIAN_GOON = 0x6AC02DF9,
			PED_CS_RUSSIANGOON2 = 0x732FEF9B,
			PED_CS_TERRY = 0x3A5201C5,
			PED_CS_SKANK = 0x75377B4B,
			PED_CS_STUBBS = 0x7CA428FC,
			PED_CS_STUBBS_SUIT = 0x201D6C6E,
	
			// Peds TBoGT
			PED_CS_BAZ = 0x784C7AE2,
			PED_CS_JEREMY = 0x32CE14A5,
			//PED_CS_NIKO = 0xF88260C2,
			PED_CS_ABDUL = 0x36D9C53F,
			PED_CS_ABODYGUARD = 0x150ADC68,
			PED_CS_ADRIANA = 0x57E44134,
			PED_CS_AHMAD = 0x3BACB937,
			PED_CS_ARMANDO = 0x791C0452,
			PED_CS_ARNAUD = 0x542AC02C,
			PED_CS_BATHROOM = 0x87DB2548,
			PED_CS_BILLY2 = 0x30056FCD,
			PED_CS_BULGARIN2 = 0x6822E705,
			PED_CS_BRUCIE2 = 0x1E0180C6,
			PED_CS_DAISY = 0x24B7B6CE,
			PED_CS_DERRICK2 = 0xA9490E36,
			PED_CS_DESSIE = 0x8DD679BB,
			PED_CS_DOCKGOON = 0x8E74579A,
			PED_CS_EUGENE = 0xA6D50A1F,
			PED_CS_EVAN2 = 0x710748D4,
			PED_CS_GPARTY_01 = 0xE04ECC4A,
			PED_CS_GRACIE2 = 0x7E02613E,
			PED_CS_HENRIQUE = 0xAC51A735,
			PED_CS_ISSAC2 = 0x5C595F55,
			PED_CS_JOHNNY2 = 0x5434CD19,
			PED_CS_MARGOT = 0x2303395D,
			PED_CS_MAURICE = 0x08DB9CAA,
			PED_CS_MORI_K = 0x82AF0010,
			PED_CS_MR_SANTOS = 0x2DDCB581,
			PED_CS_NIKO2 = 0x886CB02B,
			PED_CS_OYVEY = 0xE4B4E738,
			PED_CS_PACKIE2 = 0x2636B0A5,
			PED_CS_PAPI = 0x6CAC345C,
			PED_CS_ROCCO = 0xA61754F0,
			PED_CS_ROMAN2 = 0xDB380BA7,
			PED_CS_RUS_KN = 0x03FEE54B,
			PED_CS_SHARON = 0x399A54CD,
			PED_CS_TAHIR = 0xE44CD169,
			PED_CS_TIMUR = 0x3131F62C,
			PED_CS_TONY = 0x9F271661,
			PED_CS_TONYAQ = 0xA5852E77,
			PED_CS_TRAMP2 = 0x51E9A3F0,
			PED_CS_TRIAD = 0x43DB1571,
			PED_CS_TROY = 0x33FAFED6,
			PED_CS_VIC = 0xFC97EB6E,
			PED_CS_VICGIRL = 0xDA6F3D87,
			PED_CS_VINCE = 0x76D39A51,
			PED_CS_YUSEF = 0x1A097018,
			PED_IG_AHMAD = 0xE2F65127,
			PED_IG_ARMANDO = 0x51AD1CE3,
			PED_IG_ARMSDEALER = 0x47471B9B,
			PED_IG_ARNAUD = 0x2A96AA6B,
			PED_IG_BANKER = 0x1BBAF430,
			PED_IG_BRUCIE2 = 0xE80E9160,
			PED_IG_BULGARIN2 = 0x0E860DFB,
			PED_IG_DAISY = 0x26F2283E,
			PED_IG_DEEJAY = 0xA94AF89C,
			PED_IG_DESSIE = 0xA9C24CEF,
			//PED_IG_EVAN = 0xD07B6195,
			PED_IG_GRACIE2 = 0x780C8ADA,
			PED_IG_HENRIQUE = 0x7193DD41,
			PED_IG_ISSAC2 = 0xA7356B14,
			PED_IG_JOHNNY2 = 0x007D372B,
			PED_IG_LUIS2 = 0x75CCCC60,
			PED_IG_MARGOT = 0x6B34A006,
			PED_IG_MORI_K = 0x63138CCC,
			PED_IG_MR_SANTOS = 0x26582854,
			PED_IG_NIKO = 0x6032264F,
			PED_IG_OYVEY = 0x7C89F307,
			PED_IG_ROCCO = 0xC9869CCA,
			PED_IG_TAHIR = 0xE7BCA666,
			PED_IG_TIMUR = 0x8BCF3DEB,
			PED_IG_TONY = 0xEFA2695D,
			PED_IG_TRAMP2 = 0xC5F4F8A5,
			PED_IG_TRIAD = 0x00249488,
			PED_IG_TROY = 0x6317546B,
			PED_IG_VIC = 0xF6A7A434,
			PED_IG_VICGIRL = 0xE4C07993,
			PED_IG_VINCE = 0x5285B57B,
			PED_IG_YUSEF = 0xE5497381,
			//PED_M_Y_GANGELS_02 = 0xBAE8AD11,
			//PED_M_Y_GANGELS_04 = 0x0D7ED23C,
			//PED_M_Y_GLOST_01 = 0x55CEC30B,
			//PED_M_Y_GLOST_02 = 0x678B6684,
			//PED_M_Y_GTRIAD_HI_01 = 0x4B0BC9FA,
			//PED_M_Y_GTRI_02 = 0x9EF03294,
			PED_F_Y_ASIANCLUB_01 = 0x66C81C17,
			PED_F_Y_ASIANCLUB_02 = 0x7511B8AA,
			PED_F_Y_CLUBEURO_01 = 0x37771AD5,
			PED_F_Y_DOMGIRL_01 = 0x520CBA78,
			PED_F_Y_EMIDTOWN_02 = 0xC08ACB5F,
			PED_F_Y_HOSTESS = 0x7A1ECAD7,
			PED_F_Y_HOTCHICK_01 = 0xEE4335C2,
			PED_F_Y_HOTCHICK_02 = 0x93D400CD,
			PED_F_Y_HOTCHICK_03 = 0x12BEFEB9,
			PED_F_Y_PGIRL_01 = 0xCDAE3E7C,
			PED_F_Y_PGIRL_02 = 0x9B9F5A57,
			PED_F_Y_SMID_01 = 0xA01941EC,
			PED_F_Y_TRENDY_01 = 0x2D874100,
			PED_M_M_E2MAF_01 = 0xD7FC02CB,
			PED_M_M_E2MAF_02 = 0x30F234C2,
			PED_M_Y_AMIRGUARD_01 = 0x273BE7AE,
			PED_M_Y_BATHROOM = 0x5537808C,
			PED_M_Y_BARMAISON = 0x9AE100DF,
			//PED_M_Y_CIADLC_01 = 0xE82B8B50,
			//PED_M_Y_CIADLC_02 = 0xFA832FFF,
			PED_M_Y_CLUBBLACK_01 = 0xD37434B0,
			PED_M_Y_CLUBEURO_01 = 0x10F4BD43,
			PED_M_Y_CLUBEURO_02 = 0xFF5219FE,
			PED_M_Y_CLUBEURO_03 = 0x2562661E,
			PED_M_Y_CLUBWHITE_01 = 0x29A3192E,
			PED_M_Y_DOMDRUG_01 = 0x0EC2D21A,
			PED_M_Y_DOMGUY_01 = 0x2BFEE7EE,
			PED_M_Y_DOMGUY_02 = 0x61BFD373,
			PED_M_Y_DOORMAN_02 = 0x68B66A71,
			PED_M_Y_E2RUSSIAN_01 = 0xB12754CD,
			PED_M_Y_E2RUSSIAN_02 = 0xDEDA3016,
			PED_M_Y_E2RUSSIAN_03 = 0xD5241CAA,
			PED_M_Y_GAYBLACK_01 = 0x218F4947,
			PED_M_Y_GAYDANCER = 0xAA47E132,
			//PED_M_Y_GAYGANG_01 = 0x636CDA80,
			PED_M_Y_GAYGENERAL_01 = 0xE0AAAB26,
			PED_M_Y_GAYWHITE_01 = 0xD6511833,
			PED_M_Y_GUIDO_01 = 0x3A895123,
			PED_M_Y_GUIDO_02 = 0x68D7ADC7,
			PED_M_Y_MIDEAST_01 = 0x2D654515,
			PED_M_Y_UPTOWN_01 = 0xCD8C3F20,
			PED_M_Y_FIGHTCLUB_01 = 0x0B3D17A7,
			PED_M_Y_FIGHTCLUB_02 = 0xA7F4D114,
			PED_M_Y_FIGHTCLUB_03 = 0xBA4775B9,
			PED_M_Y_FIGHTCLUB_04 = 0xCEA49E73,
			PED_M_Y_FIGHTCLUB_05 = 0xDE623DEE,
			PED_M_Y_FIGHTCLUB_06 = 0x531D2766,
			PED_M_Y_FIGHTCLUB_07 = 0x64D34AD2,
			PED_M_Y_FIGHTCLUB_08 = 0x7586EC39,
			PED_F_Y_CLOEPARKER = 0xA7114B68,
			PED_F_Y_DANCER_01 = 0xCFC9B096,
			PED_F_Y_JONI = 0xCB6CD993,
			PED_M_M_MAFUNION = 0x27369312,
			PED_M_Y_CELEBBLOG = 0x94CBBAF8,
			PED_M_Y_EXSPORTS = 0x1E10313A,
			PED_M_Y_MOBPARTY = 0x432DABA9,
			PED_M_Y_PAPARAZZI_01 = 0xABC3DCD5,
			PED_IG_BLUEBROS = 0xA91DABD1,
			PED_IG_JACKSON = 0xC1379A94,
			PED_IG_NAPOLI = 0xCE2077E6,
			PED_IG_ROYAL = 0xDBF72AD6,
			PED_IG_SPADE = 0x671E6D91
		};

		public enum class eVehicle : uint32_t
		{
			VEHICLE_ADMIRAL = 0x4B5C5320,
			VEHICLE_AIRTUG = 0x5D0AAC8F,
			VEHICLE_AMBULANCE = 0x45D56ADA,
			VEHICLE_BANSHEE = 0xC1E908D2,
			VEHICLE_BENSON = 0x7A61B330,
			VEHICLE_BIFF = 0x32B91AE8,
			VEHICLE_BLISTA = 0xEB70965F,
			VEHICLE_BOBCAT = 0x4020325C,
			VEHICLE_BOXVILLE = 0x898ECCEA,
			VEHICLE_BUCCANEER = 0xD756460C,
			VEHICLE_BURRITO = 0xAFBB2CA4,
			VEHICLE_BURRITO2 = 0xC9E8FF76,
			VEHICLE_BUS = 0xD577C962,
			VEHICLE_CABBY = 0x705A3E41,
			VEHICLE_CAVALCADE = 0x779F23AA,
			VEHICLE_CHAVOS = 0xFBFD5B62,
			VEHICLE_COGNOSCENTI = 0x86FE0B60,
			VEHICLE_COMET = 0x3F637729,
			VEHICLE_COQUETTE = 0x067BC037,
			VEHICLE_DF8 = 0x09B56631,
			VEHICLE_DILETTANTE = 0xBC993509,
			VEHICLE_DUKES = 0x2B26F456,
			VEHICLE_E109 = 0x8A765902,
			VEHICLE_EMPEROR = 0xD7278283,
			VEHICLE_EMPEROR2 = 0x8FC3AADC,
			VEHICLE_ESPERANTO = 0xEF7ED55D,
			VEHICLE_FACTION = 0x81A9CDDF,
			VEHICLE_FBI = 0x432EA949,
			VEHICLE_FELTZER = 0xBE9075F1,
			VEHICLE_FEROCI = 0x3A196CEA,
			VEHICLE_FEROCI2 = 0x3D285C4A,
			VEHICLE_FIRETRUK = 0x73920F8E,
			VEHICLE_FLATBED = 0x50B0215A,
			VEHICLE_FORTUNE = 0x255FC509,
			VEHICLE_FORKLIFT = 0x58E49664,
			VEHICLE_FUTO = 0x7836CE2F,
			VEHICLE_FXT = 0x28420460,
			VEHICLE_HABANERO = 0x34B7390F,
			VEHICLE_HAKUMAI = 0xEB9F21D3,
			VEHICLE_HUNTLEY = 0x1D06D681,
			VEHICLE_INFERNUS = 0x18F25AC7,
			VEHICLE_INGOT = 0xB3206692,
			VEHICLE_INTRUDER = 0x34DD8AA1,
			VEHICLE_LANDSTALKER = 0x4BA4E8DC,
			VEHICLE_LOKUS = 0xFDCAF758,
			VEHICLE_MANANA = 0x81634188,
			VEHICLE_MARBELLA = 0x4DC293EA,
			VEHICLE_MERIT = 0xB4D8797E,
			VEHICLE_MINIVAN = 0xED7EADA4,
			VEHICLE_MOONBEAM = 0x1F52A43F,
			VEHICLE_MRTASTY = 0x22C16A2F,
			VEHICLE_MULE = 0x35ED670B,
			VEHICLE_NOOSE = 0x08DE2A8B,
			VEHICLE_NSTOCKADE = 0x71EF6313,
			VEHICLE_ORACLE = 0x506434F6,
			VEHICLE_PACKER = 0x21EEE87D,
			VEHICLE_PATRIOT = 0xCFCFEB3B,
			VEHICLE_PERENNIAL = 0x84282613,
			VEHICLE_PERENNIAL2 = 0xA1363020,
			VEHICLE_PEYOTE = 0x6D19CCBC,
			VEHICLE_PHANTOM = 0x809AA4CB,
			VEHICLE_PINNACLE = 0x07D10BDC,
			VEHICLE_PMP600 = 0x5208A519,
			VEHICLE_POLICE = 0x79FBB0C5,
			VEHICLE_POLICE2 = 0x9F05F101,
			VEHICLE_POLPATRIOT = 0xEB221FC2,
			VEHICLE_PONY = 0xF8DE29A8,
			VEHICLE_PREMIER = 0x8FB66F9B,
			VEHICLE_PRES = 0x8B0D2BA6,
			VEHICLE_PRIMO = 0xBB6B404F,
			VEHICLE_PSTOCKADE = 0x8EB78F5A,
			VEHICLE_RANCHER = 0x52DB01E0,
			VEHICLE_REBLA = 0x04F48FC4,
			VEHICLE_RIPLEY = 0xCD935EF9,
			VEHICLE_ROMERO = 0x2560B2FC,
			VEHICLE_ROM = 0x8CD0264C,
			VEHICLE_RUINER = 0xF26CEFF9,
			VEHICLE_SABRE = 0xE53C7459,
			VEHICLE_SABRE2 = 0x4B5D021E,
			VEHICLE_SABREGT = 0x9B909C94,
			VEHICLE_SCHAFTER = 0xECC96C3F,
			VEHICLE_SENTINEL = 0x50732C82,
			VEHICLE_SOLAIR = 0x50249008,
			VEHICLE_SPEEDO = 0xCFB3870C,
			VEHICLE_STALION = 0x72A4C31E,
			VEHICLE_STEED = 0x63FFE6EC,
			VEHICLE_STOCKADE = 0x6827CF72,
			VEHICLE_STRATUM = 0x66B4FC45,
			VEHICLE_STRETCH = 0x8B13F083,
			VEHICLE_SULTAN = 0x39DA2754,
			VEHICLE_SULTANRS = 0xEE6024BC,
			VEHICLE_SUPERGT = 0x6C9962A9,
			VEHICLE_TAXI = 0xC703DB5F,
			VEHICLE_TAXI2 = 0x480DAF95,
			VEHICLE_TRASH = 0x72435A19,
			VEHICLE_TURISMO = 0x8EF34547,
			VEHICLE_URANUS = 0x5B73F5B7,
			VEHICLE_VIGERO = 0xCEC6B9B7,
			VEHICLE_VIGERO2 = 0x973141FC,
			VEHICLE_VINCENT = 0xDD3BD501,
			VEHICLE_VIRGO = 0xE2504942,
			VEHICLE_VOODOO = 0x779B4F2D,
			VEHICLE_WASHINGTON = 0x69F06B57,
			VEHICLE_WILLARD = 0x737DAEC2,
			VEHICLE_YANKEE = 0xBE6FF06A,
			VEHICLE_BOBBER = 0x92E56A2C,
			VEHICLE_FAGGIO = 0x9229E4EB,
			VEHICLE_HELLFURY = 0x22DC8E7F,
			VEHICLE_NRG900 = 0x47B9138A,
			VEHICLE_PCJ = 0xC9CEAF06,
			VEHICLE_SANCHEZ = 0x2EF89E46,
			VEHICLE_ZOMBIEB = 0xDE05FB87,
			VEHICLE_ANNIHILATOR = 0x31F0B376,
			VEHICLE_MAVERICK = 0x9D0450CA,
			VEHICLE_POLMAV = 0x1517D4D9,
			VEHICLE_TOURMAV = 0x78D70477,
			VEHICLE_DINGHY = 0x3D961290,
			VEHICLE_JETMAX = 0x33581161,
			VEHICLE_MARQUIS = 0xC1CE1183,
			VEHICLE_PREDATOR = 0xE2E7D4AB,
			VEHICLE_REEFER = 0x68E27CB6,
			VEHICLE_SQUALO = 0x17DF5EC2,
			VEHICLE_TUGA = 0x3F724E66,
			VEHICLE_TROPIC = 0x1149422F,
			VEHICLE_CABLECAR = 0xC6C3242D,
			VEHICLE_SUBWAY_LO = 0x2FBC4D30,
			VEHICLE_SUBWAY_HI = 0x8B887FDB,
	
			// Freeze
			VEHICLE_DEAMON = 0x8509261B,
	
			// TBoGT
			// Cars
			VEHICLE_SLAMVAN = 0x2B7F9DE3,
			VEHICLE_CADDY = 0x44623884,
			VEHICLE_APC = 0x2189D250,
			VEHICLE_SUPERD = 0x42F2ED16,
			VEHICLE_SUPERD2 = 0x61A3B9BA,
			VEHICLE_SERRANO = 0x4FB1A214,
			VEHICLE_SERRANO2 = 0x3EA948D6,
			VEHICLE_BUFFALO = 0xEDD516C6,
			VEHICLE_AVAN = 0xEF1E8F88,
			VEHICLE_SCHAFTER2 = 0xB52B5113,
			VEHICLE_SCHAFTER3 = 0xA774B5A6,
			VEHICLE_BULLET = 0x9AE6DDA1,
			VEHICLE_TAMPA = 0x39F9C898,
			VEHICLE_CAVALCADE2 = 0xD0EB2BE5,
			VEHICLE_F620 = 0xDCBCBE48,
			VEHICLE_LIMO2 = 0xF92AEC4D,
			VEHICLE_POLICE3 = 0x71FA16EA,
			VEHICLE_POLICEW = 0x36299F36,
			VEHICLE_POLICE4 = 0x8A63C7B9,
			// Bikes
			VEHICLE_POLICEB = 0xFDEFAEC3,
			VEHICLE_HEXER = 0x11F76C14,
			VEHICLE_FAGGIO2 = 0x0350D1AB,
			VEHICLE_BATI2 = 0xCADD5D2D,
			VEHICLE_VADER = 0xF79A00F7,
			VEHICLE_AKUMA = 0x63ABADE7,
			VEHICLE_HAKUCHOU = 0x4B6C568A,
			VEHICLE_DOUBLE = 0x9C669788,
			// Heli
			VEHICLE_BUZZARD = 0x2F03547B,
			VEHICLE_SWIFT = 0xEBC24DF2,
			VEHICLE_SKYLIFT = 0x3E48BF23,
			// Boat
			VEHICLE_SMUGGLER = 0x38527DEC,
			VEHICLE_FLOATER = 0x98CC6F33,
			VEHICLE_BLADE = 0xB820ED5E,
	
			// TLAD (commented out hash means its already declared in TBoGT const.)
			// Cars
			VEHICLE_GBURRITO = 0x97FA4F36,
			//VEHICLE_SLAMVAN = 0x2B7F9DE3,
			VEHICLE_TOWTRUCK = 0xB12314E0,
			VEHICLE_PACKER2 = 0x0C5E290F,
			VEHICLE_PBUS = 0x885F3671,
			VEHICLE_YANKEE2 = 0x8EDCFA90,
			VEHICLE_RHAPSODY = 0x322CF98F,
			VEHICLE_REGINA = 0xFF22D208,
			//VEHICLE_TAMPA = 0x39F9C898,
			// Bikes
			VEHICLE_ANGEL = 0xDDF716D8,
			VEHICLE_BATI = 0xF9300CC5,
			//VEHICLE_BATI2 = 0xCADD5D2D,
			VEHICLE_DAEMON = 0x77934CEE,
			VEHICLE_DIABOLUS = 0xE7AD9DF9,
			//VEHICLE_DOUBLE = 0x9C669788,
			VEHICLE_DOUBLE2 = 0x971AB25B,
			//VEHICLE_HAKUCHOU = 0x4B6C568A,
			VEHICLE_HAKUCHOU2 = 0xF0C2A91F,
			//VEHICLE_HEXER = 0x11F76C14,
			VEHICLE_INNOVATION = 0xF683EACA,
			VEHICLE_LYCAN = 0x2FCECEB7,
			VEHICLE_NIGHTBLADE = 0xA0438767,
			VEHICLE_REVENANT = 0xEA9789D1,
			VEHICLE_WAYFARER = 0xFB5D56B8,
			VEHICLE_WOLFSBANE = 0xDB20A373,
			VEHICLE_PROGEN = 0xAD7B0D61,
			VEHICLE_ELEGY = 0xbba2261,
			VEHICLE_PHOENIX = 0x831a21d5,
		};

		public enum class eObject : uint32_t
		{
			OBJECT_AIRPORTSHIT1 = 0x37213E8D,
			OBJECT_AIRPORTSHIT2 = 0xBF1B32BD,
			OBJECT_AIRPORTSHIT3 = 0x88FB62AC,
			OBJECT_AIRPORTSHIT4 = 0xE7AD1AF,
			OBJECT_AIRPORTSHIT5 = 0x7121858C,
			OBJECT_AIRPORTSHIT6 = 0x9C9C16D8,
			OBJECT_AIRPORTSHIT7 = 0x05C1730B,
			OBJECT_AIRPORTSHIT8 = 0x6B2BDA02,
			OBJECT_AIRPORTSHIT9 = 0x97DFDA59,
			OBJECT_AIRPORTSHIT10 = 0xF936BF15,
			OBJECT_CJ_AB_PANRACK = 0x328BCBE4,
			OBJECT_CJ_AB_RIT_S_PILLAR = 0x386DD27D,
			OBJECT_CJ_AB_RIT_S_PILLAR2 = 0x76982EC9,
			OBJECT_CJ_AB_RITZ_PILLER1 = 0x3F1FFF92,
			OBJECT_CJ_AB_RITZ_PILLER2 = 0x2862D218,
			OBJECT_CJ_AB_SOPWIN1 = 0x05894A78,
			OBJECT_CJ_AB_SOPWIN2 = 0xDD3D78F5,
			OBJECT_CJ_AB_SOPWIN3 = 0xEED41C22,
			OBJECT_CJ_AIRCON10 = 0xC585300D,
			OBJECT_CJ_AIRCON11 = 0xE5466F8F,
			OBJECT_CJ_AIRCON7 = 0xD2323ECE,
			OBJECT_CJ_AIRCON8 = 0x1C80D36A,
			OBJECT_CJ_AIRCON9 = 0x275CE922,
			OBJECT_CJ_ANIM_VIEW = 0x0637A378,
			OBJECT_CJ_APPLE_1 = 0xD55EC9B8,
			OBJECT_CJ_APPLE_2 = 0xE7066D07,
			OBJECT_CJ_APPLE_3 = 0xB0D400A3,
			OBJECT_CJ_APPLE_4 = 0xC2BEA478,
			OBJECT_CJ_APPLE_SMALL = 0x47511B8C,
			OBJECT_CJ_ARROW = 0x673F486C,
			OBJECT_CJ_ARROW_ICON = 0x4071AA4A,
			OBJECT_CJ_ARROW_ICON_2 = 0xA0299E40,
			OBJECT_CJ_B_CAN1 = 0xE6C7978D,
			OBJECT_CJ_B_CAN3 = 0xD825FA46,
			OBJECT_CJ_BAG_TABLE = 0x127C4966,
			OBJECT_CJ_BAGUETTE_1 = 0xF20514DA,
			OBJECT_CJ_BAN_1 = 0x6A0812D3,
			OBJECT_CJ_BAN_2 = 0x7B4DB55E,
			OBJECT_CJ_BAN_3 = 0x8E90DBE4,
			OBJECT_CJ_BAN_4 = 0xA05B7F79,
			OBJECT_CJ_BAN_5 = 0x362C2B28,
			OBJECT_CJ_BAN_6 = 0x4866CF9D,
			OBJECT_CJ_BAN_7 = 0x57036CD6,
			OBJECT_CJ_BAN_8 = 0x7942B154,
			OBJECT_CJ_BANK_DOOR_L = 0xE64CF26A,
			OBJECT_CJ_BANK_DOOR_R = 0x33A00D13,
			OBJECT_CJ_BANK_MON = 0x6F4F865A,
			OBJECT_CJ_BARRIER_1 = 0xD6DF5631,
			OBJECT_CJ_BARRIER_10 = 0xE02F3A89,
			OBJECT_CJ_BARRIER_10B = 0x274C0E25,
			OBJECT_CJ_BARRIER_11 = 0xF3C061AB,
			OBJECT_CJ_BARRIER_11B = 0xE3C2159E,
			OBJECT_CJ_BARRIER_1B = 0xC6800727,
			OBJECT_CJ_BARRIER_1C = 0xF84E6AC3,
			OBJECT_CJ_BARRIER_2 = 0x8999BBA7,
			OBJECT_CJ_BARRIER_3 = 0x7B731F5A,
			OBJECT_CJ_BARRIER_4B = 0xFA93E30E,
			OBJECT_CJ_BARRIER_5 = 0x2B7B7F68,
			OBJECT_CJ_BARRIER_5B = 0x09B7FFF6,
			OBJECT_CJ_BARRIER_6 = 0xDC04E080,
			OBJECT_CJ_BARRIER_6B = 0x641957F3,
			OBJECT_CJ_BARRIER_7 = 0xCDDB442D,
			OBJECT_CJ_BARRIER_7B = 0x5E654B6B,
			OBJECT_CJ_BARRIER_8 = 0xF0BC89EB,
			OBJECT_CJ_BARRIER_8_LIGHT = 0xA57C0D83,
			OBJECT_CJ_BARRIER_8B = 0x79AFE57C,
			OBJECT_CJ_BARRIER_8C = 0x8FCA91B5,
			OBJECT_CJ_BARRIER_9 = 0x6276ED5E,
			OBJECT_CJ_BARRIER_9B = 0xF41CD9A4,
			OBJECT_CJ_BASK_1 = 0xDE3DFEF1,
			OBJECT_CJ_BEDROOM1_W = 0xA9260604,
			OBJECT_CJ_BEER_TABLE_1 = 0x3987DCE2,
			OBJECT_CJ_BENCH = 0xC986ADAD,
			OBJECT_CJ_BENCH_2 = 0x9718E067,
			OBJECT_CJ_BFAST_J_2 = 0x0DF10C75,
			OBJECT_CJ_BICCIE_2 = 0xAED9A4F4,
			OBJECT_CJ_BICCIE_BOX = 0x271F0B8B,
			OBJECT_CJ_BILLBRD_1A = 0xB4A4DCCF,
			OBJECT_CJ_BIN_1 = 0x94A8F60F,
			OBJECT_CJ_BIN_10 = 0x9683F15D,
			OBJECT_CJ_BIN_11 = 0xD5B8EFC6,
			OBJECT_CJ_BIN_13 = 0xB95536FF,
			OBJECT_CJ_BIN_14 = 0xA2DE0A11,
			OBJECT_CJ_BIN_15 = 0x169EF191,
			OBJECT_CJ_BIN_16 = 0x0894557C,
			OBJECT_CJ_BIN_2 = 0x6E77A9AD,
			OBJECT_CJ_BIN_3 = 0x410DCED6,
			OBJECT_CJ_BIN_4 = 0xBBC8C44E,
			OBJECT_CJ_BIN_5 = 0xD682F9C2,
			OBJECT_CJ_BIN_6 = 0xA72D1B17,
			OBJECT_CJ_BIN_8 = 0xF936BF15,
			OBJECT_CJ_BIN_9 = 0xC37F53A3,
			OBJECT_CJ_BIN_BAG_1 = 0x744C879A,
			OBJECT_CJ_BIN_BAG_2 = 0x82132327,
			OBJECT_CJ_BIN_BAG_INT = 0x58C35D28,
			OBJECT_CJ_BIN_BAG_PICKUP = 0xBF486370,
			OBJECT_CJ_BIN_BAG_PICKUP2 = 0x05771EC9,
			OBJECT_CJ_BLOX_1 = 0xD5B7764B,
			OBJECT_CJ_BM_FLAM_DRUM = 0x25CE10AC,
			OBJECT_CJ_BM_HALF_CABINET = 0x2ACCEFB4,
			OBJECT_CJ_BM_PHONE1 = 0xE6359423,
			OBJECT_CJ_BOAT_DOOR = 0x71056188,
			OBJECT_CJ_BOAT_RAMP = 0x40433D8B,
			OBJECT_CJ_BOAT_SURROUND = 0xA2499400,
			OBJECT_CJ_BOWLING_BALL3 = 0x90FA92C6,
			OBJECT_CJ_BOWLING_PIN = 0xF4A206E4,
			OBJECT_CJ_BOX_DAM_1 = 0xC24943EE,
			OBJECT_CJ_BOX_PILE = 0x8191812E,
			OBJECT_CJ_BOX_PILE_2 = 0xB5A0418E,
			OBJECT_CJ_BREAD_RACK_2 = 0x317343FD,
			OBJECT_CJ_BRIAZER = 0x1AE7947B,
			OBJECT_CJ_BS_07 = 0x9C4039D5,
			OBJECT_CJ_BS_08 = 0xA24C45ED,
			OBJECT_CJ_BS_1 = 0x61F350DF,
			OBJECT_CJ_BS_2 = 0xB803FD03,
			OBJECT_CJ_BS_3 = 0x83231342,
			OBJECT_CJ_BS_4 = 0x28FC5EF2,
			OBJECT_CJ_BS_DOOR_L = 0xB448AFC1,
			OBJECT_CJ_BS_DOOR_R = 0x3EA24472,
			OBJECT_CJ_BS_TRAY_1 = 0x4CBAEB25,
			OBJECT_CJ_BS_TRAY_3 = 0x783DC222,
			OBJECT_CJ_BS_TRAY_4 = 0x6F27AFF6,
			OBJECT_CJ_CABLEROLL = 0x41EC4847,
			OBJECT_CJ_CAGE_1 = 0x4F849EEF,
			OBJECT_CJ_CAGE_2 = 0x3D32FA4C,
			OBJECT_CJ_CAGE_3 = 0x70E861B6,
			OBJECT_CJ_CAGE_4 = 0x5E903D06,
			OBJECT_CJ_CAGE_5 = 0x05C90B79,
			OBJECT_CJ_CAN_DRINK_1 = 0x7CC1EA0B,
			OBJECT_CJ_CAR_WASH_BARRIER = 0x6CC65A1E,
			OBJECT_CJ_CAR_WASH_TICKET = 0x65E5A01F,
			OBJECT_CJ_CARD_PILE_1 = 0xADA2429F,
			OBJECT_CJ_CARD_PILE_2 = 0xBEDAE510,
			OBJECT_CJ_CARD_PILE_3 = 0x90848864,
			OBJECT_CJ_CARD_PILE_4 = 0xA2CA2CEF,
			OBJECT_CJ_CARD_PILE_5 = 0x7AC65CE8,
			OBJECT_CJ_CARD_SHEET1 = 0x9B23AA62,
			OBJECT_CJ_CARP_ROLL_1 = 0x691FC81D,
			OBJECT_CJ_CARP_ROLL_2 = 0x1B8EACF8,
			OBJECT_CJ_CARP_ROLL_3 = 0x45B6014A,
			OBJECT_CJ_CARPET_DIRT = 0x7CC8FE06,
			OBJECT_CJ_CARWASH_MAIN = 0xDD462537,
			OBJECT_CJ_CASE_2 = 0xCCF4320E,
			OBJECT_CJ_CASH_PILE_1 = 0xE0B3F6E1,
			OBJECT_CJ_CASH_PILE_3 = 0x6A02896C,
			OBJECT_CJ_CEIL_LIGHT_07 = 0xA433034F,
			OBJECT_CJ_CEIL_LIGHT_09 = 0x3E36375F,
			OBJECT_CJ_CEIL_LIGHT_1 = 0x2F60D833,
			OBJECT_CJ_CEIL_LIGHT_10 = 0x4BD7D3D6,
			OBJECT_CJ_CEIL_LIGHT_14 = 0x826140E8,
			OBJECT_CJ_CEIL_LIGHT_15 = 0x9478E517,
			OBJECT_CJ_CEIL_LIGHT_17 = 0x38822CD7,
			OBJECT_CJ_CEIL_LIGHT_18 = 0x016C3EAC,
			OBJECT_CJ_CEIL_LIGHT_2 = 0xCF94986C,
			OBJECT_CJ_CEIL_LIGHT_20 = 0xB074E746,
			OBJECT_CJ_CEIL_LIGHT_24 = 0xF7BA75D0,
			OBJECT_CJ_CEIL_LIGHT_26 = 0x93D42E05,
			OBJECT_CJ_CEIL_LIGHT_27 = 0x30756745,
			OBJECT_CJ_CEIL_LIGHT_28 = 0x1ECFC3FA,
			OBJECT_CJ_CEIL_LIGHT_4 = 0xE4094155,
			OBJECT_CJ_CEIL_LIGHT_4_L = 0x3E269F3C,
			OBJECT_CJ_CEIL_LIGHT_5 = 0xF9C36CC9,
			OBJECT_CJ_CEIL_LIGHT_6 = 0x7A52EDE6,
			OBJECT_CJ_CEREAL = 0x56FB4F0C,
			OBJECT_CJ_CEREAL_BOX2 = 0x356957EF,
			OBJECT_CJ_CEREAL2 = 0x4E4BE0D3,
			OBJECT_CJ_CHAIR_1 = 0xE34FD0C6,
			OBJECT_CJ_CHAIR_2 = 0x9525B473,
			OBJECT_CJ_CHAIR_6 = 0xCF72A90C,
			OBJECT_CJ_CHAIR_7 = 0x1915BC55,
			OBJECT_CJ_CHAIR10 = 0x1F399D95,
			OBJECT_CJ_CHAIR13 = 0xFD4F5995,
			OBJECT_CJ_CHAIR2 = 0x6EFBD96B,
			OBJECT_CJ_CHAIR3 = 0x15E3273B,
			OBJECT_CJ_CHAIR4 = 0x02688046,
			OBJECT_CJ_CHAIR5 = 0x3955EE20,
			OBJECT_CJ_CHAIR8 = 0x009FFCB5,
			OBJECT_CJ_CHANGING_ROOM = 0xB9ECB871,
			OBJECT_CJ_CHEAP_BLACK = 0xBA9D70BB,
			OBJECT_CJ_CHEAP_CAMMO = 0x045A0CB6,
			OBJECT_CJ_CHEAP_JEANS_RAD = 0x5092B5DF,
			OBJECT_CJ_CHEAP_OLIVE = 0x21B10208,
			OBJECT_CJ_CHEESE_1 = 0xEEACB722,
			OBJECT_CJ_CHEESE_3 = 0xC18FDCED,
			OBJECT_CJ_CHINA_GLASS1 = 0x4C6BAAED,
			OBJECT_CJ_CHINA_GLASS1A = 0xE11D4D98,
			OBJECT_CJ_CHOPPING_BOARD = 0x98E95757,
			OBJECT_CJ_CHURCH_DOOR_L = 0x6E067039,
			OBJECT_CJ_CHURCH_DOOR_R = 0xDA58C8E0,
			OBJECT_CJ_CIABATTA_1 = 0x7EAE78D9,
			OBJECT_CJ_CLOCK = 0x46DEFA30,
			OBJECT_CJ_CLOTHES_RADIAL1 = 0x47587D44,
			OBJECT_CJ_CLOUDS_ENV = 0x9DFD47A6,
			OBJECT_CJ_COFFEE_CUP = 0x7E5379BC,
			OBJECT_CJ_COFFEE_CUP01 = 0xEC9A0F1E,
			OBJECT_CJ_COFFEE_CUP02 = 0xFAD5AB95,
			OBJECT_CJ_COFFEE_MAC = 0xC0998598,
			OBJECT_CJ_COFFEE_MAC_1 = 0xE400D530,
			OBJECT_CJ_COFFEE_MAC_2 = 0x1168B003,
			OBJECT_CJ_COFFEE_MAC2 = 0xA940DE00,
			OBJECT_CJ_COFFEEE_MAC_1 = 0x20DB88C9,
			OBJECT_CJ_COK_CHEAP = 0x534CE30D,
			OBJECT_CJ_COK_FILTER = 0x82E2FD8D,
			OBJECT_CJ_COK_LIGHT = 0x22CB56E4,
			OBJECT_CJ_COKE_PACK = 0x2C5C740D,
			OBJECT_CJ_COLA_BOTTLE1 = 0x9E4E120B,
			OBJECT_CJ_COLA_BOTTLE2 = 0xD09FF6AE,
			OBJECT_CJ_COLA_BOX = 0x08BD204D,
			OBJECT_CJ_COLA_BOX_2 = 0x3298AD0A,
			OBJECT_CJ_COM_COUCH_1 = 0xD413C1CE,
			OBJECT_CJ_COM_COUCH_2 = 0xCA61AE6A,
			OBJECT_CJ_COMP_GATE_POST = 0x9E9F9F86,
			OBJECT_CJ_COMP2_GATE_L = 0x8F0E97FA,
			OBJECT_CJ_COMP2_GATE_R = 0x13B7A14A,
			OBJECT_CJ_CONE = 0x09A8665C,
			OBJECT_CJ_CONE_SM = 0xD86B0B28,
			OBJECT_CJ_CONSOLE = 0x29377074,
			OBJECT_CJ_COOKER_1 = 0x7AED7CF1,
			OBJECT_CJ_COOKER_6 = 0x134A2DA8,
			OBJECT_CJ_COOKER_7 = 0xBCAF8074,
			OBJECT_CJ_COOKIE_1 = 0xC3022546,
			OBJECT_CJ_COOKIE_2 = 0x97E7CF12,
			OBJECT_CJ_COOKIE_3 = 0xA6A36C89,
			OBJECT_CJ_CORONA1 = 0xBC49368B,
			OBJECT_CJ_COUCH10 = 0xDDDE8F4D,
			OBJECT_CJ_COUCH12 = 0xF9634656,
			OBJECT_CJ_COUCH3 = 0x06A7270B,
			OBJECT_CJ_COUCH5 = 0x7EBE173B,
			OBJECT_CJ_COUCH8 = 0xA407E1CE,
			OBJECT_CJ_CR_BACKROUND = 0x69305DBB,
			OBJECT_CJ_CRACK_ROCK = 0x5E650A2E,
			OBJECT_CJ_CRATE_1 = 0x1C9096DF,
			OBJECT_CJ_CRATE_2 = 0x4BCF755C,
			OBJECT_CJ_CRISP_BLUE = 0xA578B6DC,
			OBJECT_CJ_CRISP_GREEN = 0x5A05109E,
			OBJECT_CJ_CUP_CRATE = 0xEA0CDA0D,
			OBJECT_CJ_CUTLARY_TRAY = 0x93CADEDD,
			OBJECT_CJ_CYLINDER = 0xA6FA6ABF,
			OBJECT_CJ_DAISY_1 = 0xCD052480,
			OBJECT_CJ_DAISY_2 = 0xBB03807D,
			OBJECT_CJ_DART_1 = 0xF1388248,
			OBJECT_CJ_DART_2 = 0xDF085DE8,
			OBJECT_CJ_DART_3 = 0x5CC5D961,
			OBJECT_CJ_DART_4 = 0x4A8EB4F3,
			OBJECT_CJ_DART_5 = 0x37E38F9D,
			OBJECT_CJ_DART_6 = 0x2601EBDA,
			OBJECT_CJ_DART_7 = 0xA7DF6F93,
			OBJECT_CJ_DART_BOARD = 0x1B11B700,
			OBJECT_CJ_DART_BOARD_CAB = 0x01FB9E41,
			OBJECT_CJ_DART_TARGET = 0x7AF81529,
			OBJECT_CJ_DART_TARGET2 = 0xF5B1C3D6,
			OBJECT_CJ_DAVE_CLOCK_1 = 0x41C0C67C,
			OBJECT_CJ_DAVE_CLOCK_2 = 0x6FF7A2E9,
			OBJECT_CJ_DB_MH3_DOOR1 = 0xF5411096,
			OBJECT_CJ_DC_UN_FLAGS = 0x1E4E122D,
			OBJECT_CJ_DINNER_PLATE_1 = 0xE18762B8,
			OBJECT_CJ_DINNER_PLATE_1B = 0x267ECC69,
			OBJECT_CJ_DINNER_PLATE_2 = 0xF7C98F3C,
			OBJECT_CJ_DINNER_PLATE_2B = 0x96A4294A,
			OBJECT_CJ_DINNER_PLATE_3 = 0xBC4B9841,
			OBJECT_CJ_DINNER_PLATE_3B = 0xAFAC60DA,
			OBJECT_CJ_DINNER_PLATE_3C = 0xC167044F,
			OBJECT_CJ_DINNER_PLATE_4 = 0xD2A4C4F3,
			OBJECT_CJ_DINNER_PLATE_5B = 0xF1EEE7CA,
			OBJECT_CJ_DINNER_PLATE_7 = 0xB65A0C46,
			OBJECT_CJ_DIVING_BOARD = 0x93A84AB9,
			OBJECT_CJ_DL_IMPOSTER = 0x5737FBF4,
			OBJECT_CJ_DL_V_IMPOSTER = 0x75F81419,
			OBJECT_CJ_DM_ARCWAY = 0x95B7AB30,
			OBJECT_CJ_DM_FLAG_04 = 0x83EC33AF,
			OBJECT_CJ_DM_FLAG_1 = 0x5988EF96,
			OBJECT_CJ_DM_FLAG_2 = 0xB285A1C6,
			OBJECT_CJ_DM_FLAG_3 = 0xA2C70249,
			OBJECT_CJ_DM_HOT_FLAG_1 = 0x9DD2FE00,
			OBJECT_CJ_DM_LIGHT_1 = 0x7067FBC7,
			OBJECT_CJ_DM_SPRAYCAN = 0x1DB93AB9,
			OBJECT_CJ_DOCK_BARRIER = 0xECC2F072,
			OBJECT_CJ_DOCK_CLOCK = 0xEBD7EFD8,
			OBJECT_CJ_DOCK_FENCE = 0x968D3CA6,
			OBJECT_CJ_DOCK_HUT = 0x13916478,
			OBJECT_CJ_DOG_TIN_2 = 0x9415BD76,
			OBJECT_CJ_DONUT = 0x3C4E43BC,
			OBJECT_CJ_DONUT2 = 0xEE548951,
			OBJECT_CJ_DONUT3 = 0xFEAD2A02,
			OBJECT_CJ_DRINKS_DISP_2 = 0x52CB85C2,
			OBJECT_CJ_DUMPSTER_1 = 0xEB12D336,
			OBJECT_CJ_DUMPSTER_2 = 0xFBCD74AB,
			OBJECT_CJ_DUMPSTER_3 = 0xCD7E180D,
			OBJECT_CJ_DUMPSTER_4 = 0xE02FBD70,
			OBJECT_CJ_DUMPSTER_5 = 0xA2AB4268,
			OBJECT_CJ_DUMPSTER_6 = 0xB5F96904,
			OBJECT_CJ_DW_SIGN_1 = 0xF0F1A4A1,
			OBJECT_CJ_DW_SIGN_2 = 0xA4200AFF,
			OBJECT_CJ_EC_DOCK_FENCE = 0xB2729773,
			OBJECT_CJ_ELEC_BOX_14 = 0x8B62EB38,
			OBJECT_CJ_ELEC_BOX_15 = 0x7BF24C57,
			OBJECT_CJ_EM_FLAG_1 = 0x9BE9F82E,
			OBJECT_CJ_EM_FLAG_2 = 0xF54A2AED,
			OBJECT_CJ_ET_DOCK_LIGHT = 0xC54EE0A4,
			OBJECT_CJ_EXPRESSO_CUP = 0x85E2A844,
			OBJECT_CJ_EXT_DOOR_1 = 0xA96F0F0F,
			OBJECT_CJ_EXT_DOOR_10 = 0xABBB242F,
			OBJECT_CJ_EXT_DOOR_11 = 0x301F2CE5,
			OBJECT_CJ_EXT_DOOR_15B = 0x0F5E06B2,
			OBJECT_CJ_EXT_DOOR_16 = 0x4170CF74,
			OBJECT_CJ_EXT_DOOR_17 = 0x820550A0,
			OBJECT_CJ_EXT_DOOR_18 = 0x959BF7CD,
			OBJECT_CJ_EXT_DOOR_19_L = 0x4BFD4A54,
			OBJECT_CJ_EXT_DOOR_19_R = 0x02753731,
			OBJECT_CJ_EXT_DOOR_22 = 0x3DA14691,
			OBJECT_CJ_EXT_DOOR_6 = 0x7EA03976,
			OBJECT_CJ_EXT_DOOR_9 = 0x19056E42,
			OBJECT_CJ_EXT_DOOR_CM = 0x155FC327,
			OBJECT_CJ_F1 = 0x79DAB92E,
			OBJECT_CJ_F2 = 0x9DE40110,
			OBJECT_CJ_F4 = 0x15E8F118,
			OBJECT_CJ_F5 = 0x083055A7,
			OBJECT_CJ_F6 = 0xFB4E3BE3,
			OBJECT_CJ_F7 = 0xEBEC9D20,
			OBJECT_CJ_F8 = 0x4E806246,
			OBJECT_CJ_F9 = 0x4A4259CA,
			OBJECT_CJ_FENCE_1_1 = 0x0FDB87E5,
			OBJECT_CJ_FENCE_1_2 = 0x212DAA89,
			OBJECT_CJ_FENCE_1_3 = 0x33684EFE,
			OBJECT_CJ_FENCE_1_4 = 0x44B17190,
			OBJECT_CJ_FENCE_1_5 = 0xD62C148B,
			OBJECT_CJ_FENCE_1_6 = 0xE751B6D6,
			OBJECT_CJ_FENCE_1_7 = 0xFA9EDD70,
			OBJECT_CJ_FENCE_10_1 = 0xA8241C65,
			OBJECT_CJ_FENCE_10_2 = 0x8A39E0A1,
			OBJECT_CJ_FENCE_10_3 = 0x5BFB0424,
			OBJECT_CJ_FENCE_11_1 = 0x35BF5588,
			OBJECT_CJ_FENCE_11_2 = 0x435CF0C3,
			OBJECT_CJ_FENCE_12_1 = 0x10FA9F8C,
			OBJECT_CJ_FENCE_12_2 = 0xD6B5AB03,
			OBJECT_CJ_FENCE_13_1 = 0x741C0299,
			OBJECT_CJ_FENCE_14_1 = 0x95E4FE43,
			OBJECT_CJ_FENCE_14_2 = 0x60B693E7,
			OBJECT_CJ_FENCE_15_1 = 0xAB16962F,
			OBJECT_CJ_FENCE_15_11 = 0xA78C8BB7,
			OBJECT_CJ_FENCE_15_6 = 0x50D4E1AD,
			OBJECT_CJ_FENCE_15_7 = 0x3E9ABD39,
			OBJECT_CJ_FENCE_15_8 = 0x50C66184,
			OBJECT_CJ_FENCE_15_9 = 0x3F1E3E34,
			OBJECT_CJ_FENCE_16_1 = 0x7E31F893,
			OBJECT_CJ_FENCE_16_2 = 0xFE4778BC,
			OBJECT_CJ_FENCE_16_3 = 0xCFFD9C29,
			OBJECT_CJ_FENCE_16_4 = 0xA5B54799,
			OBJECT_CJ_FENCE_16_5 = 0xB75B6AE5,
			OBJECT_CJ_FENCE_17_1 = 0x584E8A99,
			OBJECT_CJ_FENCE_17_2 = 0x1A0B8E10,
			OBJECT_CJ_FENCE_17_3 = 0x286D2AD3,
			OBJECT_CJ_FENCE_17_4 = 0x7FE259C4,
			OBJECT_CJ_FENCE_18_1 = 0xD4FDFF5B,
			OBJECT_CJ_FENCE_19_1 = 0x4BB57E77,
			OBJECT_CJ_FENCE_19_2 = 0xDB691DE0,
			OBJECT_CJ_FENCE_19_43 = 0x67BD0609,
			OBJECT_CJ_FENCE_19_44 = 0x761DA2CA,
			OBJECT_CJ_FENCE_19_46 = 0x9A916BB1,
			OBJECT_CJ_FENCE_19_47 = 0xD79FE5C9,
			OBJECT_CJ_FENCE_19_48 = 0x6B798D6A,
			OBJECT_CJ_FENCE_2_1 = 0xB884FC3F,
			OBJECT_CJ_FENCE_2_2 = 0x9CC5C4C1,
			OBJECT_CJ_FENCE_2_3 = 0x4DF1A716,
			OBJECT_CJ_FENCE_2_4 = 0x402B8B8A,
			OBJECT_CJ_FENCE_2_5 = 0x71776E21,
			OBJECT_CJ_FENCE_20_1 = 0x4434A84C,
			OBJECT_CJ_FENCE_21_1 = 0xF4762EFB,
			OBJECT_CJ_FENCE_21_2 = 0x02D8CBC0,
			OBJECT_CJ_FENCE_21_3 = 0x69811903,
			OBJECT_CJ_FENCE_21_4 = 0x77BE357D,
			OBJECT_CJ_FENCE_22_3 = 0x463AFC43,
			OBJECT_CJ_FENCE_22_4 = 0xE5B1BB32,
			OBJECT_CJ_FENCE_23_1 = 0x76BFF682,
			OBJECT_CJ_FENCE_23_2 = 0x1C9CC23D,
			OBJECT_CJ_FENCE_23_3 = 0x26ADD65F,
			OBJECT_CJ_FENCE_23_4 = 0xCD03A308,
			OBJECT_CJ_FENCE_23_PST = 0x7DA7DF32,
			OBJECT_CJ_FENCE_3_1 = 0xBCF23C02,
			OBJECT_CJ_FENCE_3_2 = 0xD078630E,
			OBJECT_CJ_FENCE_3_3 = 0xC23AC693,
			OBJECT_CJ_FENCE_3_4 = 0x440CCA39,
			OBJECT_CJ_FENCE_3_5 = 0x77E031DF,
			OBJECT_CJ_FENCE_3_6 = 0x699A9554,
			OBJECT_CJ_FENCE_3_7 = 0x9B50F8C0,
			OBJECT_CJ_FENCE_3_8 = 0xF9E6B5E2,
			OBJECT_CJ_FENCE_4_01 = 0xD99475D2,
			OBJECT_CJ_FENCE_4_06 = 0x43CE4A48,
			OBJECT_CJ_FENCE_4_07 = 0x73642973,
			OBJECT_CJ_FENCE_4_08 = 0x5CA47C00,
			OBJECT_CJ_FENCE_4_1 = 0x4400BC3E,
			OBJECT_CJ_FENCE_4_2 = 0x33AB1B93,
			OBJECT_CJ_FENCE_4_3 = 0x60C475C5,
			OBJECT_CJ_FENCE_4_4 = 0x4E35D0A8,
			OBJECT_CJ_FENCE_4_5 = 0xFCE52E08,
			OBJECT_CJ_FENCE_5_1 = 0x6B7C1CA1,
			OBJECT_CJ_FENCE_5_2 = 0x9935F814,
			OBJECT_CJ_FENCE_5_3 = 0x8B895CBB,
			OBJECT_CJ_FENCE_5_4 = 0x394A383E,
			OBJECT_CJ_FENCE_6_1 = 0x0CCA73A0,
			OBJECT_CJ_FENCE_6_2 = 0x8EF6F7F7,
			OBJECT_CJ_FENCE_6_3 = 0x7D20544A,
			OBJECT_CJ_FENCE_6_4 = 0x2F78B8FC,
			OBJECT_CJ_FENCE_6_5 = 0x21AB1D61,
			OBJECT_CJ_FENCE_6_54 = 0x26C8106D,
			OBJECT_CJ_FENCE_6_55 = 0x45B04E3D,
			OBJECT_CJ_FENCE_6_6 = 0x6A312ED8,
			OBJECT_CJ_FENCE_6_7 = 0x57D78A25,
			OBJECT_CJ_FENCE_6_70 = 0xD738201A,
			OBJECT_CJ_FENCE_7_1 = 0xB261AC79,
			OBJECT_CJ_FENCE_7_2 = 0x6E272401,
			OBJECT_CJ_FENCE_8_1 = 0xB4A01E13,
			OBJECT_CJ_FENCE_8_2 = 0xC312BAF8,
			OBJECT_CJ_FENCE_9_1 = 0xC6B553F6,
			OBJECT_CJ_FENCE_9_2 = 0xB83AB701,
			OBJECT_CJ_FENCE_CROWD = 0x674EDE84,
			OBJECT_CJ_FILEING_CAB_1 = 0x81AC84C8,
			OBJECT_CJ_FILEING_CAB_2 = 0x7BFE796C,
			OBJECT_CJ_FIRST_AID_PICKUP = 0x3FC62578,
			OBJECT_CJ_FISHING_ROD_1 = 0x018C5968,
			OBJECT_CJ_FLIGHT_CASE_1 = 0xDAB3D3FA,
			OBJECT_CJ_FLOOR_LIGHT_1 = 0xB54D324D,
			OBJECT_CJ_FOOD_COUNTER2 = 0x70E26AAE,
			OBJECT_CJ_FOOD_SHELF_2 = 0xC741CE02,
			OBJECT_CJ_FORK = 0xF9525FC1,
			OBJECT_CJ_FRIDGE_3 = 0x225E36F8,
			OBJECT_CJ_FRUITCRATE1 = 0xB0856116,
			OBJECT_CJ_FRUITCRATE2 = 0x7B87771B,
			OBJECT_CJ_FRUITCRATE3 = 0x8C6198CF,
			OBJECT_CJ_G_DOOR_BIG = 0x0F0D8432,
			OBJECT_CJ_G_DOOR_BIG2 = 0xC63CD5E1,
			OBJECT_CJ_GAME_CLOCK = 0xE226313D,
			OBJECT_CJ_GAME_CUBE_1 = 0x2718C626,
			OBJECT_CJ_GAME_CUBE_2 = 0xDD28B247,
			OBJECT_CJ_GAME_CUBE_3 = 0xCCEA11CA,
			OBJECT_CJ_GAME_CUBE_4 = 0xBB1F6E71,
			OBJECT_CJ_GAME_CUBE_5 = 0xA6E545FD,
			OBJECT_CJ_GAME_CUBE_6 = 0x5C5030D4,
			OBJECT_CJ_GAME_CUBE_C1 = 0x8E1EECCC,
			OBJECT_CJ_GAME_CUBE_C2 = 0x98A801DA,
			OBJECT_CJ_GAME_CUBE_C3 = 0x451E5AC8,
			OBJECT_CJ_GAME_CUBE_C4 = 0x56CBFE23,
			OBJECT_CJ_GAME_CUBE_C5 = 0x618E13A7,
			OBJECT_CJ_GAME_CUBE_C6 = 0x733EB708,
			OBJECT_CJ_GAME_GRID = 0x4F3E5681,
			OBJECT_CJ_GARAGE_DOOR_BIG = 0xCB19F86B,
			OBJECT_CJ_GAS_CANZ = 0x32BBE5F4,
			OBJECT_CJ_GAS_FIRE = 0x19AF4794,
			OBJECT_CJ_GATE_1 = 0xC493F985,
			OBJECT_CJ_GATE_18 = 0xF186BF2B,
			OBJECT_CJ_GATE_2 = 0xB0D5D209,
			OBJECT_CJ_GATE_23 = 0x65FFA4BB,
			OBJECT_CJ_GATE_25 = 0x13D20031,
			OBJECT_CJ_GATE_3 = 0xEB31C6C0,
			OBJECT_CJ_GATE_3_2 = 0xA65200DE,
			OBJECT_CJ_GATE_3_3 = 0x29748711,
			OBJECT_CJ_GATE_3_4 = 0x3A22A86D,
			OBJECT_CJ_GATE_3_4L = 0xF1065484,
			OBJECT_CJ_GATE_3_4R = 0xA4EF3C53,
			OBJECT_CJ_GATE_3_7 = 0x2C960D6C,
			OBJECT_CJ_GATE_3_7L = 0xA5D054C5,
			OBJECT_CJ_GATE_3_7R = 0xFF788814,
			OBJECT_CJ_GATE_3L = 0x8C3A0903,
			OBJECT_CJ_GATE_4 = 0xD5729B42,
			OBJECT_CJ_GATE_4L = 0xA5FE26DB,
			OBJECT_CJ_GATE_4R = 0x779E4A1C,
			OBJECT_CJ_GATE_4R01 = 0xC509E82B,
			OBJECT_CJ_GATE_9 = 0x51089270,
			OBJECT_CJ_GATE_DOCK = 0x1646B0B3,
			OBJECT_CJ_GB_BENCH_1 = 0x17911992,
			OBJECT_CJ_GB_BENCH_2 = 0x2D004470,
			OBJECT_CJ_GB_BENCH_3 = 0xAB22C0AF,
			OBJECT_CJ_GB_BENCH_4 = 0x62A62FBB,
			OBJECT_CJ_GB_BLUE_GREEN_1 = 0x93F72236,
			OBJECT_CJ_GB_BLUE_NAVY_1 = 0xF39B9C69,
			OBJECT_CJ_GB_BURG_GREEN_1 = 0xA031090D,
			OBJECT_CJ_GB_CHEAP_BLACK = 0x702A9441,
			OBJECT_CJ_GB_CHEAP_GREEN = 0x2A1DDB08,
			OBJECT_CJ_GB_CHEAP_GREY = 0xD8A51D59,
			OBJECT_CJ_GB_CHEAP_NAVY = 0x24FF5BF5,
			OBJECT_CJ_GB_JERK_BK = 0x2A72064C,
			OBJECT_CJ_GB_JERK_BLACK = 0x195BC253,
			OBJECT_CJ_GB_JERK_FAWN = 0x8F1D537C,
			OBJECT_CJ_GB_JERK_G = 0xE6205F7B,
			OBJECT_CJ_GB_JERK_GREY = 0xDB6E94E0,
			OBJECT_CJ_GB_JERK_TAN = 0x747CBA05,
			OBJECT_CJ_GB_JUMP_1 = 0x4C48AB7C,
			OBJECT_CJ_GB_JUMP_2 = 0x1E6ECFC9,
			OBJECT_CJ_GB_JUMP_3 = 0xFF569199,
			OBJECT_CJ_GB_KOR_VASE_1 = 0xF4CB175F,
			OBJECT_CJ_GB_KORFAN01 = 0x12EA6C44,
			OBJECT_CJ_GB_KORJADEVASE01 = 0xEE89EF00,
			OBJECT_CJ_GB_LEATH_B_BLUE = 0x010859AF,
			OBJECT_CJ_GB_LEATH_B_RED = 0x6FB2D7BF,
			OBJECT_CJ_GB_LEATH_B_YEL = 0x86242C2C,
			OBJECT_CJ_GB_MED_B_LEATH = 0xA768861C,
			OBJECT_CJ_GB_MED_B_T = 0x56DBCE64,
			OBJECT_CJ_GB_MED_BK_LEATH = 0xF0C55F8F,
			OBJECT_CJ_GB_MED_BLK_T = 0x10D279FB,
			OBJECT_CJ_GB_MED_FAWN_T = 0x3C6924A0,
			OBJECT_CJ_GB_MED_G_LEATH = 0x809619D7,
			OBJECT_CJ_GB_MED_JEANS = 0x1373F437,
			OBJECT_CJ_GB_MED_JEANS_BLK = 0x74C25CE3,
			OBJECT_CJ_GB_MED_JEANS_W = 0xB30E1959,
			OBJECT_CJ_GB_MED_SHIRT_1 = 0xD5963276,
			OBJECT_CJ_GB_MED_SHIRT_2 = 0xE7B1D6AD,
			OBJECT_CJ_GB_MED_SHIRT_3 = 0x8102094F,
			OBJECT_CJ_GB_PUFF_BLACK = 0x33283CDC,
			OBJECT_CJ_GB_PUFF_BROWN = 0x7FD8624A,
			OBJECT_CJ_GB_PUFF_GREEN = 0x41176E30,
			OBJECT_CJ_GB_SMART_BLK1 = 0x5CB725F2,
			OBJECT_CJ_GB_SMART_BLK2 = 0x35E9D854,
			OBJECT_CJ_GB_SMART_BLK3 = 0xCDD38829,
			OBJECT_CJ_GB_SMART_BLK4 = 0xE0112CA4,
			OBJECT_CJ_GB_SMART_BLK5 = 0x2375B36C,
			OBJECT_CJ_GB_SMART_BROWN4 = 0xC7681553,
			OBJECT_CJ_GB_SMART_FAWN1 = 0x0620FE2B,
			OBJECT_CJ_GB_SMART_FAWN2 = 0xD7D8A19B,
			OBJECT_CJ_GB_SMART_GREY1 = 0x686E5A9C,
			OBJECT_CJ_GB_SMART_GREY2 = 0x3F1707EE,
			OBJECT_CJ_GB_SMART_GREY3 = 0xAC7B62B5,
			OBJECT_CJ_GB_SMART_GREY4 = 0xA1CD4D59,
			OBJECT_CJ_GB_SMART_GREY5 = 0x9007A9CE,
			OBJECT_CJ_GHETTO_BLASTER_1 = 0x18116D41,
			OBJECT_CJ_GHETTO_BLASTER_2 = 0xFA5A31D3,
			OBJECT_CJ_GIN_BOT_SM = 0xB3C4B6C9,
			OBJECT_CJ_GM_DOOR_04 = 0xDE316DB9,
			OBJECT_CJ_GM_DOOR_05 = 0x2154F3F3,
			OBJECT_CJ_GM_DOOR_1 = 0x6A393178,
			OBJECT_CJ_GM_DOOR_2 = 0x88F96EF8,
			OBJECT_CJ_GM_RUB_PILE_1 = 0xDCF0F27B,
			OBJECT_CJ_GM_RUB_PILE_2 = 0xD396DFC7,
			OBJECT_CJ_GM_RUB_PILE_3 = 0xBDB1B3E5,
			OBJECT_CJ_GM_RUB_PILE_4 = 0xB2FB9E79,
			OBJECT_CJ_GM_RUB_PILE_5 = 0x69CE8C20,
			OBJECT_CJ_GM_RUB_PILE_6 = 0xCF705762,
			OBJECT_CJ_GM_RUB_PILE_7 = 0x85EA4457,
			OBJECT_CJ_GM_RUB_PILE_8 = 0x7457A132,
			OBJECT_CJ_GM_RUB_PILE_9 = 0x331D1EBE,
			OBJECT_CJ_GOLF_BALL = 0xB00ABE6D,
			OBJECT_CJ_GOLF_CLUB_1 = 0xBC0805E7,
			OBJECT_CJ_GOLF_CLUB_2 = 0x396F80B8,
			OBJECT_CJ_GOLF_CLUB_3 = 0x27385C4A,
			OBJECT_CJ_HANDDRIER = 0x9B40E40D,
			OBJECT_CJ_HANDLE_LD = 0x5C58553C,
			OBJECT_CJ_HANDSET_ONE = 0x51207518,
			OBJECT_CJ_HI_FI_2 = 0xCB3B1AB6,
			OBJECT_CJ_HI_FI_SEP_3 = 0xE93EA7FB,
			OBJECT_CJ_HIPPO_BIN = 0x1B42315D,
			OBJECT_CJ_HOLDALL = 0x2E090DFC,
			OBJECT_CJ_HOT_FLAG_2 = 0x7BC211CE,
			OBJECT_CJ_HOTEL_TROLLY = 0xF5F716EC,
			OBJECT_CJ_IM_GARD_LIGHT = 0x8B2475EC,
			OBJECT_CJ_IM_TV_STUDIO = 0xC2BB1F67,
			OBJECT_CJ_IM_TV_STUDIODF01 = 0xDBDFFE11,
			OBJECT_CJ_IND_BOX_PILE_1 = 0x4F6F0EC6,
			OBJECT_CJ_IND_BOX_PILE_1B = 0x268408A5,
			OBJECT_CJ_IND_BOX_PILE_1C = 0x58BAED12,
			OBJECT_CJ_IND_BOX_PILE_1LD = 0x4BBDE2FC,
			OBJECT_CJ_IND_BOX_PILE_2 = 0x3D2E6A41,
			OBJECT_CJ_IND_BOX_PILE_2LD = 0x3E5CB04B,
			OBJECT_CJ_IND_CABLEW_1 = 0xF8430CEC,
			OBJECT_CJ_IND_CABLEW_2 = 0x0828ACB3,
			OBJECT_CJ_IND_CRATE_1 = 0x46AC663A,
			OBJECT_CJ_IND_CRATE_2 = 0xC94E6B80,
			OBJECT_CJ_IND_CRATE_3 = 0xBB14CF0D,
			OBJECT_CJ_IND_CRATE_4 = 0xAA4D2D7E,
			OBJECT_CJ_IND_CRATE_5 = 0x0C04F0EC,
			OBJECT_CJ_IND_DYNAMIC = 0x58EB0DAB,
			OBJECT_CJ_IND_GAS = 0x7ED0E3F1,
			OBJECT_CJ_IND_LGT_STATIC = 0xD8DB909B,
			OBJECT_CJ_IND_LIGHT_1 = 0x42945123,
			OBJECT_CJ_IND_LIGHT_2 = 0x386B3CD1,
			OBJECT_CJ_IND_LIGHT_3 = 0x2630985C,
			OBJECT_CJ_IND_LIGHT_4 = 0x388E3D03,
			OBJECT_CJ_IND_LIGHT_5 = 0x26D3998E,
			OBJECT_CJ_IND_LIGHT_7 = 0x8DA2E73F,
			OBJECT_CJ_IND_LIGHT_7_LOD = 0x509FCC97,
			OBJECT_CJ_IND_LIGHT_DAY = 0xAE69AA15,
			OBJECT_CJ_IND_PIPE_1 = 0xDCFCD4C7,
			OBJECT_CJ_IND_PIPE_2 = 0x8B41B152,
			OBJECT_CJ_IND_PIPE_2B = 0x6804F9DB,
			OBJECT_CJ_IND_PIPE_3 = 0xA9A9EE22,
			OBJECT_CJ_IND_PIPE_4 = 0xC814AAF3,
			OBJECT_CJ_IND_PIPE_5 = 0xC1E99E9D,
			OBJECT_CJ_IND_RAFT_BIG = 0x5A22016D,
			OBJECT_CJ_IND_WASHER_3 = 0xC07D59B9,
			OBJECT_CJ_IND_WASHER_5 = 0x5D491352,
			OBJECT_CJ_IND_WOODPILE_1 = 0x038BB534,
			OBJECT_CJ_IND_WOODPILE_2 = 0xDC9BE751,
			OBJECT_CJ_IND_WOODPILE_3 = 0xE96580E4,
			OBJECT_CJ_IND_WOODPILE_4 = 0xC0482EAA,
			OBJECT_CJ_IND_WOODPILE_5 = 0xCEDACBCF,
			OBJECT_CJ_IND_WOODPILE_6 = 0xA3D875CF,
			OBJECT_CJ_IND_WOODPILE_7 = 0xB0578EC9,
			OBJECT_CJ_IND_WOODPILE_8 = 0x876ABCF4,
			OBJECT_CJ_IND_WOODPILE_9 = 0x95215861,
			OBJECT_CJ_INDCR_BKNLOD = 0x23E55506,
			OBJECT_CJ_INT_DOOR_10 = 0xC7C612C1,
			OBJECT_CJ_INT_DOOR_12_H = 0xC3326B70,
			OBJECT_CJ_INT_DOOR_22 = 0xECB45FC5,
			OBJECT_CJ_INT_DOOR_24 = 0x9EE94424,
			OBJECT_CJ_INT_DOOR_27L = 0x62EFA672,
			OBJECT_CJ_INT_DOOR_27R = 0xB2BFC60D,
			OBJECT_CJ_INT_DOOR_29 = 0xF228EAA2,
			OBJECT_CJ_INT_DOOR_30 = 0x08E79743,
			OBJECT_CJ_INT_DOOR_3L = 0x3E908284,
			OBJECT_CJ_INT_DOOR_6 = 0x171BD4FB,
			OBJECT_CJ_INT_DOOR_7 = 0x294EF961,
			OBJECT_CJ_INT_PLANT_1 = 0x98B32B00,
			OBJECT_CJ_INT_PLANT_2 = 0x8F02179E,
			OBJECT_CJ_INT_PLANT_3 = 0xB486E2A7,
			OBJECT_CJ_INT_PLANT_4 = 0xAAC8CF2B,
			OBJECT_CJ_INTERCOM = 0x4E2876F1,
			OBJECT_CJ_J_CAN_USED = 0x5F7FC466,
			OBJECT_CJ_J_CAN1 = 0x355B211A,
			OBJECT_CJ_J_CAN2 = 0xB893A78D,
			OBJECT_CJ_J_CAN3 = 0xE204FA6F,
			OBJECT_CJ_J_CAN4 = 0x73329CC8,
			OBJECT_CJ_J_CAN5 = 0x7E80B364,
			OBJECT_CJ_J_CAN6 = 0x4C244EC4,
			OBJECT_CJ_J_CAN7 = 0x55F66268,
			OBJECT_CJ_JA_AUTO = 0xFA064AFC,
			OBJECT_CJ_JA_AUTO_ROOF = 0x306D2060,
			OBJECT_CJ_JA_BRICK_1 = 0xFC7B178A,
			OBJECT_CJ_JA_DOOR1 = 0x0F979408,
			OBJECT_CJ_JA_MORE_WOOD = 0x2735367C,
			OBJECT_CJ_JERK_TAN_SING = 0x3DD56E04,
			OBJECT_CJ_JOJO_BOX1 = 0xCF2CAF3A,
			OBJECT_CJ_K_BOWL_1B = 0x0F032FB0,
			OBJECT_CJ_K_BOWL_2B = 0x8FA83298,
			OBJECT_CJ_K_BOWL_3B = 0x36520109,
			OBJECT_CJ_K_CHINA_EXTRA = 0xD5E524F4,
			OBJECT_CJ_K_COUNTER = 0x07A3A886,
			OBJECT_CJ_K_COUNTER_G_1 = 0xFC5CA391,
			OBJECT_CJ_K_COUNTER_G_2 = 0x8054AB7F,
			OBJECT_CJ_K_COUNTER_G_3 = 0xD112CCFA,
			OBJECT_CJ_K_COUNTER_G_4 = 0xB2D2907A,
			OBJECT_CJ_K_CUPBOARD_1 = 0x8DE22DEF,
			OBJECT_CJ_K_CUPBOARD_2 = 0x372C8085,
			OBJECT_CJ_K_INCENCE_B = 0x98B8E777,
			OBJECT_CJ_K_INCENSE = 0x2C2CE1D9,
			OBJECT_CJ_K_KNIFE = 0xDAE9A21B,
			OBJECT_CJ_K_LANTERN = 0x154A3634,
			OBJECT_CJ_K_LANTERN2 = 0x2444128B,
			OBJECT_CJ_K_LANTERN3 = 0x31892D15,
			OBJECT_CJ_K_LANTERN5 = 0x8B1C603E,
			OBJECT_CJ_K_LANTERN6 = 0x5C6B02DC,
			OBJECT_CJ_K_PLATE_1 = 0x684B6C79,
			OBJECT_CJ_K_PLATE_2 = 0x5698C914,
			OBJECT_CJ_K_POT_1B = 0xC0CB2B0A,
			OBJECT_CJ_K_POT_3 = 0x97B3202E,
			OBJECT_CJ_K_POT_3B = 0x9D9766DF,
			OBJECT_CJ_K_POT_4 = 0x89EC84A1,
			OBJECT_CJ_K_POT_4B = 0x3B5E234E,
			OBJECT_CJ_K_POT_5 = 0xDFD5B06E,
			OBJECT_CJ_K_POT_5B = 0x0ADC5E3C,
			OBJECT_CJ_K_POT_6B = 0x67571640,
			OBJECT_CJ_K_POT_7 = 0xC442F949,
			OBJECT_CJ_K_POT_7B = 0x6B909DD3,
			OBJECT_CJ_K_POT_8B = 0xAD251F8B,
			OBJECT_CJ_K_SPOTLIGHT = 0x67770A04,
			OBJECT_CJ_K_VASE_2B = 0x8F791E30,
			OBJECT_CJ_K_W_POT = 0x83C1F6AA,
			OBJECT_CJ_K_W_POT2 = 0x9DB967E3,
			OBJECT_CJ_KETTLE_1 = 0x165B0BE8,
			OBJECT_CJ_KETTLE_3 = 0xE86B3009,
			OBJECT_CJ_KETTLE_6 = 0xB817CF53,
			OBJECT_CJ_KICKSTOOL = 0x1417B936,
			OBJECT_CJ_KITCH_1_COOKER = 0x8284F9AD,
			OBJECT_CJ_KITCH_1_END_2L = 0x56B10887,
			OBJECT_CJ_KITCH_1_FREE_2 = 0x384A5D97,
			OBJECT_CJ_KITCH_1_SINK = 0xB4220799,
			OBJECT_CJ_KITCH_1_UNIT_2 = 0x375E1FC5,
			OBJECT_CJ_KITCH_1_UNIT_5 = 0x005DB1C5,
			OBJECT_CJ_KITCH_3_UNIT_6 = 0x1D90AB30,
			OBJECT_CJ_KITCH_5_UNIT_2 = 0xB888016B,
			OBJECT_CJ_KITCH_5_UNIT_4 = 0x97A33FA2,
			OBJECT_CJ_KITCH_5_UNIT_7 = 0x85909B7D,
			OBJECT_CJ_KNIFE = 0x944B1B1E,
			OBJECT_CJ_KNIFE_STAND = 0xF78C43B7,
			OBJECT_CJ_KNIVE_RACK = 0xBBB3818D,
			OBJECT_CJ_KOR_HUGE_VASE = 0x3541C413,
			OBJECT_CJ_KOR_HUGE_VASE_2 = 0x80508E9F,
			OBJECT_CJ_KOR_HUGE_VASE_3 = 0x8E1A2A32,
			OBJECT_CJ_KOR_MED_VASE_1 = 0xD100BE97,
			OBJECT_CJ_KOR_MED_VASE_3 = 0xDA6B5184,
			OBJECT_CJ_KOR_MED_VASE_4 = 0x1021BCF0,
			OBJECT_CJ_KOR_POSTERS1 = 0x2AB9AF9A,
			OBJECT_CJ_KOR_SMALL_VASE_1 = 0x89610C4E,
			OBJECT_CJ_KOR_SMALL_VASE_4 = 0x4081FA8D,
			OBJECT_CJ_LADDER_1 = 0xCB142BF1,
			OBJECT_CJ_LADDER_2 = 0x83A11D0C,
			OBJECT_CJ_LADDER_3 = 0x969A42FE,
			OBJECT_CJ_LADDER_4 = 0xDF1D5403,
			OBJECT_CJ_LATINO_BLOCK = 0x5038160F,
			OBJECT_CJ_LATINO_BLOCK2 = 0xA391A328,
			OBJECT_CJ_LAUND_BASKET = 0x0CDD46F8,
			OBJECT_CJ_LAUND_BASKET_2 = 0xF40475E7,
			OBJECT_CJ_LAUND_BENCH = 0xDC2B1AC4,
			OBJECT_CJ_LAUND_BENCH_2 = 0x5DE3A627,
			OBJECT_CJ_LAUND_COUNTER_1 = 0x0CC839E3,
			OBJECT_CJ_LAUND_DETAILS = 0x666C884D,
			OBJECT_CJ_LAUND_SIGN_1 = 0x88DC9745,
			OBJECT_CJ_LAUND_SIGN_2 = 0x916CA865,
			OBJECT_CJ_LAUND_SIGN_3 = 0xE3AACCE0,
			OBJECT_CJ_LAUND_SIGN_4 = 0x649F4ECB,
			OBJECT_CJ_LAUND_SIGN_5 = 0x701565B7,
			OBJECT_CJ_LAW_FRONTDOOR_L = 0xF8006406,
			OBJECT_CJ_LAW_FRONTDOOR_R = 0xDC1BAC55,
			OBJECT_CJ_LD_DISKBOX = 0xE498C88B,
			OBJECT_CJ_LD_GARAGE_DOOR = 0x261A2160,
			OBJECT_CJ_LD_MET_DOOR_L = 0x571AE7DD,
			OBJECT_CJ_LD_MET_DOOR_R = 0x7B3B301D,
			OBJECT_CJ_LD_POOLBALL_1 = 0xF45AB5AE,
			OBJECT_CJ_LD_POOLBALL_10 = 0x78DF49DD,
			OBJECT_CJ_LD_POOLBALL_11 = 0x8A40ECA0,
			OBJECT_CJ_LD_POOLBALL_12 = 0x575106C1,
			OBJECT_CJ_LD_POOLBALL_13 = 0x69A72B6D,
			OBJECT_CJ_LD_POOLBALL_14 = 0x43E45FE8,
			OBJECT_CJ_LD_POOLBALL_15 = 0xD430807A,
			OBJECT_CJ_LD_POOLBALL_16 = 0x1E6B94F7,
			OBJECT_CJ_LD_POOLBALL_2 = 0xC225D145,
			OBJECT_CJ_LD_POOLBALL_3 = 0xA06E8DD7,
			OBJECT_CJ_LD_POOLBALL_4 = 0x1D90081C,
			OBJECT_CJ_LD_POOLBALL_5 = 0x2BF224E0,
			OBJECT_CJ_LD_POOLBALL_6 = 0x091BDF30,
			OBJECT_CJ_LD_POOLBALL_7 = 0x175A7BAD,
			OBJECT_CJ_LD_POOLBALL_8 = 0x69F3A0EE,
			OBJECT_CJ_LD_POOLBALL_9 = 0x3BA1C44B,
			OBJECT_CJ_LD_SKEL_1 = 0xC2F91B5F,
			OBJECT_CJ_LEAF_1 = 0x65C36EBA,
			OBJECT_CJ_LEAF_2 = 0xD7245186,
			OBJECT_CJ_LEAF_3 = 0x08EB3513,
			OBJECT_CJ_LEAF_4 = 0xFDEA1F11,
			OBJECT_CJ_LEAF_W = 0x0274A8A2,
			OBJECT_CJ_LEATH_B_YEL_SING = 0xBEC294C8,
			OBJECT_CJ_LIB_PICKUP = 0xAFF1D5EA,
			OBJECT_CJ_LIFE_GUARD_CHAIR = 0xD23D931D,
			OBJECT_CJ_LIFE_PRES_NY = 0x846AC159,
			OBJECT_CJ_LIFT = 0x0814606D,
			OBJECT_CJ_LIFT_2 = 0xB59A4625,
			OBJECT_CJ_LIFT_L_DOOR = 0x38869EDA,
			OBJECT_CJ_LIFT_L_DOOR_2 = 0xB1EA9638,
			OBJECT_CJ_LIFT_L_DOOR_OUT = 0xFF06C727,
			OBJECT_CJ_LIFT_L_DOOR_OUT_2 = 0xF08D13D0,
			OBJECT_CJ_LIFT_OUTER = 0xFE8296EB,
			OBJECT_CJ_LIFT_OUTER_2 = 0x5FA0E9CD,
			OBJECT_CJ_LIFT_R_DOOR = 0x836A630A,
			OBJECT_CJ_LIFT_R_DOOR_2 = 0x36CFFF15,
			OBJECT_CJ_LIFT_R_DOOR_OUT = 0x636BA470,
			OBJECT_CJ_LIFT_R_DOOR_OUT_2 = 0x6F698DD4,
			OBJECT_CJ_LIFT_RUNNERS_2 = 0xB059FB2B,
			OBJECT_CJ_LIFT_SWITCH = 0xF8C61CE0,
			OBJECT_CJ_LIFT_SWITCHDN = 0x20C1A912,
			OBJECT_CJ_LIFT_SWITCHUP = 0xAFC035DD,
			OBJECT_CJ_LIGHT_FIT42 = 0xFC04C9CB,
			OBJECT_CJ_LOBBY_PILLER = 0x749F6A62,
			OBJECT_CJ_LOGO_BLOCK_1 = 0xEABAD99D,
			OBJECT_CJ_LOGO_BLOCK_2 = 0xFC6F7D06,
			OBJECT_CJ_LOGO_BLOCK_3 = 0xCC6D9D03,
			OBJECT_CJ_MAIN_ROLLER = 0x94141BDC,
			OBJECT_CJ_MATRESS_1 = 0xC8DF9328,
			OBJECT_CJ_MATRESS_2 = 0xBB24F7B3,
			OBJECT_CJ_MC_DOOR_1 = 0x7638B2E3,
			OBJECT_CJ_MED_SHAD_1 = 0x44D226C3,
			OBJECT_CJ_MED_SINK_3 = 0x380944B1,
			OBJECT_CJ_MED_TOILET_2 = 0x4140A534,
			OBJECT_CJ_MENU_1 = 0xDCD23B8A,
			OBJECT_CJ_MENU_2 = 0xEA7956D8,
			OBJECT_CJ_MH_CP_POST1 = 0x10DA2D6B,
			OBJECT_CJ_MICRO1 = 0xA46D3EAC,
			OBJECT_CJ_MICRO2 = 0x577BA4C6,
			OBJECT_CJ_MICRO4 = 0x748ADF1C,
			OBJECT_CJ_MILK_4 = 0xD7396014,
			OBJECT_CJ_MINCER = 0x44DE313B,
			OBJECT_CJ_MINI_BOMB = 0xB6732F57,
			OBJECT_CJ_MIS_RUB_FILE = 0x5DED007A,
			OBJECT_CJ_MISION_DOOR_1 = 0xF12751DC,
			OBJECT_CJ_MK_DRUG_BAG = 0x5CD48548,
			OBJECT_CJ_MK_DRUG_BAG2 = 0xC4555BDF,
			OBJECT_CJ_MOBILE_1 = 0x0ED04C49,
			OBJECT_CJ_MOBILE_3 = 0xB37B15A0,
			OBJECT_CJ_MOBILE_HAND_1 = 0x9306A8C6,
			OBJECT_CJ_MON2 = 0xB24DCB3B,
			OBJECT_CJ_MP_FACT_DOOR_2 = 0xA289AAA3,
			OBJECT_CJ_MUMS_VASE = 0xA477525C,
			OBJECT_CJ_NEIL_BAR_ARML_D = 0xCC2B29D2,
			OBJECT_CJ_NEIL_BAR_ARMR_D = 0xC1A02C64,
			OBJECT_CJ_NEIL_BARRIER_ARML = 0xEE3CC747,
			OBJECT_CJ_NEIL_BARRIER_ARMR = 0x2300EB07,
			OBJECT_CJ_NEIL_BARRIER_BASE = 0x0145C734,
			OBJECT_CJ_NEW_ATM = 0x9A339812,
			OBJECT_CJ_NEW_BIN = 0xD51B0BE3,
			OBJECT_CJ_NEW_CHINA_DOOR_L = 0x43AF35C4,
			OBJECT_CJ_NEW_CHINA_DOOR_R = 0xCDC2CA01,
			OBJECT_CJ_NEW_LAW_CHAIR1 = 0x09978B06,
			OBJECT_CJ_NEW_LAW_SEAT_1 = 0x6A423FEE,
			OBJECT_CJ_NEW_LAW_SEAT_3 = 0x60622C1E,
			OBJECT_CJ_NF_GARAGE_DOOR = 0x0B125295,
			OBJECT_CJ_NF_GARAGE_DOOR2 = 0xB746D49C,
			OBJECT_CJ_NL_IMPOSTER = 0xD22E2866,
			OBJECT_CJ_NOODLE_1 = 0xECC1DB60,
			OBJECT_CJ_NOODLE_2 = 0xDE843EE5,
			OBJECT_CJ_NOODLE_3 = 0xAF51E081,
			OBJECT_CJ_NOODLE_4 = 0xA117440C,
			OBJECT_CJ_NS_I_FLAG1 = 0xC25AC9A7,
			OBJECT_CJ_NUM_0 = 0xD9D8E6DF,
			OBJECT_CJ_NUM_1 = 0xCC12CB53,
			OBJECT_CJ_NUM_2 = 0xC34C39C6,
			OBJECT_CJ_NUM_3 = 0xA78D0248,
			OBJECT_CJ_NUM_4 = 0x0EA0506D,
			OBJECT_CJ_NUM_5 = 0x40D434D8,
			OBJECT_CJ_NUM_6 = 0xFC21AB70,
			OBJECT_CJ_NUM_7 = 0xEE680FFD,
			OBJECT_CJ_NUM_8 = 0x4C014B32,
			OBJECT_CJ_NUM_9 = 0x7E342F97,
			OBJECT_CJ_NY_BIN_1 = 0xD0D3E57F,
			OBJECT_CJ_NY_ELEC1 = 0x06F56AE3,
			OBJECT_CJ_NY_ELEC8 = 0x864BE992,
			OBJECT_CJ_NY_ELEC8B = 0x4283B287,
			OBJECT_CJ_NY_PAP_DISP_1 = 0x40660491,
			OBJECT_CJ_NY_PAP_DISP_2 = 0x6E1FE004,
			OBJECT_CJ_NY_PAP_DISP_3 = 0x24684C96,
			OBJECT_CJ_NY_PAP_DISP_4 = 0x529F2903,
			OBJECT_CJ_NY_PAP_DISP_5 = 0x0A0497CF,
			OBJECT_CJ_NY_PAP_DISP_6 = 0x3642704A,
			OBJECT_CJ_NY_PAP_DISP_7 = 0xED1CDE00,
			OBJECT_CJ_NY_PAP_DISP_8 = 0x1B77BAB5,
			OBJECT_CJ_NY_PAP_DISP_9 = 0xF5B8EF14,
			OBJECT_CJ_NY_PHONE_1 = 0x2B2AD851,
			OBJECT_CJ_NY_PHONE_2 = 0x1D743CE4,
			OBJECT_CJ_NY_PHONE_3 = 0x47A1913E,
			OBJECT_CJ_NY_PHONE_4 = 0x39DFF5BB,
			OBJECT_CJ_NY_PHONE_WALL = 0xA88D3BEF,
			OBJECT_CJ_NY_POSTBOX = 0x9FEEACE1,
			OBJECT_CJ_NY_POSTBOX_2 = 0x71E683A4,
			OBJECT_CJ_NY_POSTBOX_B = 0x836F26B9,
			OBJECT_CJ_NY_POSTBOX_B_GRAF = 0x747FCEC3,
			OBJECT_CJ_NY_POSTBOX_GRAF = 0x5B2A8907,
			OBJECT_CJ_NY_SCAFF_1 = 0x7ED84557,
			OBJECT_CJ_NY_SCAFF_1B = 0x24804C9B,
			OBJECT_CJ_NY_SCAFF01 = 0xBC92999A,
			OBJECT_CJ_NY_SCAFF04 = 0x304180F2,
			OBJECT_CJ_NY_SIGN_11 = 0xBFF7C1E9,
			OBJECT_CJ_NY_SIGN_12 = 0xEDCE1D95,
			OBJECT_CJ_NY_SIGN_14 = 0x3534AC11,
			OBJECT_CJ_NY_SIGN_16 = 0x1AB1F6FC,
			OBJECT_CJ_NY_SIGN_17 = 0x0EABDEF0,
			OBJECT_CJ_NY_SIGN_18 = 0xFC573A47,
			OBJECT_CJ_NY_SIGN_6 = 0x52555114,
			OBJECT_CJ_NY_SIGN_6L = 0x875A53AB,
			OBJECT_CJ_NY_SIGN_8 = 0x39A49FB3,
			OBJECT_CJ_NY_SIGN03 = 0x9CFF7B3D,
			OBJECT_CJ_NY_SIGN1 = 0xCC1621AC,
			OBJECT_CJ_NY_SIGN2 = 0x2AFDDF7A,
			OBJECT_CJ_NYLAMP1 = 0x9A978A05,
			OBJECT_CJ_NYLAMP2 = 0x3D4E4F74,
			OBJECT_CJ_NYLAMP2B = 0x0F1C59B2,
			OBJECT_CJ_O2_TANK = 0xD8B31F4F,
			OBJECT_CJ_OFF_SUP_1 = 0x03D5C506,
			OBJECT_CJ_OFF_SUP_3 = 0xBDC7B8EB,
			OBJECT_CJ_OFF_SUP_4 = 0x837F445B,
			OBJECT_CJ_OFF_SUP_5 = 0xE14CFFF5,
			OBJECT_CJ_OFF_SUP_7 = 0x76702A3D,
			OBJECT_CJ_OFF_SUP_SHELF = 0xF2349884,
			OBJECT_CJ_OFF2_LIC_1_L = 0xC75AD808,
			OBJECT_CJ_OIL_DRUM = 0x5DF29651,
			OBJECT_CJ_OIL_DRUM_2 = 0x7208DB8E,
			OBJECT_CJ_OIL_DRUM_3 = 0xC63083DC,
			OBJECT_CJ_OIL_DRUM_4 = 0xD79E26B7,
			OBJECT_CJ_OIL_TIN_1 = 0xCD0F256D,
			OBJECT_CJ_OIL_TIN_2 = 0xBB5081F0,
			OBJECT_CJ_OLD_BOAT_1 = 0x7F131EE0,
			OBJECT_CJ_OLD_OFFICE = 0xA4484746,
			OBJECT_CJ_P_CABIN_STEPS = 0x1243D07A,
			OBJECT_CJ_P_POT_1 = 0x0371DB28,
			OBJECT_CJ_P_POT_4 = 0x873EE2B8,
			OBJECT_CJ_P_TV_1 = 0x3A25BD83,
			OBJECT_CJ_P_TV_2 = 0x7C80422B,
			OBJECT_CJ_PAINT_POT_1 = 0x9F730F70,
			OBJECT_CJ_PAINT_POT_2 = 0xA9BA23FE,
			OBJECT_CJ_PAINT_POT_3 = 0xBAF0C66B,
			OBJECT_CJ_PALLET_TROLLY_1 = 0x35AC3BC2,
			OBJECT_CJ_PALLET_TROLLY_2 = 0x27229EAF,
			OBJECT_CJ_PALLET_TROLLY_3 = 0xC875E15B,
			OBJECT_CJ_PALLET_TROLLY_4 = 0xBAC345F6,
			OBJECT_CJ_PALLET_TROLLY_5 = 0xEBF6A85C,
			OBJECT_CJ_PALLET_TROLLY_6 = 0xDE390CE1,
			OBJECT_CJ_PARKING_FRAME_1 = 0xAF233EA4,
			OBJECT_CJ_PARKING_FRAME_2 = 0xBCE1DA21,
			OBJECT_CJ_PARKING_FRAME_3 = 0x29FDB457,
			OBJECT_CJ_PARKING_FRAME_4 = 0x39BB53D2,
			OBJECT_CJ_PARKING_HUT_1 = 0xA271CDBC,
			OBJECT_CJ_PARKING_HUT_2 = 0x83A1901C,
			OBJECT_CJ_PARKING_SIGN_1 = 0xD3B52D51,
			OBJECT_CJ_PARKING_SIGN_2 = 0x00A70734,
			OBJECT_CJ_PARKING_SIGN_3 = 0x0EE1A3A9,
			OBJECT_CJ_PAVE_EXAUST = 0xB26A3283,
			OBJECT_CJ_PER_DOOR_L = 0x0380B821,
			OBJECT_CJ_PER_DOOR_R = 0x192E637C,
			OBJECT_CJ_PHONE_OFF = 0x8FF301F7,
			OBJECT_CJ_PIGEON_05 = 0xF2CFF3E4,
			OBJECT_CJ_PIGEON_06 = 0x1B31C4AB,
			OBJECT_CJ_PIGEON_07 = 0x0962210C,
			OBJECT_CJ_PIGEON_08 = 0x579FBD86,
			OBJECT_CJ_PIGEON_1 = 0x98952AEB,
			OBJECT_CJ_PILLER_INDUS = 0x9B57B57B,
			OBJECT_CJ_PILLER_INDUS_2 = 0x9AA3391F,
			OBJECT_CJ_PING_PONG = 0x54AAE979,
			OBJECT_CJ_PIPE_BASE = 0xC0644D33,
			OBJECT_CJ_PLANE_1 = 0x466677F7,
			OBJECT_CJ_PLANE_1B = 0x223EF4DC,
			OBJECT_CJ_PLANE_COL = 0xC6E875E7,
			OBJECT_CJ_PLANTPOT1 = 0xF4DC3DBF,
			OBJECT_CJ_PLANTPOT2 = 0x465DE0BD,
			OBJECT_CJ_PLANTPOT3 = 0x186E04DE,
			OBJECT_CJ_PLASTIC_CUPS = 0x28635F9B,
			OBJECT_CJ_PLASTIC_CUPS_2 = 0x4AFDE31E,
			OBJECT_CJ_PLASTIC_TRAY = 0xF3BDACAE,
			OBJECT_CJ_POOF4 = 0x8419E44D,
			OBJECT_CJ_POOL_SHADOW = 0x2C43C27E,
			OBJECT_CJ_PORTA_CAB_2LOD = 0xDD85106B,
			OBJECT_CJ_PORTA_CABIN_1 = 0x4C3399C2,
			OBJECT_CJ_PORTA_CABIN_2 = 0x1B21379E,
			OBJECT_CJ_PORTA_CABIN_3 = 0x2766D029,
			OBJECT_CJ_POSTERS_2 = 0x3970D0DE,
			OBJECT_CJ_POT_1 = 0x16AF719B,
			OBJECT_CJ_POT_10 = 0x95F65099,
			OBJECT_CJ_POT_2 = 0xE8F8962E,
			OBJECT_CJ_POT_3 = 0x87FB5431,
			OBJECT_CJ_POT_4 = 0x9DC17FBD,
			OBJECT_CJ_POT_5 = 0x277F933B,
			OBJECT_CJ_POT_6 = 0x393D36B6,
			OBJECT_CJ_POT_8 = 0xA2B689A7,
			OBJECT_CJ_POT_9 = 0x6C699D0E,
			OBJECT_CJ_PRAM = 0xD37D3A83,
			OBJECT_CJ_PROC_BAN = 0xBDF4C880,
			OBJECT_CJ_PROC_BAN_B = 0x4F0F014A,
			OBJECT_CJ_PROC_BEER_1 = 0x7CC1B852,
			OBJECT_CJ_PROC_BEER_2 = 0xA5FF8ACD,
			OBJECT_CJ_PROC_BEER_W = 0x46B4CC5D,
			OBJECT_CJ_PROC_BRICK = 0xFE520830,
			OBJECT_CJ_PROC_BRICK10 = 0x0185F223,
			OBJECT_CJ_PROC_BRICK2 = 0xB49F6A82,
			OBJECT_CJ_PROC_BRICK3 = 0xA712CF69,
			OBJECT_CJ_PROC_BRICK4 = 0x4A4915EB,
			OBJECT_CJ_PROC_BRICK5 = 0x5795B084,
			OBJECT_CJ_PROC_BRICK6 = 0x6D5BDC10,
			OBJECT_CJ_PROC_BRICK7 = 0x7F357FC3,
			OBJECT_CJ_PROC_BRICK8 = 0x82EE8735,
			OBJECT_CJ_PROC_BRICK9 = 0x9119238A,
			OBJECT_CJ_PROC_BS_BAG = 0x395891BA,
			OBJECT_CJ_PROC_BS_CHIP = 0x4287E310,
			OBJECT_CJ_PROC_BS_CUP = 0x8C5E2354,
			OBJECT_CJ_PROC_BS_CUP2 = 0x80448E0D,
			OBJECT_CJ_PROC_BS_LID = 0x909A5EC4,
			OBJECT_CJ_PROC_BS_NAP = 0xD23671F1,
			OBJECT_CJ_PROC_BS_STRAW = 0xA2C093C7,
			OBJECT_CJ_PROC_CARD1 = 0xC3E378BE,
			OBJECT_CJ_PROC_CARD2 = 0x6E854DFF,
			OBJECT_CJ_PROC_CARD3 = 0x4FC4107D,
			OBJECT_CJ_PROC_COFFEE_W = 0x6556682B,
			OBJECT_CJ_PROC_COFFEE1 = 0x9030956F,
			OBJECT_CJ_PROC_FAG1 = 0x804F0B31,
			OBJECT_CJ_PROC_FAG2 = 0xC3679165,
			OBJECT_CJ_PROC_FAG3 = 0xF5AD75F0,
			OBJECT_CJ_PROC_FAGP = 0x7776F9CD,
			OBJECT_CJ_PROC_FAGP_2 = 0x3C4559EE,
			OBJECT_CJ_PROC_FAGP_W = 0xB4B3CAF9,
			OBJECT_CJ_PROC_GLASS = 0x496EB403,
			OBJECT_CJ_PROC_GLASS_2 = 0x5EB98E4E,
			OBJECT_CJ_PROC_GLASS_3 = 0x4E54ED85,
			OBJECT_CJ_PROC_GLASS_4 = 0xD316F6FF,
			OBJECT_CJ_PROC_HOSE = 0x18C2BCBC,
			OBJECT_CJ_PROC_HOSE_W = 0x49103714,
			OBJECT_CJ_PROC_HOSE2 = 0xD4D1F137,
			OBJECT_CJ_PROC_HOSE3 = 0x6B9F1ED3,
			OBJECT_CJ_PROC_INT_RUB = 0x7BFCD48F,
			OBJECT_CJ_PROC_INT_RUB2 = 0xAFEE4BB0,
			OBJECT_CJ_PROC_JONNY = 0x6B289CA3,
			OBJECT_CJ_PROC_MILK = 0x42D9FA7C,
			OBJECT_CJ_PROC_NEEDLE = 0x2ABE30C9,
			OBJECT_CJ_PROC_PAIN3 = 0x3EB33469,
			OBJECT_CJ_PROC_PAINT = 0xB64D23B7,
			OBJECT_CJ_PROC_PAINT2 = 0x6E364E49,
			OBJECT_CJ_PROC_PANTS = 0x13537B49,
			OBJECT_CJ_PROC_PAPER = 0x7C00EC77,
			OBJECT_CJ_PROC_PAPER2 = 0xBDED7045,
			OBJECT_CJ_PROC_PAPER3 = 0x222F38CB,
			OBJECT_CJ_PROC_PAPER4 = 0x77ECE449,
			OBJECT_CJ_PROC_PAPER5 = 0x46BF01EE,
			OBJECT_CJ_PROC_PEACH = 0xE3EB66D5,
			OBJECT_CJ_PROC_PLANT_1 = 0xF0EBA19D,
			OBJECT_CJ_PROC_PLANT_10 = 0xAAE1797F,
			OBJECT_CJ_PROC_PLANT_11 = 0xB8329419,
			OBJECT_CJ_PROC_PLANT_12 = 0xC6703094,
			OBJECT_CJ_PROC_PLANT_13 = 0xB89794EF,
			OBJECT_CJ_PROC_PLANT_14 = 0xC6513062,
			OBJECT_CJ_PROC_PLANT_15 = 0xD61B4FF6,
			OBJECT_CJ_PROC_PLANT_16 = 0xE3DDEB7B,
			OBJECT_CJ_PROC_PLANT_17 = 0x2AA7F90E,
			OBJECT_CJ_PROC_PLANT_18 = 0xFF6EA29C,
			OBJECT_CJ_PROC_PLANT_19 = 0x4623B005,
			OBJECT_CJ_PROC_PLANT_2 = 0x02AA451A,
			OBJECT_CJ_PROC_PLANT_20 = 0xB0D86281,
			OBJECT_CJ_PROC_PLANT_21 = 0xE9E5549E,
			OBJECT_CJ_PROC_PLANT_22 = 0xF798F005,
			OBJECT_CJ_PROC_PLANT_23 = 0xCE869DE1,
			OBJECT_CJ_PROC_PLANT_24 = 0xDC45395E,
			OBJECT_CJ_PROC_PLANT_25 = 0x30ECE2AC,
			OBJECT_CJ_PROC_PLANT_26 = 0x4E611D94,
			OBJECT_CJ_PROC_PLANT_27 = 0x15242B1B,
			OBJECT_CJ_PROC_PLANT_28 = 0x22E5469D,
			OBJECT_CJ_PROC_PLANT_29 = 0x4DF49CBF,
			OBJECT_CJ_PROC_PLANT_3 = 0xCF94DEF0,
			OBJECT_CJ_PROC_PLANT_30 = 0x9BD55927,
			OBJECT_CJ_PROC_PLANT_4 = 0xE13F0244,
			OBJECT_CJ_PROC_PLANT_5 = 0xAA24140F,
			OBJECT_CJ_PROC_PLANT_6 = 0xBDDD3B81,
			OBJECT_CJ_PROC_PLANT_7 = 0xA6AD8D1E,
			OBJECT_CJ_PROC_PLANT_8 = 0xB86DB09E,
			OBJECT_CJ_PROC_PLANT_9 = 0x85824AC8,
			OBJECT_CJ_PROC_PLUM = 0x741C8173,
			OBJECT_CJ_PROC_POST10 = 0xE675DF9C,
			OBJECT_CJ_PROC_REC1 = 0xDEAB729D,
			OBJECT_CJ_PROC_REC2 = 0xB4DC1EFF,
			OBJECT_CJ_PROC_REC3 = 0xB7FD2541,
			OBJECT_CJ_PROC_REC4 = 0x064E4216,
			OBJECT_CJ_PROC_REC5 = 0x8B734C2E,
			OBJECT_CJ_PROC_ROPE1 = 0xE58827B4,
			OBJECT_CJ_PROC_ROPE2 = 0x2D8E37BF,
			OBJECT_CJ_PROC_SLAB1 = 0x54FD24A9,
			OBJECT_CJ_PROC_SLAB2 = 0x50431B35,
			OBJECT_CJ_PROC_SLAB3 = 0x8290FFD0,
			OBJECT_CJ_PROC_SLAB4 = 0x6BBDD22A,
			OBJECT_CJ_PROC_SLAB5 = 0x1E17B6DF,
			OBJECT_CJ_PROC_SLAB6 = 0x13AD2206,
			OBJECT_CJ_PROC_SOCK = 0x141702FA,
			OBJECT_CJ_PROC_SOCK2 = 0x802E0BD0,
			OBJECT_CJ_PROC_STONE1 = 0xED3ADF06,
			OBJECT_CJ_PROC_STONE2 = 0xF5EBF068,
			OBJECT_CJ_PROC_STONE3 = 0x7A4EF930,
			OBJECT_CJ_PROC_TICKET1 = 0xC7E1D2FC,
			OBJECT_CJ_PROC_TICKET2 = 0x1D147D50,
			OBJECT_CJ_PROC_TIN = 0x4D64ECE2,
			OBJECT_CJ_PROC_TIN2 = 0x73B108D9,
			OBJECT_CJ_PROC_TIN3 = 0xBE861E82,
			OBJECT_CJ_PROC_TIN4 = 0xA810F198,
			OBJECT_CJ_PROC_TIN5 = 0x65C3ED13,
			OBJECT_CJ_PROC_TOWEL = 0x337F5CAE,
			OBJECT_CJ_PROC_TOWEL2 = 0xD4236B2E,
			OBJECT_CJ_PROC_TSHIRT = 0xF0C9376C,
			OBJECT_CJ_PROC_WEED = 0xE1325AD1,
			OBJECT_CJ_PROC_WEED2 = 0xAD9FE11E,
			OBJECT_CJ_PROC_WHEEL = 0x28E5DB2C,
			OBJECT_CJ_PROC_WOOD = 0x6A530495,
			OBJECT_CJ_PROC_WOOD_W = 0x3DA62F82,
			OBJECT_CJ_PROC_WOOD_W2 = 0xB2EDFA43,
			OBJECT_CJ_PROC_WOOD_W3 = 0xA54B5EFE,
			OBJECT_CJ_PROC_WOOD10 = 0x4AE385AF,
			OBJECT_CJ_PROC_WOOD11 = 0x5C7EA8E5,
			OBJECT_CJ_PROC_WOOD12 = 0x6EB44D50,
			OBJECT_CJ_PROC_WOOD13 = 0x80FA71DC,
			OBJECT_CJ_PROC_WOOD2 = 0x60BB9793,
			OBJECT_CJ_PROC_WOOD3 = 0x8B5FECDB,
			OBJECT_CJ_PROC_WOOD4 = 0x7D0CD035,
			OBJECT_CJ_PROC_WOOD5 = 0x27BBA590,
			OBJECT_CJ_PROC_WOOD6 = 0x1991893C,
			OBJECT_CJ_PROC_WOOD7 = 0xE41B9E51,
			OBJECT_CJ_PROC_WOOD8 = 0x36E543E3,
			OBJECT_CJ_PROC_WOOD9 = 0x879DE50B,
			OBJECT_CJ_PROP_AK47 = 0x8079978D,
			OBJECT_CJ_PROP_EAGLE = 0x975BD0EA,
			OBJECT_CJ_PROP_GLOCK = 0x1A69CE40,
			OBJECT_CJ_PROP_GRENADE = 0x501811B6,
			OBJECT_CJ_PROP_KNIFE = 0x9D2A7EF8,
			OBJECT_CJ_PROP_M4 = 0x03ABE6C1,
			OBJECT_CJ_PROP_MOLOTOV = 0x85D8AFBE,
			OBJECT_CJ_PROP_MP5 = 0x507EDD6D,
			OBJECT_CJ_PROP_PSG1 = 0x73B33124,
			OBJECT_CJ_PROP_PUMPSHOT = 0xF086A873,
			OBJECT_CJ_PROP_RIFLE = 0xFE424207,
			OBJECT_CJ_PROP_RPG = 0x579384A4,
			OBJECT_CJ_PROP_SHOTGUN = 0x3C809FE8,
			OBJECT_CJ_PROP_UZI = 0xFA292061,
			OBJECT_CJ_PUFF_BLACK_SING = 0xD03FD4A8,
			OBJECT_CJ_PUFF_GREEN_SING = 0xFC08709B,
			OBJECT_CJ_PYLON_1 = 0x96D194B2,
			OBJECT_CJ_PYLON_2 = 0x078CF627,
			OBJECT_CJ_QUESTION_MARK = 0x8C938A03,
			OBJECT_CJ_R_ICON_ARROW = 0x877041B0,
			OBJECT_CJ_R_ICON_FLAG = 0xE9716B9E,
			OBJECT_CJ_RACE_BOUY_1 = 0xE946E6BA,
			OBJECT_CJ_RACE_BOUY_2 = 0xD6EC4205,
			OBJECT_CJ_RADIATOR_4 = 0xA869946F,
			OBJECT_CJ_RADIATOR_MED = 0x7329DF5E,
			OBJECT_CJ_RADIATOR_OLD = 0x5385880F,
			OBJECT_CJ_RADIO_2 = 0x887D13B5,
			OBJECT_CJ_REDWOOD_BOX_1 = 0xB436087D,
			OBJECT_CJ_REST_CHAIR = 0x52F06A8B,
			OBJECT_CJ_REST_CHAIR_2 = 0xCAFFAAB2,
			OBJECT_CJ_REST_TABLE = 0x27A925A2,
			OBJECT_CJ_REST_TABLE_2 = 0x5A50D265,
			OBJECT_CJ_REST_TABLE_4 = 0x797610AF,
			OBJECT_CJ_REST_TABLE_5 = 0xAB44F44C,
			OBJECT_CJ_REST_UMB = 0x1CF1E332,
			OBJECT_CJ_REST_UMB_10 = 0x9E0BBECD,
			OBJECT_CJ_REST_UMB_11 = 0x1E2E3F14,
			OBJECT_CJ_REST_UMB_2 = 0xC32B54D2,
			OBJECT_CJ_REST_UMB_3 = 0xCDC86A0C,
			OBJECT_CJ_REST_UMB_4 = 0xE08E0F97,
			OBJECT_CJ_REST_UMB_5 = 0xEFAFADDA,
			OBJECT_CJ_REST_UMB_6 = 0xFC18C6AC,
			OBJECT_CJ_REST_UMB_7 = 0xEEF0AC28,
			OBJECT_CJ_REST_UMB_8 = 0xFAB9C3BA,
			OBJECT_CJ_REST_UMB_9 = 0x0B986577,
			OBJECT_CJ_RING_ICON = 0x353E5239,
			OBJECT_CJ_RING_ICON_2 = 0xAEE195AB,
			OBJECT_CJ_ROCKET = 0x48FA2738,
			OBJECT_CJ_ROW_REMOVER = 0x57EE223B,
			OBJECT_CJ_RS_EAR_DEF = 0x336ECF0F,
			OBJECT_CJ_RUB_1 = 0x968085B5,
			OBJECT_CJ_RUB_10 = 0xB374062B,
			OBJECT_CJ_RUB_11 = 0x0C3037A2,
			OBJECT_CJ_RUB_2 = 0xE7DA2867,
			OBJECT_CJ_RUB_3 = 0xFA17CCE2,
			OBJECT_CJ_RUB_4 = 0x420CDCCB,
			OBJECT_CJ_RUB_5 = 0x4D4AF347,
			OBJECT_CJ_RUB_6 = 0x178207B6,
			OBJECT_CJ_RUB_7 = 0x30C33A38,
			OBJECT_CJ_RUB_8 = 0x19138AE5,
			OBJECT_CJ_RUB_9 = 0x2AD52E68,
			OBJECT_CJ_RUB_PILE_1 = 0x9B7E6897,
			OBJECT_CJ_RUB_PILE_10 = 0xEC5DE4E0,
			OBJECT_CJ_RUB_PILE_11 = 0x5178AF10,
			OBJECT_CJ_RUB_PILE_12 = 0x3F920B43,
			OBJECT_CJ_RUB_PILE_13 = 0x6AC461A7,
			OBJECT_CJ_RUB_PILE_15 = 0x18673CEE,
			OBJECT_CJ_RUB_PILE_16 = 0x06CA99B5,
			OBJECT_CJ_RUB_PILE_17 = 0x33F8F411,
			OBJECT_CJ_RUB_PILE_18 = 0x2227506E,
			OBJECT_CJ_RUB_PILE_19 = 0xBECD89BC,
			OBJECT_CJ_RUB_PILE_2 = 0xAD5A0C52,
			OBJECT_CJ_RUB_PILE_20 = 0xF839FD78,
			OBJECT_CJ_RUB_PILE_21 = 0x7AA30250,
			OBJECT_CJ_RUB_PILE_22 = 0xB9667FD6,
			OBJECT_CJ_RUB_PILE_23 = 0xA61FD949,
			OBJECT_CJ_RUB_PILE_25 = 0x517DB002,
			OBJECT_CJ_RUB_PILE_3 = 0x80BBB312,
			OBJECT_CJ_RUB_PILE_4 = 0x92FE5797,
			OBJECT_CJ_RUB_PILE_5 = 0x4B01479E,
			OBJECT_CJ_RUB_PILE_6 = 0x74389A0C,
			OBJECT_CJ_RUB_PILE_7 = 0x2EA28EE1,
			OBJECT_CJ_RUB_PILE_8 = 0x39E8A56D,
			OBJECT_CJ_RUB_PILE_9 = 0x31C81530,
			OBJECT_CJ_RUB_W = 0xBC72518C,
			OBJECT_CJ_RUS_DOOR_1 = 0x1686E847,
			OBJECT_CJ_RUS_DOOR_2 = 0xE041FB8A,
			OBJECT_CJ_RUS_SHADOW = 0x104FC738,
			OBJECT_CJ_RW_SIGN1 = 0x117EA0BE,
			OBJECT_CJ_RW_SIGN2 = 0xFF287C12,
			OBJECT_CJ_RW_SIGN3 = 0x36FC6BB9,
			OBJECT_CJ_S_BOT_SM = 0x396D889C,
			OBJECT_CJ_S_L_BOT_SM = 0xA99FD2F8,
			OBJECT_CJ_SAND_TIMER = 0x3B330BA3,
			OBJECT_CJ_SAUS_1 = 0x344D1EFD,
			OBJECT_CJ_SCAFF_2_COVER = 0x3A3C14AE,
			OBJECT_CJ_SCAFF_COVER = 0x67944DA0,
			OBJECT_CJ_SCAFF_COVERB = 0x10D85062,
			OBJECT_CJ_SCAFFOLD = 0xE5AEEA42,
			OBJECT_CJ_SCAFFOLD_03 = 0x3445EAD7,
			OBJECT_CJ_SCAFFOLD_2 = 0xB97CEFFF,
			OBJECT_CJ_SCAFFOLD_3 = 0xA72D4B60,
			OBJECT_CJ_SCAFFOLD_3B = 0x32930A75,
			OBJECT_CJ_SCAFFOLD_4 = 0xD4E7A6D4,
			OBJECT_CJ_SCAFFOLD_4B = 0x23B86A8C,
			OBJECT_CJ_SCAFFOLD_5 = 0xADA1584C,
			OBJECT_CJ_SCAFFOLD_5B = 0x907DAF71,
			OBJECT_CJ_SCAFFOLD_6 = 0xDC6FB5E8,
			OBJECT_CJ_SCAFFOLD_7 = 0xF91FEF48,
			OBJECT_CJ_SCHEDULE_1 = 0xC8621CFC,
			OBJECT_CJ_SEC_BARRIER = 0x2EF345D5,
			OBJECT_CJ_SEC_BARRIER_2 = 0x25825C97,
			OBJECT_CJ_SEC_BARRIER_3 = 0x1337B802,
			OBJECT_CJ_SEC_BARRIER_4 = 0x7B0087EE,
			OBJECT_CJ_SEC_SIGN_2 = 0xDD16F3A4,
			OBJECT_CJ_SECURITY_HUT_1 = 0x31EE5E2B,
			OBJECT_CJ_SEX_TV2 = 0xDC2194FA,
			OBJECT_CJ_SHOOT_T_DOOR = 0x411E7CC1,
			OBJECT_CJ_SHOP_DOOR_1 = 0xF6754B91,
			OBJECT_CJ_SHOP_MIRROR = 0x724DA894,
			OBJECT_CJ_SHOP_SHELF_2 = 0x16DE5527,
			OBJECT_CJ_SHOP_TILL_1 = 0x649DC236,
			OBJECT_CJ_SHOP_TILL_TRAY = 0xB13CE393,
			OBJECT_CJ_SHOPWIN_1 = 0xF778301A,
			OBJECT_CJ_SHOWER = 0x7787B2C1,
			OBJECT_CJ_SHOWER_RACK = 0x8085EAD7,
			OBJECT_CJ_SHUTTER_1 = 0x12AD398D,
			OBJECT_CJ_SHUTTER_4 = 0x00681503,
			OBJECT_CJ_SKANK_COUNTER = 0x8655788C,
			OBJECT_CJ_SKANK_GLASS_02 = 0xF007B18F,
			OBJECT_CJ_SM_DAVE_DOOR = 0x25E926D1,
			OBJECT_CJ_SM_GATE_1 = 0x5B36FF1A,
			OBJECT_CJ_SM_GATE_1GATE = 0x8749719E,
			OBJECT_CJ_SMALL_BOAT_1 = 0x640E65F6,
			OBJECT_CJ_SMALL_BOAT_2 = 0x9A6852A9,
			OBJECT_CJ_SOAP_P_1 = 0xEB38494E,
			OBJECT_CJ_SOAP_P_2 = 0x627C37D8,
			OBJECT_CJ_SPEAKER_10 = 0xF3AE24E9,
			OBJECT_CJ_SPEAKER_1B = 0xBA9BB2B9,
			OBJECT_CJ_SPEAKER_4 = 0xE7AE78EA,
			OBJECT_CJ_SPEAKER_5 = 0x78FD1B7D,
			OBJECT_CJ_SPEAKER_9 = 0xBFD6A92F,
			OBJECT_CJ_SPOON = 0xD299B999,
			OBJECT_CJ_SPRITE_BOTTLE = 0x797DD801,
			OBJECT_CJ_SPRUNK_BOTTLE2 = 0x2E9236DC,
			OBJECT_CJ_SPRUNK_BOX_1 = 0x7FC5F693,
			OBJECT_CJ_SPRUNK_BOX_2 = 0x242CBF32,
			OBJECT_CJ_SPRUNK_L_BOTTLE2 = 0xB53AC8F7,
			OBJECT_CJ_SPRUNKBOX = 0x1CF1D9D8,
			OBJECT_CJ_SUTTER_3 = 0xF5A16A96,
			OBJECT_CJ_SWANK_COUNTER_1 = 0x3C4F755A,
			OBJECT_CJ_SWANK_COUNTER_2 = 0x2A95D1E7,
			OBJECT_CJ_SWANK_DESK_1 = 0xC4742C90,
			OBJECT_CJ_SWANK_RACK_SM = 0x92889755,
			OBJECT_CJ_SWANK_RACK1 = 0x83711145,
			OBJECT_CJ_SWANK_RACK2 = 0x9432B2C8,
			OBJECT_CJ_SWANK_RACK3 = 0xE0234AAC,
			OBJECT_CJ_T_DOOR_BRK = 0xF5F2C70B,
			OBJECT_CJ_T_DOOR_ENG = 0x1BD24D4D,
			OBJECT_CJ_T_DOOR_VAC = 0x1849AC53,
			OBJECT_CJ_T_LIGHT_TEMP = 0x95079441,
			OBJECT_CJ_T_ROLL_DISP = 0x8D05D23D,
			OBJECT_CJ_TABLE_PARASOL = 0xDF5CD638,
			OBJECT_CJ_TABLE_TEN_BAT = 0x6972066E,
			OBJECT_CJ_TABLE_TENNIS = 0x034DBD65,
			OBJECT_CJ_TANKER = 0x71AC0D7C,
			OBJECT_CJ_TANKER_LOD = 0x86EB02F4,
			OBJECT_CJ_TANKERB = 0xFD4A3300,
			OBJECT_CJ_TAXI_METER_1 = 0x7E640649,
			OBJECT_CJ_TEA_URN = 0xBE40841B,
			OBJECT_CJ_TELGRPHPOLE = 0xADF1EB02,
			OBJECT_CJ_TELGRPHPOLE_2 = 0x8BB0BC21,
			OBJECT_CJ_TELGRPHPOLE_3 = 0x8F6BC397,
			OBJECT_CJ_TELGRPHPOLE_4 = 0xA15C6778,
			OBJECT_CJ_TELGRPHPOLE_5 = 0x32F18A9C,
			OBJECT_CJ_TELGRPHPOLE_6 = 0x44DB2E6F,
			OBJECT_CJ_TENNIS_BAT = 0x6CC0A9A2,
			OBJECT_CJ_TEST_STICKERS_1 = 0xA9D1CFB0,
			OBJECT_CJ_TEST1 = 0xAF052D80,
			OBJECT_CJ_TILE_BASE = 0xD35460CA,
			OBJECT_CJ_TILL_2 = 0x5C6D33D9,
			OBJECT_CJ_TINS_SHELF = 0x4685BBA1,
			OBJECT_CJ_TOASTER_09 = 0x85188664,
			OBJECT_CJ_TOASTER_2 = 0xBEEA9975,
			OBJECT_CJ_TOASTER_7 = 0xEAD4F12D,
			OBJECT_CJ_TOILET_BRUSH = 0x678C228F,
			OBJECT_CJ_TOILET_ROLL = 0x73A41EF2,
			OBJECT_CJ_TOWEL_DISP_3 = 0x21B46760,
			OBJECT_CJ_TRACK_SING = 0x4F71A55F,
			OBJECT_CJ_TRAY = 0x15F0829F,
			OBJECT_CJ_TRAY_BAKER = 0xD69239BB,
			OBJECT_CJ_TREE_GUARD = 0x66E87FE0,
			OBJECT_CJ_TREE_TRUNKS = 0x2F272E5A,
			OBJECT_CJ_TROLLEY_1Z = 0x11D07B58,
			OBJECT_CJ_TROLLEY_2Z = 0x575C82DB,
			OBJECT_CJ_TROLLEY_RUB = 0x413D0055,
			OBJECT_CJ_TURN_TABLE_2 = 0xF711CA07,
			OBJECT_CJ_TV_2 = 0x9F874857,
			OBJECT_CJ_TV_2_SCREEN_04 = 0xAD54AB75,
			OBJECT_CJ_TV_3 = 0x473D97C5,
			OBJECT_CJ_TV_6 = 0xDE5B4602,
			OBJECT_CJ_TV_9 = 0xC0E20B10,
			OBJECT_CJ_TV_BOX_1 = 0xD3826752,
			OBJECT_CJ_US_FLAG_1 = 0x9215C587,
			OBJECT_CJ_US_FLAG_2 = 0x8BCAB8F1,
			OBJECT_CJ_VASE_3 = 0x9A701581,
			OBJECT_CJ_VASE_7 = 0xE195A3D3,
			OBJECT_CJ_VAULT_DOOR = 0xC2CE25A5,
			OBJECT_CJ_VAULT_DOOR_DAM = 0x7E3E2959,
			OBJECT_CJ_VAULT_GATE = 0x875B64C0,
			OBJECT_CJ_VAULT_SURROUND = 0x3EDE7DF1,
			OBJECT_CJ_VEIW_TELESCOPE = 0xFFF04E87,
			OBJECT_CJ_VIDEO_2 = 0xA70C6F72,
			OBJECT_CJ_VIDEO_3 = 0xE9AFF4B8,
			OBJECT_CJ_W_BARRIER = 0xBA03D197,
			OBJECT_CJ_W_BARRIER_ARM = 0xB2C7DCAC,
			OBJECT_CJ_W_CRADLE_HARNESS = 0x8B533030,
			OBJECT_CJ_WALL_BILLBRD_1 = 0x37FACAD5,
			OBJECT_CJ_WALL_BILLBRD_2 = 0x96238725,
			OBJECT_CJ_WALL_LIGHT_2 = 0xFCB32869,
			OBJECT_CJ_WALL_LIGHT_4 = 0xD1305164,
			OBJECT_CJ_WARE_DOOR = 0xEA209F76,
			OBJECT_CJ_WASH_MAC_4 = 0x104B7979,
			OBJECT_CJ_WASH_MAC_5 = 0x857363D3,
			OBJECT_CJ_WASH_MAC_6 = 0x773FC76C,
			OBJECT_CJ_WASTE_CHUTE = 0x62088033,
			OBJECT_CJ_WASTE_CHUTE2 = 0x32FB9E21,
			OBJECT_CJ_WASTEBIN = 0x204B3D51,
			OBJECT_CJ_WASTEBIN_2 = 0xAB09B13D,
			OBJECT_CJ_WATER_BAR_1 = 0x22ABDA71,
			OBJECT_CJ_WHEELIE_1 = 0xCA377456,
			OBJECT_CJ_WHITE_CHAIR_1 = 0x1F5CF41F,
			OBJECT_CJ_WHITE_CHAIR_2 = 0xED92108A,
			OBJECT_CJ_WHITE_TABLE_1 = 0x03352336,
			OBJECT_CJ_WHOUSE_SHELF_1 = 0xAFD51970,
			OBJECT_CJ_WHOUSE_SHELF_2 = 0xE69A86FA,
			OBJECT_CJ_WHOUSE_SHELF_6 = 0x52CEDF65,
			OBJECT_CJ_WIN_CABLE = 0xBF0E2A76,
			OBJECT_CJ_WIN_CRAD_WINCH = 0x67AB0048,
			OBJECT_CJ_WIN_CRAD_WINCH03 = 0xD9BC8816,
			OBJECT_CJ_WIN_DISP_03 = 0x1970A4A3,
			OBJECT_CJ_WIN_DISP_04 = 0xF062D2C4,
			OBJECT_CJ_WINDOW_CLEANER = 0x1F5DA4E3,
			OBJECT_CJ_WINDOW_CRADLE = 0x4CD5486B,
			OBJECT_CJ_WINDOW_CRADLE_2 = 0xDF9F91C6,
			OBJECT_CJ_WINDOW_CRADLE_3 = 0xF01932B9,
			OBJECT_CJ_WINDOW_CRADLE_4 = 0x4B52E92B,
			OBJECT_CJ_WINE_2 = 0xF0E633D9,
			OBJECT_CJ_WINE_SHELF_4 = 0xEBB40F66,
			OBJECT_CJ_WL_BIB_2_LOD01 = 0x4351C51F,
			OBJECT_CJ_WL_BIB_2_LOD02 = 0x0EDD5C23,
			OBJECT_CJ_WORK_SIGN_07 = 0x9721A8A7,
			OBJECT_CJ_WORK_SIGN_07B = 0xF0BCF556,
			OBJECT_CJ_WORK_SIGN_1 = 0xD2E4333B,
			OBJECT_CJ_WORK_SIGN_2 = 0xC3AA94C8,
			OBJECT_CJ_WORK_SIGN_3 = 0xB68C7A8C,
			OBJECT_CJ_WORK_SIGN_4 = 0xA857DE23,
			OBJECT_CJ_WORK_SIGN_5 = 0x89D0A115,
			OBJECT_CJ_WORK_SIGN_6 = 0x7AA502BE,
			OBJECT_CJ_WORK_SIGN_6B = 0xCC992516,
			OBJECT_CJ_WRECK_1 = 0x780FA5FD,
			OBJECT_CJ_WRECK_2 = 0x69BA8953,
			OBJECT_CJ_WRECK_3 = 0x9B746CC6,
			OBJECT_CJ_WRECK_4 = 0x8EE453A6,
			OBJECT_CJ_WRECK_5 = 0x40CC3773,
			OBJECT_CJ_WRECK_6 = 0x32591A8D,
			OBJECT_CJ_WRECK_7 = 0x4440BE60,
			OBJECT_CJ_WRECK_8 = 0x580AE5F4,
			OBJECT_CJ_WRECK_9 = 0x495CC898,
			OBJECT_CJ_WS_LIGHT_6B = 0x67470B74,
			OBJECT_CJ_WS_STEPS = 0x62EF0CDF,
			OBJECT_CJ_WS_T_BASE_DAM = 0x53D457D3,
			OBJECT_CJ_WS_T_BASE_NORM = 0x9550E6D6,
			OBJECT_CJ_WS_TRUCK_BASE = 0x2BA9EB8F,
			OBJECT_CJ_YOG_USED = 0x8DB5E071,
			OBJECT_LEV6_BOWLBALL_B = 0x8B68187E,
			OBJECT_LEV6_BOWLBALL_G = 0xCFBBA124,
			OBJECT_LEV6_BOWLBALL_O = 0x61EAC580,
			OBJECT_LEV6_BOWLBALL_R = 0xE04A4235,
			OBJECT_LEV6_BOWLBALL_Y = 0x5F93C0C6,
			OBJECT_GB_PARK_OLD_SWING = 0x4D294E4E,
			//EPISODIC MODELS
			OBJECT_TBOGT_PARACHUTE = 0x58d6a0a0,
			OBJECT_TBOGT_GREEN_NEON = 0xD611D7B6,
			OBJECT_TBOGT_YELLOW_NEON = 0xB3AC6409,
			OBJECT_GTA_E1_LOGO_1 = 0xEBCC2D28,//GTA IV logo
			OBJECT_GTA_E1_LOGO_1B = 0xbc0cc2e8,//lost and damned logo
			OBJECT_GTA_E1_LOGO_1B2 = 0x16c8be64,
			OBJECT_CJ_BIKE_LOGO_1 = 0x8bc9e607,//first half of lost and damned bike logo
			OBJECT_CJ_BIKE_LOGO_2 = 0x7bbb45ea,//second half of lost and damned bike logo
			OBJECT_CJ_OLD_FUNFAIR_1 = 0x8babd16a,
			OBJECT_CJ_TANKERB_E2 = 0xe77cb019,
			OBJECT_E2_LUIS_HERO = 0xe1cc7333,//LUIS ACTION FIGURE
			OBJECT_CJ_IM_TV_E2_STUDIO = 0x1820a4b3,
			OBJECT_E2_BIG_SCREEN = 0x4052544d,//BIG ASS TV SCREEN
			OBJECT_E2_GAYDANCEAREA = 0xb841352a,
			OBJECT_E1_BIKE_1 = 0x66ef80b2,//BLACK CIRCLE
			OBJECT_E1_BIKE_2 = 0x5D796DC6,//RED AND BLACK CIRCLE
			OBJECT_E1_BIKE_3 = 0x4dd2ce79,//ORANGE AND BLACK CIRCLE
			OBJECT_E1_BIKE_4 = 0x13E8DAA2,//GREEN AND BLACK CIRCLE
			OBJECT_OBJECT_TBOGT_BUZZARD_ROCKET_POD = 0xFFD1528C,
			OBJECT_E2_YUSAF_BIKE = 0x2f3645e5,
			OBJECT_E2_YUSAF_HERO = 0x679db86f,
			OBJECT_E2_YUSAFDOLLAR = 0x8418a452,
			OBJECT_OBJECT_TBOGT_YACHT = 0xBBF41314,
			OBJECT_DISCOBALL_BADA = 0xFEB2FDAF,
		};

		public enum class eFloatStatistic
		{
			STAT_GAME_PROGRESS = 0,                     //Game progress
			STAT_ROMAN_LIKE = 1,                    //Roman like
			STAT_ROMAN_RESPECT = 2,                     //Roman respect
			STAT_ROMAN_MISSION_PROGRESS = 3,                //Roman mission progress
			STAT_VLAD_MISSION_PROGRESS = 4,                 //Vlad mission progress
			STAT_JACOB_LIKE = 5,                    //Jacob like
			STAT_JACOB_RESPECT = 6,                     //Jacob respect
			STAT_JACOB_MISSION_PROGRESS = 7,                //Jacob mission progress
			STAT_FAUSTIN_MISSION_PROGRESS = 8,              //Faustin mission progress
			STAT_MANNY_MISSION_PROGRESS = 9,                //Manny mission progress
			STAT_ELIZABETA_MISSION_PROGRESS = 10,               //Elizabeta mission progress
			STAT_DWAYNE_LIKE = 11,                      //Dwayne like
			STAT_DWAYNE_RESPECT = 12,                   //Dwayne respect
			STAT_DWAYNE_MISSION_PROGRESS = 13,              //Dwayne mission progress
			STAT_BRUCIE_LIKE = 14,                      //Brucie like
			STAT_BRUCIE_RESPECT = 15,                   //Brucie respect
			STAT_BRUCIE_MISSION_PROGRESS = 16,              //Brucie mission progress
			STAT_PLAYBOY_MISSION_PROGRESS = 17,             //Playboy mission progress
			STAT_FRANCIS_MISSION_PROGRESS = 18,             //Francis mission progress
			STAT_ULPC_MISSION_PROGRESS = 19,                //U.L.P.C. mission progress
			STAT_PACKIE_LIKE = 20,                      //Packie like
			STAT_PACKIE_RESPECT = 21,                   //Packie respect
			STAT_PACKIE_MISSION_PROGRESS = 22,              //Packie mission progress
			STAT_RAY_MISSION_PROGRESS = 23,                 //Ray mission progress
			STAT_GERRY_MISSION_PROGRESS = 24,               //Gerry mission progress
			STAT_DERRICK_MISSION_PROGRESS = 25,             //Derrick mission progress
			STAT_BERNIE_MISSION_PROGRESS = 26,              //Bernie mission progress
			STAT_BELL_MISSION_PROGRESS = 27,                //Bell mission progress
			STAT_GAMBETTI_MISSION_PROGRESS = 28,            //Gambetti mission progress
			STAT_JIMMY_MISSION_PROGRESS = 29,               //Jimmy mission progress
			STAT_CARMEN_ORTIZ_FONDNESS = 30,                //Carmen Ortiz fondness
			STAT_CARMEN_TRUST = 31,                     //Carmen trust
			STAT_ALEX_CHILTON_FONDNESS = 32,                //Alex Chilton fondness
			STAT_ALEX_TRUST = 33,                       //Alex trust
			STAT_KIKI_JENKINS_FONDNESS = 34,                //Kiki Jenkins fondness
			STAT_KIKI_TRUST = 35,                       //Kiki trust
			STAT_MICHELLE_FONDNESS = 36,                //Michelle fondness
			STAT_MICHELLE_TRUST = 37,                   //Michelle trust
			STAT_KATE_FONDNESS = 38,                    //Kate fondness
			STAT_KATE_TRUST = 39,                       //Kate trust
			STAT_SHOOTING_ACCURACY = 40,                //Shooting accuracy
			STAT_KILLS_PERCENT_IN_FREE_AIM = 41,            //Kills % in free aim
			STAT_BIKE_OR_CAR_AVERAGE_SPEED = 42,            //Bike/Car Average speed
			STAT_PLAYING_TIME = 44,                     //Playing time
			STAT_LONGEST_COP_CHASE_TIME = 45,               //Longest cop chase time
			STAT_TIME_WANTED_ON_6_STARS = 46,               //Time wanted on 6 stars
			STAT_LAST_COP_CHASE_TIME = 47,                  //Last cop chase time
			STAT_TIME_SPENT_IN_THE_WATER = 49,              //Time spent in the water
			STAT_TIME_SPENT_SHOPPING = 50,                  //Time spent shopping
			STAT_TIME_SPENT_IN_COVER = 51,                  //Time spent in cover
			STAT_POOL_PLAYED_TIME = 52,                 //Pool played time
			STAT_DARTS_TIME_PLAYED = 53,                //Darts time played
			STAT_BOWLING_TIME_PLAYED = 54,                  //Bowling time played
			STAT_TOTAL_RACE_TIME = 55,                  //Total race time
			STAT_SOUTH_BROKER_RECORD = 56,                  //South Broker record
			STAT_AIRPORT_RUN_RECORD = 57,                   //Airport Run record
			STAT_DUKES_BOULEVARD_RECORD = 58,               //Dukes Boulevard record
			STAT_SOUTH_ALGONQUIN_RECORD = 59,               //South Algonquin record
			STAT_STAR_JUNCTION_RECORD = 60,                 //Star Junction record
			STAT_ROAD_TO_BOHAN_RECORD = 61,                 //Road to Bohan record
			STAT_NORTH_ALDERNEY_RECORD = 62,                //North Alderney record
			STAT_ELEVATED_RECORD = 63,                  //Elevated record
			STAT_SOUTH_ALDERNEY_RECORD = 64,                //South Alderney record
			STAT_QUB3D_TIME_PLAYED = 65,                //QUB3D time played
			STAT_BOATING_TIME = 66,                     //Boating time
			STAT_HELI_RIDE_TIME = 67,                   //Heli ride time
			STAT_TIME_SPENT_ON_INTERNET = 68,               //Time spent on internet
			STAT_TIME_SPENT_CALLING = 69,                   //Time spent calling
			STAT_TIME_SPENT_WALKING = 70,                   //Time spent walking
			STAT_TIME_SPENT_DRIVING_CAR = 71,               //Time spent driving car
			STAT_TIME_SPENT_DRIVING_HELI = 72,              //Time spent driving heli
			STAT_TIME_SPENT_DRIVING_BIKE = 73,              //Time spent driving bike
			STAT_TIME_SPENT_DRIVING_BOAT = 74,              //Time spent driving boat
			STAT_TIME_SPENT_SWIMING = 75,                   //Time spent swiming
			STAT_MILES_BY_HELICOPTER = 76,                  //Miles by helicopter
			STAT_MILES_BY_CAR = 77,                     //Miles by car
			STAT_MILES_BY_BIKE = 78,                    //Miles by bike
			STAT_MILES_BY_BOAT = 79,                    //Miles by boat
			STAT_MILES_ON_FOOT = 80,                    //Miles on foot
			STAT_MILES_SWAM = 81,                       //Miles swam
			STAT_LONGEST_2WHEEL_STUNT = 82,                 //Longest 2wheel stunt
			STAT_LONGEST_BIKE_STOPPIE = 83,                 //Longest bike stoppie
			STAT_LONGEST_BIKE_WHEELIE = 84,                 //Longest bike wheelie
			STAT_MILES_BY_TRAIN = 85,                   //Miles by train
			STAT_MILES_AS_TAXI_PASSENGER = 86,              //Miles as taxi passenger
			STAT_FARTHEST_JUMP_DISTANCE = 87,               //Farthest jump distance
			STAT_HIGHEST_JUMP_REACHED = 88,                 //Highest jump reached
			STAT_LONGEST_FREE_FALL = 89,                //Longest free fall
			STAT_SPENT_ON_PAY_N_SPRAY = 90,                 //Spent on Pay 'n' Spray
			STAT_SPENT_ON_DATES = 91,                   //Spent on dates
			STAT_SPENT_BUYING_CLOTHES = 92,                 //Spent buying clothes
			STAT_MADE_FROM_MISSIONS = 93,                   //Made from missions
			STAT_SPENT_IN_BARS_AND_CLUBS = 94,              //Spent in bars & clubs
			STAT_SPENT_ON_PROSTITUTES = 95,                 //Spent on prostitutes
			STAT_SPENT_IN_STRIP_CLUBS = 96,                 //Spent in strip clubs
			STAT_SPENT_ON_FOOD = 97,                    //Spent on food
			STAT_SPENT_ON_TAXIS = 98,                   //Spent on taxis
			STAT_MONEY_LOST_ON_STREET_RACES = 99,               //Money lost on street races
			STAT_MADE_FROM_VIGILANTE = 100,                 //Made from vigilante
			STAT_SPENT_ON_COP_BRIDES = 101,                 //Spent on cop brides
			STAT_SPENT_ON_HEALTH_CARE = 102,                //Spent on health care
			STAT_GIVEN_TO_TRAMPS = 103,                 //Given to tramps
			STAT_SPENT_ON_VENDORS = 104,                //Spent on vendors
			STAT_SPENT_ON_BINOCULARS = 105,                 //Spent on binoculars
			STAT_SPENT_IN_GUN_SHOP = 106,                   //Spent in gun shop
			STAT_MOST_SPENT_ON_A_DATE = 107,                //Most spent on a date
			STAT_CURRENT_MONEY = 108,                   //Current money
			STAT_MADE_FROM_STREET_RACES = 109,              //Made from street races
			STAT_TOTAL_PROGRESS = 110,                  //Total progress
			STAT_LONGEST_STOPPIE_TIME = 111,                //Longest stoppie time
			STAT_LONGEST_WHEELIE_TIME = 112,                //Longest wheelie time
			STAT_LONGEST_2WHEEL_TIME = 113,                 //Longest 2wheel time
			STAT_FLIGHT_TIME = 114,                     //Flight time
			STAT_RESPECT_TOTAL = 115,                   //Respect total
			STAT_MONEY_MADE_FROM_USJS = 116,                //Money made from USJs
			STAT_PICKED_UP_ON_STREET = 117,                 //Picked up on street
			STAT_LONGEST_NON_STOP_GAME = 118,               //Longest non-stop game
			STAT_MADE_FROM_VEHICLE_THEFTS = 119,            //Made from vehicle thefts
			STAT_MADE_FROM_RANDOM_PEDS = 120,               //Made from random peds
			COUNT
		};
		public enum class eIntStatistic
		{
			STAT_MISSIONS_PASSED = 253,                 //Missions passed
			STAT_MISSIONS_FAILED = 254,                 //Missions failed
			STAT_MISSIONS_ATTEMPTED = 255,                  //Missions attempted
			STAT_REPLAYS_USED = 256,                    //Replays used
			STAT_PEOPLE_KILLED = 257,                   //People killed
			STAT_NUMBER_OF_TAXI_FARES_COMPLETED = 258,          //Number of Taxi Fares completed
			STAT_TIMES_CHEATED = 259,                   //Times cheated
			STAT_DAYS_PASSED = 260,                     //Days passed
			STAT_TIMES_DIED = 261,                      //Times died
			STAT_PEOPLE_RUN_DOWN = 262,                 //People run down
			STAT_FLIPS_DONE_IN_A_VEHICLE = 264,             //Flips done in a vehicle
			STAT_MOST_VEHICLE_AIR_SPINS = 265,              //Most vehicle air spins
			STAT_AIR_LAUNCHES = 266,                    //Air launches
			STAT_HELICOPTER_TOURS_TAKEN = 267,              //Helicopter tours taken
			STAT_TAXIS_HAILED = 268,                    //Taxis hailed
			STAT_STUNT_JUMPS_FOUND = 269,                   //Stunt jumps found
			STAT_STUNT_JUMPS_COMPLETED = 270,               //Stunt jumps completed
			STAT_KILLS_SINCE_LAST_SAVE = 271,               //Kills since last save
			STAT_FIRES_STARTED = 272,                   //Fires started
			STAT_CRIMINALS_KILLED = 273,                //Criminals killed
			STAT_CARS_STOLEN = 274,                     //Cars stolen
			STAT_BIKES_STOLEN = 275,                    //Bikes stolen
			STAT_BOATS_STOLEN = 276,                    //Boats stolen
			STAT_HELICOPTERS_STOLEN = 277,                  //Helicopters stolen
			STAT_STARS_ATTAINED = 278,                  //Stars attained
			STAT_STARS_EVADED = 279,                    //Stars evaded
			STAT_VEHICLES_EXPORTED = 280,                   //Vehicles exported
			STAT_NUMBER_OF_BRIDGES_FLOWN_UNDER = 281,           //Number of bridges flown under
			STAT_PAY_N_SPRAY_VISITS = 282,                  //Pay 'n' Spray visits
			STAT_TIMES_GOT_DRUNK = 283,                 //Times got drunk
			STAT_DRUG_PACKAGES_DELIVERED = 284,             //Drug packages delivered
			STAT_CARS_SOLD_TO_STEVIE = 285,                 //Cars sold to Stevie
			STAT_RANDOM_CHARACTERS_MET = 286,               //Random characters met
			STAT_BULLETS_FIRED = 287,                   //Bullets fired
			STAT_BULLETS_HIT = 288,                     //Bullets hit
			STAT_KILLS_BY_HEADSHOTS = 289,                  //Kills by headshots
			STAT_MELEE_KILLS = 290,                     //Melee kills
			STAT_ARMED_KILLS = 291,                     //Armed kills
			STAT_SUCCESSFUL_COUNTERS = 292,                 //Successful counters
			STAT_NUMBER_OF_EXPLOSIONS = 293,                //Number of explosions
			STAT_CARS_EXPLODED = 294,                   //Cars exploded
			STAT_BIKES_EXPLODED = 295,                  //Bikes exploded
			STAT_BOATS_EXPLODED = 296,                  //Boats exploded
			STAT_HELICOPTERS_EXPLODED = 297,                //Helicopters exploded
			STAT_TIRES_POPPED_BY_GUNSHOT = 298,             //Tires popped by gunshot
			STAT_WEAPONS_PICKED_UP = 299,                   //Weapons picked up
			STAT_TEXTS_RECEIVED = 300,                  //Texts received
			STAT_CALLS_MADE_FROM_PHONE = 301,               //Calls made from phone
			STAT_CALLS_RECEIVED_ON_PHONE = 302,             //Calls received on phone
			STAT_PROSTITUTE_VISITS = 303,                   //Prostitute visits
			STAT_TRAMPS_GIVEN_MONEY_TO = 304,               //Tramps given money to
			STAT_EMAILS_SENT = 305,                     //Emails sent
			STAT_MEALS_EATEN = 306,                     //Meals eaten
			STAT_HOTDOGS_EATEN = 307,                   //Hotdogs eaten
			STAT_BURGERS_EATEN = 308,                   //Burgers eaten
			STAT_NUTS_EATEN = 309,                      //Nuts eaten
			STAT_BINOCULARS_USED = 310,                 //Binoculars used
			STAT_PLAYER_DIED_BY_MELEE = 311,                //Player died by melee
			STAT_PLAYER_SHOT_TO_DEATH = 312,                //Player shot to death
			STAT_PLAYER_WAS_BLOWN_UP = 313,                 //Player was blown up
			STAT_PLAYER_WAS_ROADKILL = 314,                 //Player was roadkill
			STAT_SCORED_WITH_GIRL = 315,                //Scored with girl
			STAT_POOL_WINS = 316,                       //Pool wins
			STAT_POOL_DEFEATS = 317,                    //Pool defeats
			STAT_POOL_CLEARANCES_FROM_BREAK = 318,              //Pool clearances from break
			STAT_DARTS_WINS = 319,                      //Darts wins
			STAT_DARTS_DEFEATS = 320,                   //Darts defeats
			STAT_DARTS_180S_HIT = 321,                  //Darts 180's hit
			STAT_DARTS_BULLSEYE = 322,                  //Darts bullseye
			STAT_DARTS_SHORTEST_CHECK_OUT = 323,            //Darts shortest check out
			STAT_BOWLING_HIGH_SCORE = 324,                  //Bowling high score
			STAT_BOWLING_WINS = 325,                    //Bowling wins
			STAT_BOWLING_DRAWS = 326,                   //Bowling draws
			STAT_BOWLING_DEFEATS = 327,                 //Bowling defeats
			STAT_BOWLING_SPARES = 328,                  //Bowling spares
			STAT_BOWLING_PERFECTS = 329,                //Bowling perfects
			STAT_BOWLING_STRIKES = 330,                 //Bowling strikes
			STAT_NUMBER_OF_RACES_LOST = 331,                //Number of races lost
			STAT_NUMBER_OF_RACES_WON = 332,                 //Number of races won
			STAT_SOUTH_BROKER_WINS = 333,                   //South Broker wins
			STAT_SOUTH_BROKER_RACES = 334,                  //South Broker races
			STAT_AIRPORT_RUN_WINS = 335,                //Airport Run wins
			STAT_AIRPORT_RUN_RACES = 336,                   //Airport Run races
			STAT_DUKES_BOULEVARD_WINS = 337,                //Dukes Boulevard wins
			STAT_DUKES_BOULEVARD_RACES = 338,               //Dukes Boulevard races
			STAT_SOUTH_ALGONQUIN_WINS = 339,                //South Algonquin wins
			STAT_SOUTH_ALGONQUIN_RACES = 340,               //South Algonquin races
			STAT_STAR_JUNCTION_WINS = 341,                  //Star Junction wins
			STAT_STAR_JUNCTION_RACES = 342,                 //Star Junction races
			STAT_ROAD_TO_BOHAN_WINS = 343,                  //Road to Bohan wins
			STAT_ROAD_TO_BOHAN_RACES = 344,                 //Road to Bohan races
			STAT_NORTH_ALDERNEY_WINS = 345,                 //North Alderney wins
			STAT_NORTH_ALDERNEY_RACES = 346,                //North Alderney races
			STAT_ELEVATED_WINS = 347,                   //Elevated wins
			STAT_ELEVATED_RACES = 348,                  //Elevated races
			STAT_SOUTH_ALDERNEY_WINS = 349,                 //South Alderney wins
			STAT_SOUTH_ALDERNEY_RACES = 350,                //South Alderney races
			STAT_QUB3D_HIGH_SCORE = 351,                //QUB3D high score
			STAT_BOATING_DESTINATIONS = 352,                //Boating destinations
			STAT_HELI_RIDE_DESTINATIONS = 353,              //Heli ride destinations
			STAT_ACTIVITIES_WITH_ROMAN = 354,               //Activities with Roman
			STAT_ACTIVITIES_WITH_JACOB = 355,               //Activities with Jacob
			STAT_ACTIVITIES_WITH_BRUCIE = 356,              //Activities with Brucie
			STAT_ACTIVITIES_WITH_DWAYNE = 357,              //Activities with Dwayne
			STAT_ACTIVITIES_WITH_PACKIE = 358,              //Activities with Packie
			STAT_VIGILANTE_LEVELS_DONE = 359,               //Vigilante levels done
			STAT_MOST_WANTED_COMPLETED = 360,               //Most wanted completed
			STAT_PIGEONS_EXTERMINATED = 361,                //Pigeons exterminated
			STAT_FIRST_AID_COLLECTED = 362,                 //First aid collected
			STAT_ISLANDS_UNLOCKED = 363,                //Islands unlocked
			STAT_TOTAL_DATES = 364,                     //Total dates
			STAT_SUCCESSFUL_DATES = 365,                //Successful dates
			STAT_BAD_DATES = 366,                       //Bad dates
			STAT_GIRLS_DUMPED = 367,                    //Girls dumped
			STAT_EMAILS_RECEIVED = 368,                 //Emails received
			STAT_PHOTOS_TAKEN = 369,                    //Photos taken
			STAT_MOCAP_CUTSCENES_SKIPPED = 370,             //Mocap cutscenes skipped
			STAT_MOCAP_CUTSCENES_WATCHED = 371,             //Mocap cutscenes watched
			STAT_CUTSCENES_SKIPPED = 372,                   //Cutscenes skipped
			STAT_CUTSCENES_WATCHED = 373,                   //Cutscenes watched
			STAT_SODA_DRUNK = 374,                      //Soda drunk
			STAT_KILLS_WITH_UNARMED = 375,                  //Kills with Unarmed
			STAT_KILLS_WITH_BASEBALL_BAT = 376,             //Kills with Baseball Bat
			STAT_KILLS_WITH_POOLCUE = 376,                  //Kills with Poolcue
			STAT_KILLS_WITH_KNIFE = 378,                //Kills with Knife
			STAT_KILLS_WITH_GRENADE = 379,                  //Kills with Grenade
			STAT_KILLS_WITH_MOLOTOV = 380,                  //Kills with Molotov
			STAT_KILLS_WITH_ROCKET = 381,                   //Kills with Rocket
			STAT_KILLS_WITH_PISTOL = 382,                   //Kills with Pistol
			STAT_KILLS_WITH_COMBAT_PISTOL = 383,            //Kills with Combat Pistol
			STAT_KILLS_WITH_PUMP_SHOTGUN = 384,             //Kills with Pump Shotgun
			STAT_KILLS_WITH_COMBAT_SHOTGUN = 385,               //Kills with Combat Shotgun
			STAT_KILLS_WITH_MICRO_SMG = 386,                //Kills with Micro-SMG
			STAT_KILLS_WITH_SMG = 387,                  //Kills with SMG
			STAT_KILLS_WITH_ASSAULT_RIFLE = 388,            //Kills with Assault Rifle
			STAT_KILLS_WITH_CARBINE_RIFLE = 389,            //Kills with Carbine Rifle
			STAT_KILLS_WITH_COMBAT_SNIPER = 390,            //Kills with Combat Sniper
			STAT_KILLS_WITH_SNIPER_RIFLE = 391,             //Kills with Sniper Rifle
			STAT_KILLS_WITH_RPG = 392,                  //Kills with RPG
			STAT_KILLS_WITH_FLAME_THROWER = 393,            //Kills with Flame Thrower
			STAT_KILLS_WITH_MINIGUN = 394,                  //Kills with Minigun
			STAT_KILLS_WITH_EPISODIC_1 = 395,               //Kills with Episodic 1
			STAT_KILLS_WITH_EPISODIC_2 = 396,               //Kills with Episodic 2
			STAT_KILLS_WITH_EPISODIC_3 = 397,               //Kills with Episodic 3
			STAT_KILLS_WITH_EPISODIC_4 = 398,               //Kills with Episodic 4
			STAT_KILLS_WITH_EPISODIC_5 = 399,               //Kills with Episodic 5
			STAT_KILLS_WITH_EPISODIC_6 = 400,               //Kills with Episodic 6
			STAT_KILLS_WITH_EPISODIC_7 = 401,               //Kills with Episodic 7
			STAT_KILLS_WITH_EPISODIC_8 = 402,               //Kills with Episodic 8
			STAT_KILLS_WITH_EPISODIC_9 = 403,               //Kills with Episodic 9
			STAT_KILLS_WITH_EPISODIC_10 = 404,              //Kills with Episodic 10
			STAT_KILLS_WITH_EPISODIC_11 = 405,              //Kills with Episodic 11
			STAT_KILLS_WITH_EPISODIC_12 = 406,              //Kills with Episodic 12
			STAT_KILLS_WITH_EPISODIC_13 = 407,              //Kills with Episodic 13
			STAT_KILLS_WITH_EPISODIC_14 = 408,              //Kills with Episodic 14
			STAT_KILLS_WITH_EPISODIC_15 = 409,              //Kills with Episodic 15
			STAT_KILLS_WITH_EPISODIC_16 = 410,              //Kills with Episodic 16
			STAT_KILLS_WITH_EPISODIC_17 = 411,              //Kills with Episodic 17
			STAT_KILLS_WITH_EPISODIC_18 = 412,              //Kills with Episodic 18
			STAT_KILLS_WITH_EPISODIC_19 = 413,              //Kills with Episodic 19
			STAT_KILLS_WITH_EPISODIC_20 = 414,              //Kills with Episodic 20
			STAT_KILLS_WITH_EPISODIC_21 = 415,              //Kills with Episodic 21
			STAT_KILLS_WITH_EPISODIC_22 = 416,              //Kills with Episodic 22
			STAT_KILLS_WITH_EPISODIC_23 = 417,              //Kills with Episodic 23
			STAT_KILLS_WITH_EPISODIC_24 = 418,              //Kills with Episodic 24
			STAT_TIMES_BUSTED = 419,                    //Times busted
			STAT_SAVES_MADE = 420,                      //Saves made
			STAT_TOTAL_LEGITIMATE_KILLS = 421,              //Total legitimate kills
			STAT_FLYING_SKILL = 422,                    //Flying skill
			STAT_PROGRESS_WITH_DENISE = 423,                //Progress with Denise
			STAT_PROGRESS_WITH_MICHELLE = 424,              //Progress with Michelle
			STAT_PROGRESS_WITH_HELENA = 425,                //Progress with Helena
			STAT_PROGRESS_WITH_BARBARA = 426,               //Progress with Barbara
			STAT_PROGRESS_WITH_KATIE = 427,                 //Progress with Katie
			STAT_PROGRESS_WITH_MILLIE = 428,                //Progress with Millie
			STAT_PIMPING_LEVEL = 429,                   //Pimping level
			STAT_RESPECT_MISSION = 430,                 //Respect Mission
			STAT_RESPECT_MISSION_TOTAL = 431,               //Respect Mission Total
			STAT_KILLS_SINCE_LAST_CHECKPOINT = 432,             //Kills since last checkpoint
			STAT_TOTAL_MISSIONS = 433,                  //Total missions
			STAT_ENERGY = 434,                      //Energy
			STAT_ARMOUR = 435,                      //Armour
			STAT_DRIVING_SKILL = 436,                   //Driving skill
			STAT_BIKE_SKILL = 437,                      //Bike skill
			STAT_LUCK = 438,                        //Luck
			STAT_CYCLE_SKILL = 439,                     //Cycle skill
			STAT_UNDERWATER_BREATH_STAMINA = 440,               //Underwater breath stamina
			STAT_CALORIES = 441,                    //Calories
			STAT_PEOPLE_SAVED_IN_AN_AMBULANCE = 442,            //People saved in an Ambulance
			STAT_CRIMINALS_KILLED_ON_VIGILANTE_MISSION = 443,       //Criminals killed on Vigilante Mission
			STAT_HIGHEST_PARAMEDIC_MISSION_LEVEL = 444,         //Highest Paramedic Mission level
			STAT_HIGHEST_FIREFIGHTER_MISSION_LEVEL = 445,           //Highest Firefighter Mission level
			STAT_TOTAL_FIRES_EXTINGUISHED = 446,            //Total fires extinguished
			STAT_KGS_OF_EXPLOSIVES_USED = 447,              //Kgs of explosives used
			STAT_NUMBER_OF_POLICE_BRIBES = 448,             //Number of Police bribes
			STAT_FIRES_STARTED_INT = 449,                   //Fires started
			STAT_HIGHEST_NUMBER_OF_PEDS_KILLED_IN_ONE_SPREE = 450,              //Highest number of peds killed in one spree
			STAT_HIGHEST_NUMBER_OF_COPS_KILLED_IN_ONE_SPREE = 451,              //Highest number of cops killed in one spree
			STAT_HIGHEST_NUMBER_OF_VEHICLES_DESTROYED_IN_ONE_SPREE = 452,           //Highest number of vehicles destroyed in one spree
			STAT_HIGHEST_NUMBER_OF_COP_CARS_DESTROYED_IN_ONE_SPREE = 453,           //Highest number of cop cars destroyed in one spree
			STAT_HIGHEST_NUMBER_OF_PED_KILLS_ON_SPREE = 454,                //Highest number of ped kills on spree
			STAT_HIGHEST_NUMBER_OF_POLICE_KILLS_ON_SPREE = 455,             //Highest number of police kills on spree
			STAT_HIGHEST_NUMBER_OF_CIVILIAN_VEHICLES_DESTROYED_ON_SPREE = 456,      //Highest number of civilian vehicles destroyed on spree
			STAT_HIGHEST_NUMBER_OF_COP_VEHICLES_DESTROYED_ON_SPREE = 457,           //Highest number of cop vehicles destroyed on spree
			STAT_HIGHEST_NUMBER_OF_TANKS_DESTROYED_ON_SPREE = 458,              //Highest number of tanks destroyed on spree
			STAT_RAMPAGES_ATTEMPTED = 459,                  //Rampages attempted
			STAT_RAMPAGES_PASSED = 460,                 //Rampages passed
			STAT_PEOPLE_WASTED_BY_OTHERS = 461,             //People wasted by others
			STAT_NUMBER_OF_VEHICLES_IMPORTED = 462,             //Number of vehicles imported
			STAT_GANG_MEMBERS_RECRUITED = 463,              //Gang members recruited
			STAT_ENEMY_GANG_MEMBERS_KILLED = 464,               //Enemy gang members killed
			STAT_FRIENDLY_GANG_MEMBERS_KILLED = 465,            //Friendly gang members killed
			STAT_RECRUITED_GANG_MEMBERS_KILLED = 466,           //Recruited gang members killed
			STAT_TIME_SPENT_LOOKING_THROUGH_TELESCOPE = 467,        //Time spent looking through telescope
			STAT_PLANES_EXPLODED = 468,                 //Planes exploded
			STAT_NUMBER_OF_EXOTIC_EXPORTS_DONE = 469,           //Number of Exotic Exports done
			STAT_ADDICTION_LEVEL = 473,                 //Addiction level
			STAT_FAVORITE_RADIO_STATION = 474,              //Favorite radio station
			STAT_LEAST_FAVORITE_STATION = 475,              //Least favorite station
			STAT_FAVORITE_TRANSPORT = 476,                  //Favorite transport
			STAT_FAVORITE_CAR = 477,                    //Favorite car
			STAT_FAVORITE_BIKE = 478,                   //Favorite bike
			STAT_FAVORITE_BOAT = 479,                   //Favorite boat
			STAT_FAVORITE_HELICOPTER = 480,                 //Favorite helicopter
			STAT_MILES_TRAVELLED = 481,                 //Miles travelled
			STAT_PLAYER_IMAGE = 482,                    //Player image
			STAT_FAVORITE_CAR_COLOR = 483,                  //Favorite car color
			STAT_TOP_VEHICLE_SPEED = 484,                   //Top Vehicle Speed
			STAT_FAVORITE_ACTIVITY = 486,                   //Favorite activity
			STAT_NIKO_AND_ROMAN_HANGOUT = 487,              //Niko and Roman hangout
			STAT_NIKO_AND_JACOB_HANGOUT = 488,              //Niko and Jacob hangout
			STAT_NIKO_AND_BRUCIE_HANGOUT = 489,             //Niko and Brucie hangout
			STAT_NIKO_AND_DWAYNE_HANGOUT = 490,             //Niko and Dwayne hangout
			STAT_NIKO_AND_PACKIE_HANGOUT = 491,             //Niko and Packie hangout
			STAT_FAVORITE_SHOP = 492,                   //Favorite shop
			STAT_FAVORITE_INTERNET_SITE = 493,              //Favorite internet site
			STAT_LAST_MISSION_NAME = 494,                   //Last mission name
			STAT_VEHICLES_BLOWN_UP = 500,                   //Vehicles blown up
			STAT_HEALTH = 501,                      //Health5
			STAT_GANG_MEMBER_COUNT = 502,                   //Gang member count
			COUNT
		};

		public enum class ePedRace
		{
			// Needs to be tested and verified
			PED_RACE_UNIVERSAL = 1, // uni
			PED_RACE_WHITE,     // whi
			PED_RACE_BLACK,     // bla
			PED_RACE_CHINESE,       // chi
			PED_RACE_LATINO,    // lat
			PED_RACE_ARABIC,    // ara
			PED_RACE_BAL,       // bal      wth is this?
			PED_RACE_JAMAICAN,      // jam      guessed!
			PED_RACE_KOREAN,    // kor
			PED_RACE_ITALIAN,       // ita
			PED_RACE_PAKISTANI,     // pak      another guess!
		};

		public enum class eVehicleDoor
		{
			VEHICLE_DOOR_LEFT_FRONT,
			VEHICLE_DOOR_RIGHT_FRONT,
			VEHICLE_DOOR_LEFT_REAR,
			VEHICLE_DOOR_RIGHT_REAR,
			VEHICLE_DOOR_HOOD,
			VEHICLE_DOOR_TRUNK,
		};

		public enum class eVehicleLights
		{
			VEHICLE_LIGHTS_0,
			VEHICLE_LIGHTS_1,
			VEHICLE_LIGHTS_2,
		};

		public enum class eVehicleDoorLock
		{
			VEHICLE_DOOR_LOCK_0,
			VEHICLE_DOOR_UNLOCKED,
			VEHICLE_DOOR_LOCKED,
			VEHICLE_DOOR_LOCK_3,
			VEHICLE_DOOR_LOCKED_BOTH_SIDES,
		};

		public enum class eBlipType
		{
			BLIP_TYPE_CAR = 1,
			BLIP_TYPE_CHAR = 2,         // ENEMY
			BLIP_TYPE_OBJECT = 3,
			BLIP_TYPE_COORD = 4,
			BLIP_TYPE_CONTACT = 5,      // FRIEND
			BLIP_TYPE_PICKUP = 6,
			BLIP_TYPE_UNKNOWN = 7,
			BLIP_TYPE_PICKUP_2 = 8,
			// not complete
		};

		public enum class eLanguage
		{
			LANGUAGE_AMERICAN,
			LANGUAGE_FRENCH,
			LANGUAGE_GERMAN,
			LANGUAGE_ITALIAN,
			LANGUAGE_SPANISH,
			LANGUAGE_RUSSIAN
		};

		public enum class eRadioStation
		{
			RADIO_VIBE,         	// THE_VIBE         	THE VIBE 98.8
			RADIO_LIBERTY_ROCK,     // LIBERTY_ROCK     	LRR 97.8 LIBERTY ROCK RADIO
			RADIO_JAZZ,       		// JAZZ_NATION      	JAZZ NATION RADIO 108.5
			RADIO_MASSIVE,     		// BOBBY_KONDERS   		MASSIVE B
			RADIO_K109,         	// K109_THE_STUDIO 		K 109 THE STUDIO
			RADIO_WKTT,         	// WKTT         		WKTT RADIO
			RADIO_LCHC,         	// HARDCORE         	LCHC (WHERE HARDCORE LIVES)
			RADIO_JOURNEY,      	// CLASSICAL_AMBIENT    THE JOURNEY
			RADIO_FUSION,       	// FUSION_FM        	FUSION FM
			RADIO_BEAT,         	// BEAT_95          	THE BEAT 102.7
			RADIO_BROKER,       	// DANCE_ROCK       	RADIO BROKER
			RADIO_VLADIVOSTOK,      // VLADIVOSTOK      	VLADIVOSTOK FM
			RADIO_PLR,          	// PLR          		PLR - PUBLIC LIBERTY RADIO
			RADIO_SAN_JUAN_SOUNDS,  // SAN_JUAN_SOUNDS      SAN JUAN SOUNDS
			RADIO_ELECTRO,      	// DANCE_MIX        	ELECTRO-CHOC
			RADIO_CLASSICS,     	// NY_CLASSICS      	THE CLASSICS 104.1
			RADIO_IF99,         	// AFRO_BEAT        	IF 99 - INTERNATIONAL FUNK
			RADIO_TUFF,         	// BABYLON          	TUFF GONG
			RADIO_MP3,          	// INDEPENDENT      	INPEDENDENCE FM
			RADIO_INTEGRITY     	// INTEGRITY        	INTEGRITY 2.0*
		};

		public enum class eAnimationFlags
		{
			ANIMATION_FLAG_NONE = 0,
			ANIMATION_FLAG_UNKNOWN01 = 1,
			ANIMATION_FLAG_UNKNOWN02 = 2,
			ANIMATION_FLAG_UNKNOWN03 = 4,
			ANIMATION_FLAG_UNKNOWN04 = 8,
			ANIMATION_FLAG_UNKNOWN05 = 0x10,//loop
			ANIMATION_FLAG_UNKNOWN06 = 0x20,
			ANIMATION_FLAG_UNKNOWN07 = 0x40,
			ANIMATION_FLAG_UNKNOWN08 = 0x80,
			ANIMATION_FLAG_UNKNOWN09 = 0x100,
			ANIMATION_FLAG_UNKNOWN10 = 0x200,
			ANIMATION_FLAG_UNKNOWN11 = 0x400,
			ANIMATION_FLAG_UNKNOWN12 = 0x800
		};

		public enum class eBlipColor
		{
			BLIP_COLOR_WHITE,
			BLIP_COLOR_DARK_RED,
			BLIP_COLOR_DARK_GREEN,
			BLIP_COLOR_CYAN,
			BLIP_COLOR_GREY,
			BLIP_COLOR_YELLOW,
			BLIP_COLOR_ORANGE,
			BLIP_COLOR_PURPLE,
			BLIP_COLOR_GREEN,
			BLIP_COLOR_RED,
			BLIP_COLOR_LIGHT_RED,
			BLIP_COLOR_LIGHT_ORANGE,
			BLIP_COLOR_DARK_TURQUOISE,
			BLIP_COLOR_TURQUOISE,
			BLIP_COLOR_LIGHT_YELLOW
		};

		public enum class ePlayerColor
		{
			PLAYER_COLOR_BLACK,
			PLAYER_COLOR_ORANGE,
			PLAYER_COLOR_PURPLE,
			PLAYER_COLOR_GREEN,
			PLAYER_COLOR_RED,
			PLAYER_COLOR_YELLOW,
			PLAYER_COLOR_BLUE,
			PLAYER_COLOR_HOT_PINK,
			PLAYER_COLOR_TAN,
			PLAYER_COLOR_DARK_GREEN,
			PLAYER_COLOR_DARK_BLUE,
			PLAYER_COLOR_PINK,
			PLAYER_COLOR_LIGHT_BLUE,
			PLAYER_COLOR_OLIVE_GREEN,
			PLAYER_COLOR_LIGHT_GREEN,
			PLAYER_COLOR_GRAY,
			PLAYER_COLOR_BROWN
		};

		public enum class eBlipDisplay
		{
			BLIP_DISPLAY_ARROW_AND_MAP = 4,
			BLIP_DISPLAY_ARROW_ONLY = 1,
			BLIP_DISPLAY_HIDDEN = 0,
			BLIP_DISPLAY_MAP_ONLY = 2
		};

		public enum class eBone
		{
			BONE_EXTRA1 = 0xB064,
			BONE_EXTRA2 = 0xB065,
			BONE_EXTRA3 = 0xB066,
			BONE_FACE_CENTRAL_JAW_JOINT_A = 0x7916,
			BONE_FACE_CENTRAL_LOW_LID_JOINT = 0x78FA,
			BONE_FACE_LEFT_BROW_JOINT_A = 0x78F7,
			BONE_FACE_LEFT_BROW_JOINT_B = 0x78F8,
			BONE_FACE_LEFT_CHEEK_JOINT = 0x78FB,
			BONE_FACE_LEFT_CORNER_JOINT_A = 0x7903,
			BONE_FACE_LEFT_CORNER_JOINT_B = 0x79F4,
			BONE_FACE_LEFT_EYE_JOINT = 0x78FC,
			BONE_FACE_LEFT_JAW_JOINT_A = 0x7904,
			BONE_FACE_LEFT_JAW_JOINT_B = 0x7905,
			BONE_FACE_LEFT_LID_JOINT = 0x78F9,
			BONE_FACE_LEFT_LIP_UP_JOINT_A = 0x7906,
			BONE_FACE_RIGHT_BROW_JOINT_A = 0x7907,
			BONE_FACE_RIGHT_BROW_JOINT_B = 0x7908,
			BONE_FACE_RIGHT_CHEEK_JOINT = 0x790A,
			BONE_FACE_RIGHT_CORNER_JOINT_A = 0x790C,
			BONE_FACE_RIGHT_CORNER_JOINT_B = 0x79F3,
			BONE_FACE_RIGHT_EYE_JOINT = 0x790B,
			BONE_FACE_RIGHT_JAW_JOINT_A = 0x7913,
			BONE_FACE_RIGHT_JAW_JOINT_B = 0x7914,
			BONE_FACE_RIGHT_LID_JOINT = 0x7909,
			BONE_FACE_RIGHT_LIP_UP_JOINT_A = 0x7915,
			BONE_HD_FACE_CENTRAL_BROW = 0x7F94,
			BONE_HD_FACE_CENTRAL_JAW = 0x7F9B,
			BONE_HD_FACE_CENTRAL_JAW_JOINT = 0xA913,
			BONE_HD_FACE_CENTRAL_JAW_POINT = 0xC944,
			BONE_HD_FACE_FOREHEAD = 0xA8F6,
			BONE_HD_FACE_LEFT_BROW = 0x7F9A,
			BONE_HD_FACE_LEFT_BROW_JOINT_A = 0xA905,
			BONE_HD_FACE_LEFT_BROW_JOINT_B = 0xA917,
			BONE_HD_FACE_LEFT_EYEBALL = 0x7F98,
			BONE_HD_FACE_LEFT_EYE_JOINT = 0xA8F7,
			BONE_HD_FACE_LEFT_EYELID = 0x7F99,
			BONE_HD_FACE_LEFT_LIP_CORNER_JOINT = 0xA8F9,
			BONE_HD_FACE_LEFT_LOW_CHEEK_JOINT = 0xA8FA,
			BONE_HD_FACE_LEFT_LOWER_LID_JOINT = 0xA903,
			BONE_HD_FACE_LEFT_LOWER_LIP = 0x7FA7,
			BONE_HD_FACE_LEFT_LOWER_LIP_JOINT = 0xA915,
			BONE_HD_FACE_LEFT_LOWER_LIP_POINT = 0xC948,
			BONE_HD_FACE_LEFT_MOUTH_CORNER = 0x7FA5,
			BONE_HD_FACE_LEFT_UPPER_CHEEK_JOINT = 0xA8F8,
			BONE_HD_FACE_LEFT_UPPER_LID_JOINT = 0xA8FC,
			BONE_HD_FACE_LEFT_UPPER_LIP = 0x7F9D,
			BONE_HD_FACE_LEFT_UPPER_LIP_JOINT = 0xA8FB,
			BONE_HD_FACE_LEFT_UPPER_LIP_POINT = 0xC946,
			BONE_HD_FACE_RIGHT_BROW = 0x7F95,
			BONE_HD_FACE_RIGHT_BROW_JOINT_A = 0xA904,
			BONE_HD_FACE_RIGHT_BROW_JOINT_B = 0xA908,
			BONE_HD_FACE_RIGHT_EYEBALL = 0x7F97,
			BONE_HD_FACE_RIGHT_EYE_JOINT = 0xA916,
			BONE_HD_FACE_RIGHT_EYELID = 0x7F96,
			BONE_HD_FACE_RIGHT_LIP_CORNER_JOINT = 0xA90B,
			BONE_HD_FACE_RIGHT_LOW_CHEEK_JOINT = 0xA90C,
			BONE_HD_FACE_RIGHT_LOWER_LID_JOINT = 0xA907,
			BONE_HD_FACE_RIGHT_LOWER_LIP = 0x7FA6,
			BONE_HD_FACE_RIGHT_LOWER_LIP_JOINT = 0xA914,
			BONE_HD_FACE_RIGHT_LOWER_LIP_POINT = 0xC947,
			BONE_HD_FACE_RIGHT_MOUTH_CORNER = 0x7FA4,
			BONE_HD_FACE_RIGHT_UPPER_CHEEK_JOINT = 0xA909,
			BONE_HD_FACE_RIGHT_UPPER_LID_JOINT = 0xA906,
			BONE_HD_FACE_RIGHT_UPPER_LIP = 0x7F9C,
			BONE_HD_FACE_RIGHT_UPPER_LIP_JOINT = 0xA90A,
			BONE_HD_FACE_RIGHT_UPPER_LIP_POINT = 0xC945,
			BONE_HD_FACE_TOGUE_JOINT_A = 0xA8F5,
			BONE_HD_FACE_TOGUE_JOINT_B = 0xA8F4,
			BONE_HEAD = 0x4B5,
			BONE_LEFT_ARM_ROLL = 0x3DF1,
			BONE_LEFT_CALF = 0x1A3,
			BONE_LEFT_CALF_ROLL = 0x38B0,
			BONE_LEFT_CLAVICLE = 0x4C0,
			BONE_LEFT_FINGER0 = 0x35D0,
			BONE_LEFT_FINGER01 = 0x35D1,
			BONE_LEFT_FINGER02 = 0x35D2,
			BONE_LEFT_FINGER1 = 0x35D3,
			BONE_LEFT_FINGER11 = 0x35D4,
			BONE_LEFT_FINGER12 = 0x35D5,
			BONE_LEFT_FINGER2 = 0x35D6,
			BONE_LEFT_FINGER21 = 0x35D7,
			BONE_LEFT_FINGER22 = 0x35D8,
			BONE_LEFT_FINGER3 = 0x35D9,
			BONE_LEFT_FINGER31 = 0x35E0,
			BONE_LEFT_FINGER32 = 0x35E1,
			BONE_LEFT_FINGER4 = 0x35E2,
			BONE_LEFT_FINGER41 = 0x35E3,
			BONE_LEFT_FINGER42 = 0x35E4,
			BONE_LEFT_FOOT = 420,
			BONE_LEFT_FOREARM = 0x4C2,
			BONE_LEFT_FOREARM_TWIST = 0x38A1,
			BONE_LEFT_FOREARM_TWIST1 = 0x38A2,
			BONE_LEFT_HAND = 0x4C3,
			BONE_LEFT_THIGH = 0x1A2,
			BONE_LEFT_TOE = 0x1A5,
			BONE_LEFT_UPPERARM = 0x4C1,
			BONE_LEFT_UPPERARM_ROLL = 0x38A0,
			BONE_NECK = 0x4B4,
			BONE_NECK_ROLL = 0x37A0,
			BONE_PELVIS = 0x1A1,
			BONE_RIGHT_ARM_ROLL = 0x3E01,
			BONE_RIGHT_CALF = 0x1A8,
			BONE_RIGHT_CALF_ROLL = 0x39B0,
			BONE_RIGHT_CLAVICLE = 0x4C7,
			BONE_RIGHT_FINGER0 = 0x35B0,
			BONE_RIGHT_FINGER01 = 0x35B1,
			BONE_RIGHT_FINGER02 = 0x35B2,
			BONE_RIGHT_FINGER1 = 0x35B3,
			BONE_RIGHT_FINGER11 = 0x35B4,
			BONE_RIGHT_FINGER12 = 0x35B5,
			BONE_RIGHT_FINGER2 = 0x35B6,
			BONE_RIGHT_FINGER21 = 0x35B7,
			BONE_RIGHT_FINGER22 = 0x35B8,
			BONE_RIGHT_FINGER3 = 0x35B9,
			BONE_RIGHT_FINGER31 = 0x35C0,
			BONE_RIGHT_FINGER32 = 0x35C1,
			BONE_RIGHT_FINGER4 = 0x35C2,
			BONE_RIGHT_FINGER41 = 0x35C3,
			BONE_RIGHT_FINGER42 = 0x35C4,
			BONE_RIGHT_FOOT = 0x1A9,
			BONE_RIGHT_FOREARM = 0x4C9,
			BONE_RIGHT_FOREARM_TWIST = 0x39A1,
			BONE_RIGHT_FOREARM_TWIST1 = 0x39A2,
			BONE_RIGHT_HAND = 0x4D0,
			BONE_RIGHT_THIGH = 0x1A7,
			BONE_RIGHT_TOE = 0x4B0,
			BONE_RIGHT_UPPERARM = 0x4C8,
			BONE_RIGHT_UPPERARM_ROLL = 0x39A0,
			BONE_ROOT = 0,
			BONE_SPINE = 0x4B2,
			BONE_SPINE1 = 0x4B3,
			BONE_SPINE2 = 0x36A0,
			BONE_SPINE3 = 0x36A1,
			BONE_UNKNOWN = -1
		};

		public enum class eDoorLock
		{
			DOOR_LOCK_CAN_OPEN_FROM_INSIDE = 3,
			DOOR_LOCK_IMPOSSIBLE_TO_OPEN = 4,
			DOOR_LOCK_NONE = 0
		};

		public enum class eDrivingStyle // check
		{
			DRIVING_STYLE_NORMAL,
			DRIVING_STYLE_IGNORE_LIGHTS_AND_LANES,
			DRIVING_STYLE_IGNORE_STREETS,
			DRIVING_STYLE_IGNORE_LIGHTS
		};

		public enum class eGameKey
		{
			GAME_KEY_ACTION = 0x17,
			GAME_KEY_AIM = 0x57,
			GAME_KEY_ATTACK = 4,
			GAME_KEY_CROUCH = 20,
			GAME_KEY_ENTER_CAR = 3,
			GAME_KEY_ESC = 0x3D,
			GAME_KEY_JUMP = 2,
			GAME_KEY_LAST_WEAPON = 9,
			GAME_KEY_LOOK_BEHIND = 7,
			GAME_KEY_MOVE_BACKWARD = 0x443,
			GAME_KEY_MOVE_FORWARD = 0x442,
			GAME_KEY_MOVE_LEFT = 0x444,
			GAME_KEY_MOVE_RIGHT = 0x445,
			GAME_KEY_NAV_BACK = 0x4E,
			GAME_KEY_NAV_DOWN = 0x40,
			GAME_KEY_NAV_ENTER = 0x4D,
			GAME_KEY_NAV_LEAVE = 0x4C,
			GAME_KEY_NAV_LEFT = 0x42,
			GAME_KEY_NAV_RIGHT = 0x43,
			GAME_KEY_NAV_UP = 0x41,
			GAME_KEY_NEXT_WEAPON = 8,
			GAME_KEY_PHONE = 0x15,
			GAME_KEY_RADAR_ZOOM = 0x56,
			GAME_KEY_RELOAD = 0x1D,
			GAME_KEY_SEEK_COVER = 0x1C,
			GAME_KEY_SOUND_HORN = 0x36,
			GAME_KEY_SPRINT = 1
		};

		public enum class eGameKeyDirection
		{
			GAME_KEY_DIRECTION_BACKWARDS = 2,
			GAME_KEY_DIRECTION_BACKWARDS_LEFT = 6,
			GAME_KEY_DIRECTION_BACKWARDS_RIGHT = 10,
			GAME_KEY_DIRECTION_FORWARD = 1,
			GAME_KEY_DIRECTION_FORWARD_LEFT = 5,
			GAME_KEY_DIRECTION_FORWARD_RIGHT = 9,
			GAME_KEY_DIRECTION_LEFT = 4,
			GAME_KEY_DIRECTION_NONE = 0,
			GAME_KEY_DIRECTION_RIGHT = 8
		};

		public enum class eGameMode
		{
			GAME_MODE_SINGLE_PLAYER = -1,

			GAME_MODE_DEATHMATCH = 0,
			GAME_MODE_TEAM_DEATHMATCH = 1,
			GAME_MODE_MAFIYA_WORK = 2,
			GAME_MODE_TEAM_MAFIYA_WORK = 3,
			GAME_MODE_TEAM_CAR_JACK_CITY = 4,
			GAME_MODE_CAR_JACK_CITY = 5,
			GAME_MODE_RACE = 6,
			GAME_MODE_GTA_RACE = 7,
			GAME_MODE_PARTY_MODE = 8,
			GAME_MODE_UNKNOWN_9 = 9,
			GAME_MODE_COPS_AND_CROOKS = 10,
			GAME_MODE_UNKNOWN_11 = 11,
			GAME_MODE_TURF_WAR = 12,
			GAME_MODE_DEAL_BREAKER = 13,
			GAME_MODE_HANGMANS_NOOSE = 14,
			GAME_MODE_BOMB_DA_BASE_II = 15,

			GAME_MODE_FREE_MODE = 16,

			// TBoGT
			GAME_MODE_TBOGT_DEATHMATCH = 26,
			GAME_MODE_TBOGT_TEAM_DEATHMATCH = 27,
			GAME_MODE_TBOGT_RACE = 28,
			GAME_MODE_TBOGT_GTA_RACE = 29,

			// TLaD
			GAME_MODE_TLAD_DEATHMATCH = 24,
			GAME_MODE_TLAD_TEAM_DEATHMATCH = 21,
			GAME_MODE_TLAD_RACE = 20,
			GAME_MODE_TLAD_CLUB_BUSINESS = 19,
			GAME_MODE_TLAD_LONE_WOLF_BIKER = 23,
			GAME_MODE_TLAD_CHOPPER_VS_CHOPPER = 17,
			GAME_MODE_TLAD_WITNESS_PROTECTION = 18,
			GAME_MODE_TLAD_OWN_THE_CITY = 22
		};

		public enum class eTeamIndex
		{
			TEAM_INDEX_ORANGE = 0,
			TEAM_INDEX_PURPLE = 1,
			TEAM_INDEX_GREEN = 2,
			TEAM_INDEX_RED = 3,
			TEAM_INDEX_YELLOW = 4,
			TEAM_INDEX_BLUE = 5,
			TEAM_INDEX_PINK = 6,
			TEAM_INDEX_TAN = 7,
		};

		public enum class eGarageType
		{
			GRAGE_TYPE_UNKNOWN3 = 3,
			GRAGE_TYPE_UNKNOWN4 = 4
		};

		public enum class eGameType
		{
			GAME_TYPE_SINGLEPLAYER,
			GAME_TYPE_MULTIPLAYER_LAN,
			GAME_TYPE_MULTIPLAYER_LIVE,
			GAME_TYPE_MULTIPLAYER_LIVE_RANKED
		};

		public enum class ePedFlag // check it
		{
			PED_FLAG_NONE,
			PED_FLAG_BOWLING,
			PED_FLAG_POOL,
			PED_FLAG_BASKETBALL,
			PED_FLAG_DRIVESPOORCAR,
			PED_FLAG_DRIVESAVERAGECAR,
			PED_FLAG_DRIVESRICHCAR,
			PED_FLAG_DRIVESBIGCAR,
			PED_FLAG_DRIVESMOTORCYCLE,
			PED_FLAG_DRIVESBOAT,
			PED_FLAG_ONFOOT,
			PED_FLAG_ARGUE,
			PED_FLAG_SMOKER,
			PED_FLAG_PHONEUSER,
			PED_FLAG_BUYDRUGS,
			PED_FLAG_GIVEBUMMONEY,
			PED_FLAG_INSULTBUM,
			PED_FLAG_REPLYTOHO,
			PED_FLAG_TAKETAXI,
			PED_FLAG_WATCHFIGHT,
			PED_FLAG_LATE,
			PED_FLAG_SOFTJACK,
			PED_FLAG_MURDERSHAKEFIST,
			PED_FLAG_MURDERCALLPOLICE,
			PED_FLAG_MURDERRUNAWAY,
			PED_FLAG_MURDERATTACK,
			PED_FLAG_TAXIDRIVER,
			PED_FLAG_POLICEOFFICER,
			PED_FLAG_SWAT,
			PED_FLAG_FBI,
			PED_FLAG_DEA,
			PED_FLAG_CSI,
			PED_FLAG_PARAMEDIC,
			PED_FLAG_FIREMAN,
			PED_FLAG_PROSTITUTE,
			PED_FLAG_PIMP,
			PED_FLAG_BUM,
			PED_FLAG_CANCARRYWEAPONS,
			PED_FLAG_LIKESART,
			PED_FLAG_DISLIKESART,
			PED_FLAG_TOURIST,
			PED_FLAG_OFFICE,
			PED_FLAG_GARDENING,
			PED_FLAG_JEWISH,
			PED_FLAG_CRIMINAL
		};

		public enum class ePedType
		{
			PED_TYPE_CIV_MALE,
			PED_TYPE_CIV_FEMALE,
			PED_TYPE_COP,
			PED_TYPE_ALBANIAN_GANG,
			PED_TYPE_ANGELS_OF_DEATH,
			PED_TYPE_THE_LOST,
			PED_TYPE_ITALIAN_MAFIA,
			PED_TYPE_RUSSIAN_MOB,
			PED_TYPE_GANG_RUSSIAN_GANG,
			PED_TYPE_GANG_IRISH_GANG,
			PED_TYPE_GANG_JAMAICAN,
			PED_TYPE_GANG_AFRICAN_AMERICAN,
			PED_TYPE_GANG_KOREAN,
			PED_TYPE_GANG_CHINESE_JAPANESE,
			PED_TYPE_GANG_PUERTO_RICAN,
			PED_TYPE_DEALER,
			PED_TYPE_PARAMEDIC,
			PED_TYPE_FIREMAN,
			PED_TYPE_CRIMINAL,
			PED_TYPE_BUM,
			PED_TYPE_PROSTITUTE
		};

		public enum class ePickupType
		{
			PICKUP_TYPE_NONE = 0,
			PICKUP_TYPE_NULL = 1,		// Can't pickup, does not disappear
			PICKUP_TYPE_REGULAR = 2,	// Can pickup, disappears on pickup
			PICKUP_TYPE_PIGEON = 3,		// Can't pickup, disappears when shot <- TEST THIS
			PICKUP_TYPE_DROPPED_WEAPON = 5,
			/// <summary>
			/// The usual money drops. Dead peds drop money of this type. Stockade money drops seem to also use this type.
			/// </summary>
			PICKUP_TYPE_MONEY = 8,		// Can pickup, disappears on pickup
			/// <summary>
			/// Preplaced money? Fixed amount?
			/// </summary>
			PICKUP_TYPE_MONEY2 = 19,	// Can pickup, disappears on pickup
			PICKUP_TYPE_WEAPON = 0x16	// 0x16 = 22 <- Change this
		};

		public enum class ePickupModel : uint32_t
		{
			PICKUP_MODEL_HEALTH_KIT = 0x3fc62578,
			PICKUP_MODEL_ARMOUR = 0x972daa10,
			PICKUP_MODEL_BASEBALL_BAT = 0x68d19067,
			PICKUP_MODEL_POOL_CUE = 0x4e746e14,
			PICKUP_MODEL_KNIFE = 0x3dfebd8b,
			PICKUP_MODEL_GRENADE = 0x3b373591,
			PICKUP_MODEL_MOLOTOV = 0x88b44609,
			PICKUP_MODEL_RPG = 0x5603b9ec,
			PICKUP_MODEL_GLOCK = 0xf44c839d,
			PICKUP_MODEL_DESERT_EAGLE = 0x5caeb064,
			PICKUP_MODEL_SHOTGUN = 0x6e10d6c3,
			PICKUP_MODEL_BERETTA = 0xddb2b5ad,
			PICKUP_MODEL_UZI = 0xafd2e07b,
			PICKUP_MODEL_MP5 = 0x65daddfd,
			PICKUP_MODEL_AK47 = 0x1bdd0543,
			PICKUP_MODEL_M4 = 0x35855559,
			PICKUP_MODEL_RIFLE = 0x08762932,
			PICKUP_MODEL_M40A1 = 0x22c755b0
		};

		public enum class eRelationship
		{
			RELATIONSHIP_COMPANION,
			RELATIONSHIP_RESPECT,
			RELATIONSHIP_LIKE,
			RELATIONSHIP_NEUTRAL,
			RELATIONSHIP_DISLIKE,
			RELATIONSHIP_HATE
		};

		public enum class eRelationshipGroup
		{
			RELATIONSHIP_GROUP_PLAYER,
			RELATIONSHIP_GROUP_CIVILIAN_MALE,
			RELATIONSHIP_GROUP_CIVILIAN_FEMALE,
			RELATIONSHIP_GROUP_COP,
			RELATIONSHIP_GROUP_GANG_ALBANIAN,
			RELATIONSHIP_GROUP_GANG_BIKER1,
			RELATIONSHIP_GROUP_GANG_BIKER2,
			RELATIONSHIP_GROUP_GANG_ITALIAN,
			RELATIONSHIP_GROUP_GANG_RUSSIAN1,
			RELATIONSHIP_GROUP_GANG_RUSSIAN2,
			RELATIONSHIP_GROUP_GANG_IRISH,
			RELATIONSHIP_GROUP_GANG_JAMAICAN,
			RELATIONSHIP_GROUP_GANG_AFRICAN_AMERICAN,
			RELATIONSHIP_GROUP_GANG_KOREAN,
			RELATIONSHIP_GROUP_GANG_CHINESE_JAPANESE,
			RELATIONSHIP_GROUP_GANG_PUERTO_RICAN,
			RELATIONSHIP_GROUP_DEALER,
			RELATIONSHIP_GROUP_MEDIC,
			RELATIONSHIP_GROUP_FIREMAN,
			RELATIONSHIP_GROUP_CRIMINAL,
			RELATIONSHIP_GROUP_BUM,
			RELATIONSHIP_GROUP_PROSTITUTE,
			RELATIONSHIP_GROUP_SPECIAL,
			RELATIONSHIP_GROUP_MISSION_1,
			RELATIONSHIP_GROUP_MISSION_2,
			RELATIONSHIP_GROUP_MISSION_3,
			RELATIONSHIP_GROUP_MISSION_4,
			RELATIONSHIP_GROUP_MISSION_5,
			RELATIONSHIP_GROUP_MISSION_6,
			RELATIONSHIP_GROUP_MISSION_7,
			RELATIONSHIP_GROUP_MISSION_8,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_01,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_02,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_03,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_04,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_05,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_06,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_07,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_08,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_09,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_10,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_11,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_12,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_13,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_14,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_15,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_16,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_17,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_18,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_19,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_20,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_21,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_22,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_23,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_24,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_25,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_26,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_27,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_28,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_29,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_30,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_31,
			RELATIONSHIP_GROUP_NETWORK_PLAYER_32,
			RELATIONSHIP_GROUP_NETWORK_TEAM_1,
			RELATIONSHIP_GROUP_NETWORK_TEAM_2,
			RELATIONSHIP_GROUP_NETWORK_TEAM_3,
			RELATIONSHIP_GROUP_NETWORK_TEAM_4,
			RELATIONSHIP_GROUP_NETWORK_TEAM_5,
			RELATIONSHIP_GROUP_NETWORK_TEAM_6,
			RELATIONSHIP_GROUP_NETWORK_TEAM_7,
			RELATIONSHIP_GROUP_NETWORK_TEAM_8
		};

		public enum class eShootMode // check
		{
			SHOOT_MODE_AIM_ONLY,
			SHOOT_MODE_SINGLE_SHOT,
			SHOOT_MODE_SINGLE_SHOT_KEEP_AIM,
			SHOOT_MODE_BURST,
			SHOOT_MODE_CONTINUOUS
		};

		public enum class eVehiclePart
		{
			PART_CHASSIS,
			PART_SEAT_DSIDE_F,
			PART_SEAT_DSIDE_R,
			PART_SEAT_PSIDE_F,
			PART_SEAT_PSIDE_R,
			PART_DOOR_DSIDE_F,
			PART_DOOR_DSIDE_R,
			PART_DOOR_PSIDE_F,
			PART_DOOR_PSIDE_R,
			PART_WHEEL_LF,
			PART_WHEEL_RF,
			PART_WHEEL_LM,
			PART_WHEEL_RM,
			PART_WHEEL_LR,
			PART_WHEEL_RR,
			PART_SUSPENSION_LF,
			PART_SUSPENSION_RF,
			PART_SUSPENSION_LM,
			PART_SUSPENSION_RM,
			PART_SUSPENSION_LR,
			PART_SUSPENSION_RR,
			PART_TRANSMISSION_F,
			PART_TRANSMISSION_M,
			PART_TRANSMISSION_R,
			PART_HUB_LF,
			PART_HUB_RF,
			PART_HUB_LR,
			PART_HUB_RR,
			PART_WINDSCREEN,
			PART_WINDSCREEN_R,
			PART_WINDOW_LF,
			PART_WINDOW_RF,
			PART_WINDOW_LR,
			PART_WINDOW_RR,
			PART_BODYSHELL,
			PART_BUMPER_F,
			PART_BUMPER_R,
			PART_WING_RF,
			PART_WING_LF,
			PART_BONNET,
			PART_BOOT,
			PART_EXHAUST,
			PART_EXHAUST_2,
			PART_EXHAUST_3,
			PART_EXHAUST_4,
			PART_ENGINE,
			PART_OVERHEAT,
			PART_OVERHEAT_2,
			PART_PETROLCAP,
			PART_PETROLTANK,
			PART_HEADLIGHT_L,
			PART_HEADLIGHT_R,
			PART_TAILLIGHT_L,
			PART_TAILLIGHT_R,
			PART_INDICATOR_LF,
			PART_INDICATOR_RF,
			PART_INDICATOR_LR,
			PART_INDICATOR_RR,
			PART_BRAKELIGHT_L,
			PART_BRAKELIGHT_R,
			PART_BRAKELIGHT_M,
			PART_REVERSINGLIGHT_L,
			PART_REVERSINGLIGHT_R,
			PART_NUMBERPLATE,
			PART_INTERIORLIGHT,
			PART_SIREN1,
			PART_SIREN2,
			PART_SIREN3,
			PART_SIREN4,
			PART_SIREN5,
			PART_SIREN6,
			PART_SIREN7,
			PART_SIREN8,
			PART_SIREN_GLASS1,
			PART_SIREN_GLASS2,
			PART_SIREN_GLASS3,
			PART_SIREN_GLASS4,
			PART_SIREN_GLASS5,
			PART_SIREN_GLASS6,
			PART_SIREN_GLASS7,
			PART_SIREN_GLASS8,
			PART_MISC_A,
			PART_MISC_B,
			PART_MISC_C,
			PART_MISC_D,
			PART_MISC_E,
			PART_MISC_F,
			PART_MISC_G,
			PART_MISC_H,
			PART_EXTRA_1,
			PART_EXTRA_2,
			PART_EXTRA_3,
			PART_EXTRA_4,
			PART_EXTRA_5,
			PART_EXTRA_6,
			PART_EXTRA_7,
			PART_EXTRA_8,
			PART_EXTRA_9,
			PART_EXTRA_10,

			PART_BOAT_STATIC_PROP = PART_EXTRA_1,
			PART_BOAT_MOVING_PROP,
			PART_BOAT_STATIC_PROP2,
			PART_BOAT_MOVING_PROP2,
			PART_BOAT_RUDDER,
			PART_BOAT_RUDDER2,

			PART_BIKE_CHASSIS = PART_EXTRA_1,
			PART_BIKE_SEAT_F,
			PART_BIKE_SEAT_R,
			PART_BIKE_FORKS_U,
			PART_BIKE_FORKS_L,
			PART_BIKE_HANDLEBARS,
			PART_BIKE_HBGRIP_L,
			PART_BIKE_HBGRIP_R,
			PART_BIKE_WHEEL_F,
			PART_BIKE_SWINGARM,
			PART_BIKE_WHEEL_R,
			PART_BIKE_RIDER,

			PART_TRAIN_WHEEL_RF1_DUMMY = PART_EXTRA_1,
			PART_TRAIN_WHEEL_RF2_DUMMY,
			PART_TRAIN_WHEEL_RF3_DUMMY,
			PART_TRAIN_WHEEL_RB1_DUMMY,
			PART_TRAIN_WHEEL_RB2_DUMMY,
			PART_TRAIN_WHEEL_RB3_DUMMY,
			PART_TRAIN_WHEEL_LF1_DUMMY,
			PART_TRAIN_WHEEL_LF2_DUMMY,
			PART_TRAIN_WHEEL_LF3_DUMMY,
			PART_TRAIN_WHEEL_LB1_DUMMY,
			PART_TRAIN_WHEEL_LB2_DUMMY,
			PART_TRAIN_WHEEL_LB3_DUMMY,
			PART_TRAIN_BOGIE_FRONT,
			PART_TRAIN_BOGIE_REAR,

			PART_HELI_STATIC_ROTOR1 = PART_EXTRA_1,
			PART_HELI_MOVING_ROTOR1,
			PART_HELI_STATIC_ROTOR2,
			PART_HELI_MOVING_ROTOR2,
			PART_HELI_RUDDER,
			PART_HELI_ELEVATORS,

			PART_PLANE_STATIC_PROP = PART_EXTRA_1,
			PART_PLANE_MOVING_PROP,
			PART_PLANE_STATIC_PROP2,
			PART_PLANE_MOVING_PROP2,
			PART_PLANE_RUDDER,
			PART_PLANE_ELEVATOR_L,
			PART_PLANE_ELEVATOR_R,
			PART_PLANE_AILERON_L,
			PART_PLANE_AILERON_R,
		};

		public enum class eVehicleWheel
		{
			VEHICLE_WHEEL_LF,
			VEHICLE_WHEEL_RF,
			VEHICLE_WHEEL_LM,
			VEHICLE_WHEEL_RM,
			VEHICLE_WHEEL_LR,
			VEHICLE_WHEEL_RR
		};

		public enum class eVehicleWindow
		{
			VEHICLE_WINDOW_LF,
			VEHICLE_WINDOW_RF,
			VEHICLE_WINDOW_LR,
			VEHICLE_WINDOW_RR,
			VEHICLE_WINDSCREEN,
			VEHICLE_WINDSCREEN_R
		};

		public enum class eVehicleType
		{
			VEHICLE_TYPE_AUTOMOBILE,
			VEHICLE_TYPE_BIKE,
			VEHICLE_TYPE_BOAT,
			VEHICLE_TYPE_TRAIN,
			VEHICLE_TYPE_HELI,
			VEHICLE_TYPE_PLANE,
		};

		public enum class eVehicleCameraType
		{
			VEHICLE_CAMERA_AUTOMOBILE,
			VEHICLE_CAMERA_BIKE,
			VEHICLE_CAMERA_HELI,
			VEHICLE_CAMERA_PLANE,
			VEHICLE_CAMERA_BOAT,

			VEHICLE_CAMERA_BIKE_E1 = 7,
			VEHICLE_CAMERA_HELI_E2,
		};

		public enum class eVehicleCreatedBy
		{
			RANDOM_VEHICLE = 1,
			MISSION_VEHICLE = 2,
			PARKED_VEHICLE = 3,
			PERMANENT_VEHICLE = 4,
		};

		/// <summary>
		/// Euphoria related (natives *NM_MESSAGE)
		/// </summary>
		public enum class eNmID
		{
			NM000_STOP_ALL_BEHAVIOURS,
			NM001,
			NM002_START,
			NM003_ACTIVE_POSE,
			NM004,
			NM005_MASK,
			NM006_INCOMING_TRANSFORMS,
			NM007,
			NM008_BODY_RELAX,
			NM009,
			NM010_RELAXATION,
			NM011_MASK,
			NM012_HOLD_POSE,
			NM013_DAMPING,
			NM014_CONFIGURE_BALANCE,
			NM015,
			NM016_STEP_HEIGHT,
			NM017_LEG_STIFFNESS,
			NM018_TAPER_KNEE_STRENGTH,
			NM019_BALANCE_ABORT_THRESHOLD,
			NM020_STEP_CLAMP_SCALE,
			NM021_CONFIGURE_BALANCE_RESET,
			NM022,
			NM023_DEFINE_ATTACHED_OBJECT,
			NM024,
			NM025_PART_INDEX,
			NM026_WORLD_POS,
			NM027_OBJECT_MASS,
			NM028_SET_STIFFNESS,
			NM029,
			NM030_MASK,
			NM031_BODY_STIFFNESS,
			NM032_DAMPING,
			NM033_BODY_ROLL_UP,
			NM034_ROLL_UP,
			NM035_MASK,
			NM036_STIFFNESS,
			NM037_LEG_PUSH,
			NM038_ARM_REACH_AMOUNT,
			NM039_USE_ARM_TO_SLOW_DOWN,
			NM040_ASYMMETRICAL_LEGS,
			NM041_BODY_WRITHE,
			NM042,
			NM043_ARM_STIFFNESS,
			NM044_LEG_STIFFNESS,
			NM045_BACK_STIFFNESS,
			NM046_LEG_PERIOD,
			NM047_ARM_PERIOD,
			NM048_BACK_PERIOD,
			NM049_LEG_DAMPING,
			NM050_ARM_DAMPING,
			NM051_BACK_DAMPING,
			NM052_LEG_AMPLITUDE,
			NM053_ARM_AMPLITUDE,
			NM054_BACK_AMPLITUDE,
			NM055_KNEE_AMPLITUDE,
			NM056_ELBOW_AMPLITUDE,
			NM057_MASK,
			NM058_ROLL_OVER_FLAG,
			NM059_ARMS_WINDMILL_ADAPTIVE,
			NM060,
			NM061_ARM_STIFFNESS,
			NM062_BODY_STIFFNESS,
			NM063_PERIOD,
			NM064_AMPLITUDE,
			NM065_PHASE,
			NM066_DISABLE_ON_IMPACT,
			NM067_PEDAL_LEGS,
			NM068,
			NM069_BACK_PEDAL,
			NM070_LEG_STIFFNESS,
			NM071_PEDAL_LEFT_LEG,
			NM072_PEDAL_RIGHT_LEG,
			NM073_RADIUS,
			NM074_ANGULAR_SPEED,
			NM075_PEDAL_OFFSET,
			NM076_SPEED_ASYMMETRY,
			NM077_ADAPTIVE_PEDAL4_DRAGGING,
			NM078_ANG_SPEED_MULTIPLIER4_DRAGGING,
			NM079_BODY_BALANCE,
			NM080_BALANCE,
			NM081_BODY_STIFFNESS,
			NM082_DAMPING,
			NM083_ELBOW,
			NM084_SHOULDER,
			NM085_MAX_STEPS,
			NM086_USE_HEAD_LOOK,
			NM087_HEAD_LOOK_POS,
			NM088_HEAD_LOOK_INSTANCE_INDEX,
			NM089_HEAD_LOOK_ALWAYS_TIMEOUT,
			NM090_SOMERSAULT_ANGLE,
			NM091_SOMERSAULT_ANGLE_THRESHOLD,
			NM092_SIDE_SOMERSAULT_ANGLE,
			NM093_SIDE_SOMERSAULT_ANGLE_THRESHOLD,
			NM094_RETURNING_TO_BALANCE_ARMS_OUT,
			NM095_ARMS_OUT_ON_PUSH,
			NM096_ARMS_OUT_STRAIGHTEN_ELBOWS,
			NM097_ARMS_OUT_MIN_LEAN2,
			NM098_BODY_TURN_TIMEOUT,
			NM099_ANG_VEL_MULTIPLIER,
			NM100_ANG_VEL_THRESHOLD,
			NM101_ARMS_OUT_ON_PUSH_MULTIPLIER,
			NM102_ARMS_OUT_ON_PUSH_TIMEOUT,
			NM103_USE_BODY_TURN,
			NM104_ELBOW_ANGLE_ON_CONTACT,
			NM105_BEND_ELBOWS_TIME,
			NM106_BEND_ELBOWS_GAIT,
			NM107_HEAD_LOOK_AT_VEL_PROB,
			NM108_TURN_OFF_PROB,
			NM109_TURN2_VEL_PROB,
			NM110_TURN_AWAY_PROB,
			NM111_TURN_LEFT_PROB,
			NM112_TURN_RIGHT_PROB,
			NM113_TURN2_TARGET_PROB,
			NM114_LEAN_IN_DIRECTION,
			NM115,
			NM116_DIR,
			NM117_LEAN_AMOUNT,
			NM118_APPLY_AS_FORCE,
			NM119_LEAN_TO_POSITION,
			NM120,
			NM121_POS,
			NM122_LEAN_AMOUNT,
			NM123_APPLY_AS_FORCE,
			NM124_LEAN_TOWARDS_OBJECT,
			NM125,
			NM126_OFFSET,
			NM127_LEAN_AMOUNT,
			NM128_INSTANCE_INDEX,
			NM129_APPLY_AS_FORCE,
			NM130_BRACE_FOR_IMPACT,
			NM131,
			NM132_POS,
			NM133_LOOK,
			NM134_INSTANCE_INDEX,
			NM135_BRACE_DISTANCE,
			NM136_REACH_ABSORBTION_TIME,
			NM137_TARGET_PREDICTION_TIME,
			NM138_BODY_STIFFNESS,
			NM139_GRAB_DONT_LET_GO,
			NM140_GRAB_STRENGTH,
			NM141_GRAB_DISTANCE,
			NM142_GRAB_REACH_ANGLE,
			NM143_GRAB_HOLD_TIMER,
			NM144_LEG_STIFFNESS,
			NM145_UPPER_BODY_FLINCH,
			NM146,
			NM147_POS,
			NM148_LEFT_HANDED,
			NM149_RIGHT_HANDED,
			NM150_HAND_DISTANCE_VERTICAL,
			NM151_HAND_DISTANCE_LEFT_RIGHT,
			NM152_HAND_DISTANCE_FRONT_BACK,
			NM153_BODY_STIFFNESS,
			NM154_BODY_DAMPING,
			NM155_BACK_BEND_AMOUNT,
			NM156_USE_LEFT_ARM,
			NM157_USE_RIGHT_ARM,
			NM158_NOISE_SCALE,
			NM159_NEW_HIT,
			NM160_TURN_TOWARDS,
			NM161_GRAB,
			NM162_RIGHT_ARM_GRAB,
			NM163_BODY_STIFFNESS,
			NM164_GRAB_STRENGTH,
			NM165_POS1,
			NM166_POS2,
			NM167_POS3,
			NM168_POS4,
			NM169_NORMAL_L,
			NM170_NORMAL_R,
			NM171_LINEGRAB,
			NM172_SURFACE_GRAB,
			NM173_JUSTBRACE,
			NM174_TRY_TO_PULL_UP,
			NM175_USE_LEFT,
			NM176_USE_RIGHT,
			NM177_INSTANCE_INDEX,
			NM178_DONT_LET_GO,
			NM179_GRAB_DIST,
			NM180_REACH_ANGLE,
			NM181_ONE_SIDE_REACH_ANGLE,
			NM182_PULL_UP_STRENGTH_LEFT,
			NM183_PULL_UP_STRENGTH_RIGHT,
			NM184_PULL_UP_TIME,
			NM185_GRAB_HOLD_MAX_TIMER,
			NM186_INSTANCE_PART_INDEX,
			NM187,
			NM188_LEFT_ARM_GRAB,
			NM189_CATCH_FALL,
			NM190_CATCH_FALL_2,
			NM191_LEGS_STIFFNESS,
			NM192_ARMS_STIFFNESS,
			NM193_TORSO_STIFFNESS,
			NM194_BACKWARDS_MIN_ARM_OFFSET,
			NM195_FORWARD_MAX_ARM_OFFSET,
			NM196_Z_AXIS_SPIN_REDUCTION,
			NM197_USE_HEAD_LOOK,
			NM198_SHOT,
			NM199_SHOT,
			NM200_BODY_STIFFNESS,
			NM201_BODY_PART,
			NM202_CROUCHING,
			NM203_REACH_FOR_WOUND,
			NM204_FLING,
			NM205_CHICKEN_ARMS,
			NM206_GRAB_HOLD_TIME,
			NM207_MAX_STEPS,
			NM208_LOOSENESS_AMOUNT,
			NM209_STABLE_HANDS_AND_NECK,
			NM210_USE_HEAD_LOOK,
			NM211_HIT_POINT,
			NM212_BULLET_VEL,
			NM213_NORMAL,
			NM214_HEAD_LOOK,
			NM215_TIME_BEFORE_REACH_FOR_WOUND,
			NM216_TIME_BEFORE_COLLAPSE_WOUND_LEG,
			NM217_SPINE_PAIN_TIME,
			NM218_SPINE_PAIN_MULTIPLIER,
			NM219_SPINE_PAIN_TWIST_MULTIPLIER,
			NM220_USE_CATCH_FALL_ON_FALL,
			NM221_HEAD_LOOK_AT_WOUND_MIN_TIMER,
			NM222_HEAD_LOOK_AT_WOUND_MAX_TIMER,
			NM223_HEAD_LOOK_AT_HEAD_POS_MIN_TIMER,
			NM224_HEAD_LOOK_AT_HEAD_POS_MAX_TIMER,
			NM225_MELEE,
			NM226_ADD_SHOCK_SPIN,
			NM227_RANDOMIZE_SHOCK_SPIN_DIRECTION,
			NM228_ALWAYS_ADD_SHOCK_SPIN,
			NM229_SHOCK_SPIN_MIN,
			NM230_SHOCK_SPIN_MAX,
			NM231_SHOCK_SPIN_LIFT_FORCE_MULT,
			NM232_SHOCK_SPIN_DECAY_MULT,
			NM233_SHOCK_SPIN_SCALE_PER_COMPONENT,
			NM234_SHOT_RELAX,
			NM235,
			NM236_RELAX_PERIOD,
			NM237_HEAD_LOOK,
			NM238,
			NM239_DAMPING,
			NM240_STIFFNESS,
			NM241_INSTANCE_INDEX,
			NM242_VEL,
			NM243_POS,
			NM244_ALWAYS_LOOK,
			NM245_ALWAYS_EYES_HORIZONTAL,
			NM246_HIGH_FALL,
			NM247_HIGH_FALL,
			NM248_BODY_STIFFNESS,
			NM249_BODYDAMPING,
			NM250_PD_STRENGTH,
			NM251_CRASH_OR_LAND_CUT_OFF,
			NM252_LAND_CUT_OFF_VELOCITY,
			NM253_CATCHFALLTIME,
			NM254_ARMS_UP,
			NM255_LEG_RADIUS,
			NM256_LEG_ANG_SPEED,
			NM257_ARM_PERIOD,
			NM258_ARM_AMPLITUDE,
			NM259_FOWARD_ROLL,
			NM260_AIM_ANGLE_BASE,
			NM261_SIDE_D,
			NM262_FOWARD_OFFSET_OF_LEG_IK,
			NM263_FOWARD_VEL_ROTATION,
			NM264_ORIENTATE_BODY_TO_FALL_DIRECTION,
			NM265_USE_ZERO_POSE,
			NM266_IGNOR_WORLD_COLLISIONS,
			NM267_STAY_UPRIGHT,
			NM268,
			NM269_STIFFNESS,
			NM270_ROLL_DOWN_STAIRS,
			NM271,
			NM272_STIFFNESS,
			NM273_DAMPING,
			NM274_FORCEMAG,
			NM275_ASYMMETRY,
			NM276_M_USE_ARM_TO_SLOW_DOWN,
			NM277_USE_ZERO_POSE,
			NM278_SPIN_WHEN_IN_AIR,
			NM279_M_LEG_PUSH,
			NM280_ARM_REACH_LENGTH,
			NM281_M_ARM_REACH_AMOUNT,
			NM282_TRY_TO_AVOID_HEADBUTTING_GROUND,
			NM283_USE_CUSTOM_ROLL_DIR,
			NM284_CUSTOM_ROLL_DIR,
			NM285_STIFFNESS_DECAY_TIME,
			NM286_STIFFNESS_DECAY_TARGET,
			NM287_ASYMMETRICAL_LEGS,
			NM288_Z_AXIS_SPIN_REDUCTION,
			NM289_FALL_OVER_WALL,
			NM290,
			NM291_BODY_STIFFNESS,
			NM292_DAMPING,
			NM293_MAG_OF_FORCE,
			NM294_MAX_DISTANCE_FROM_PEL_TO_HIT_POINT,
			NM295_USE_SPECIFIED_POINT,
			NM296_FALL_OVER_POINT,
			NM297_FALL_OVER_EDGE,
			NM298_BODY_TWIST,
			NM299_POINT_ARM,
			NM300,
			NM301_TARGET,
			NM302_TWIST,
			NM303_ARM_STRAIGHTNESS,
			NM304_USE_LEFT_ARM,
			NM305_ARM_STIFFNESS,
			NM306_ARM_DAMPING,
			NM307_INSTANCE_INDEX,
			NM308_POINT_SWING_LIMIT,
			NM309_USE_ZERO_POSE_WHEN_NOT_POINTING
		};

		public enum class eModelInfoType
		{
			MODEL_INFO_INSTANCE = 1,
			MODEL_INFO_MLO = 2,
			MODEL_INFO_TIME = 3,
			MODEL_INFO_WEAPON = 4,
			MODEL_INFO_VEHICLE = 5,
			MODEL_INFO_PED = 6,
		};

		public enum class eExplosion
		{
			EXPLOSION_GRENADE,
			EXPLOSION_MOLOTOV,
			EXPLOSION_ROCKET,
			EXPLOSION_HI_OCTANE,
			EXPLOSION_CAR,
			EXPLOSION_PLANE,
			EXPLOSION_PETROL_PUMP,
			EXPLOSION_BIKE,
			EXPLOSION_DIR_STEAM,
			EXPLOSION_DIR_FLAME,
			EXPLOSION_DIR_WATER_HYDRANT,
			EXPLOSION_DIR_GAS_CANISTER,
			EXPLOSION_BOAT,
			EXPLOSION_SHIP_DESTROY,
			EXPLOSION_TRUCK,
			EXPLOSION_EPISODIC_1, //Grenade launcher
			EXPLOSION_EPISODIC_2, //explosive shotgun
			EXPLOSION_EPISODIC_3, //Anhialator bullets
			EXPLOSION_EPISODIC_4, //APC explosive rounds
			EXPLOSION_EPISODIC_5, //Buzzard heli rockets
			EXPLOSION_EPISODIC_6, //Non-sorted explosions for Sexy Time mission/red explosion
			EXPLOSION_EPISODIC_7, //Sitcky bomb explosions
			EXPLOSION_EPISODIC_8, //Super punch cheat explosions
			EXPLOSION_EPISODIC_9, //invisible and will lag out explosions
			EXPLOSION_EPISODIC_10,// Invisible and will lag out explosions
			EXPLOSION_UNKNOWN, // Freezes/invisible and will lag out explosions
		};

		public enum class ePadControls
		{
			INPUT_NEXT_CAMERA,
			INPUT_SPRINT,
			INPUT_JUMP,
			INPUT_ENTER,
			INPUT_ATTACK,
			INPUT_ATTACK2,
			INPUT_AIM,
			INPUT_LOOK_BEHIND,
			INPUT_NEXT_WEAPON,
			INPUT_PREV_WEAPON,
			INPUT_NEXT_TARGET_LEFT,
			INPUT_NEXT_TARGET_RIGHT,
			INPUT_MOVE_LEFT,
			INPUT_MOVE_RIGHT,
			INPUT_MOVE_UP,
			INPUT_MOVE_DOWN,
			INPUT_LOOK_LEFT,
			INPUT_LOOK_RIGHT,
			INPUT_LOOK_UP,
			INPUT_LOOK_DOWN,
			INPUT_DUCK,
			INPUT_PHONE_TAKE_OUT,
			INPUT_PHONE_PUT_AWAY,
			INPUT_PICKUP,
			INPUT_SNIPER_ZOOM_IN,
			INPUT_SNIPER_ZOOM_OUT,
			INPUT_SNIPER_ZOOM_IN_ALTERNATE,
			INPUT_SNIPER_ZOOM_OUT_ALTERNATE,
			INPUT_COVER,
			INPUT_RELOAD,
			INPUT_VEH_MOVE_LEFT,
			INPUT_VEH_MOVE_RIGHT,
			INPUT_VEH_MOVE_UP,
			INPUT_VEH_MOVE_DOWN,
			INPUT_VEH_GUN_LEFT,
			INPUT_VEH_GUN_RIGHT,
			INPUT_VEH_GUN_UP,
			INPUT_VEH_GUN_DOWN,
			INPUT_VEH_ATTACK,
			INPUT_VEH_ATTACK2,
			INPUT_VEH_ACCELERATE,
			INPUT_VEH_BRAKE,
			INPUT_VEH_HEADLIGHT,
			INPUT_VEH_EXIT,
			INPUT_VEH_HANDBRAKE,
			INPUT_VEH_HANDBRAKE_ALT,
			INPUT_VEH_HOTWIRE_LEFT,
			INPUT_VEH_HOTWIRE_RIGHT,
			INPUT_VEH_LOOK_LEFT, // single control will break camera, pressing both will look behind
			INPUT_VEH_LOOK_RIGHT, // single control will break camera, pressing both will look behind
			INPUT_VEH_LOOK_BEHIND,
			INPUT_VEH_CIN_CAM,
			INPUT_VEH_NEXT_RADIO,
			INPUT_VEH_PREV_RADIO,
			INPUT_VEH_HORN,
			INPUT_VEH_FLY_THROTTLE_UP,
			INPUT_VEH_FLY_THROTTLE_DOWN,
			INPUT_VEH_FLY_YAW_LEFT,
			INPUT_VEH_FLY_YAW_RIGHT,
			INPUT_MELEE_ATTACK1,
			INPUT_MELEE_ATTACK2,
			INPUT_MELEE_ATTACK3,
			INPUT_MELEE_KICK,
			INPUT_MELEE_BLOCK,
			INPUT_FRONTEND_DOWN,
			INPUT_FRONTEND_UP,
			INPUT_FRONTEND_LEFT,
			INPUT_FRONTEND_RIGHT,
			INPUT_FRONTEND_RDOWN,
			INPUT_FRONTEND_RUP,
			INPUT_FRONTEND_RLEFT,
			INPUT_FRONTEND_RRIGHT,
			INPUT_FRONTEND_AXIS_X,
			INPUT_FRONTEND_AXIS_Y,
			INPUT_FRONTEND_RIGHT_AXIS_X,
			INPUT_FRONTEND_RIGHT_AXIS_Y,
			INPUT_FRONTEND_PAUSE,
			INPUT_FRONTEND_ACCEPT,
			INPUT_FRONTEND_CANCEL,
			INPUT_FRONTEND_X,
			INPUT_FRONTEND_Y,
			INPUT_FRONTEND_LB,
			INPUT_FRONTEND_RB,
			INPUT_FRONTEND_LT,
			INPUT_FRONTEND_RT,
			INPUT_MELEE_ATTACK4,
			INPUT_ZOOM_RADAR,
			INPUT_FREE_AIM,
			INPUT_MOUSE_UD,
			INPUT_MOUSE_LR,
			INPUT_MOVE_KEY_FB,
			INPUT_MOVE_KEY_LR,
			INPUT_MOVE_KEY_STUNTJUMP,
			INPUT_MOUSE_WHEEL_UP,
			INPUT_MOUSE_WHEEL_DOWN,
			INPUT_FRONTEND_AXIS_UD,
			INPUT_FRONTEND_AXIS_LR,
			INPUT_FRONTEND_LEGEND,
			INPUT_FRONTEND_APPLY,
			INPUT_FRONTEND_SHOWSCORE,
			INPUT_WEAPON_UNARMED,
			INPUT_WEAPON_MELEE,
			INPUT_WEAPON_HANDGUN,
			INPUT_WEAPON_SHOTGUN,
			INPUT_WEAPON_SMG,
			INPUT_WEAPON_RIFLE,
			INPUT_WEAPON_SNIPER,
			INPUT_WEAPON_HEAVY,
			INPUT_WEAPON_THROWN,
			INPUT_WEAPON_SPECIAL,
			INPUT_VEH_KEY_UD,
			INPUT_VEH_KEY_LR,
			INPUT_VEH_NEXT_WEAPON,
			INPUT_VEH_PREV_WEAPON,
			INPUT_TURN_OFF_RADIO,
			INPUT_FRONTEND_MINIGAME_1,
			INPUT_FRONTEND_MINIGAME_2,
			INPUT_FRONTEND_MINIGAME_3,
			INPUT_FRONTEND_MINIGAME_4,
			INPUT_FRONTEND_MODEL_SCREEN,
			INPUT_FRONTEND_VEHICLE_TOGGLE,
			INPUT_FRONTEND_DELETE_FILTER,
			INPUT_FRONTEND_REFRESH,
			INPUT_FRONTEND_PLAYER_LIST,
			INPUT_TEXT_CHAT_TOGGLE,
			INPUT_TEXT_CHAT_TEAM,
			INPUT_TEXT_CHAT_UNIVERSAL,
			INPUT_TEXT_CHAT_RESULTS_TOGGLE,
			INPUT_TEXT_CHAT_Y,
			INPUT_FRONTEND_LOCK_LOBBY,
			INPUT_KB_UP,
			INPUT_KB_DOWN,
			INPUT_KB_LEFT,
			INPUT_KB_RIGHT,
			INPUT_NEXT_TRACK,
			INPUT_PREV_TRACK,
			INPUT_DROP_WEAPON,
			INPUT_MOUSE_LMB,
			INPUT_MOUSE_RMB,
			INPUT_FE_MOUSE_UD, // helicopter mouse controls
			INPUT_FE_MOUSE_LR, // helicopter mouse controls
			INPUT_VEH_FLY_PITCH_UP,
			INPUT_VEH_FLY_PITCH_DOWN,
			INPUT_VEH_FLY_ROLL_LEFT,
			INPUT_VEH_FLY_ROLL_RIGHT,
			INPUT_REPLAY_PLAY,
			INPUT_REPLAY_SAVE_TO_HDD,
			INPUT_REPLAY_LOAD_FROM_HDD,
			INPUT_REPLAY_EXIT,
			INPUT_FRONTEND_MARKER_DELETE,
			INPUT_FRONTEND_REPLAY_PAUSE,
			INPUT_FRONTEND_REPLAY_REWIND,
			INPUT_FRONTEND_REPLAY_FFWD,
			INPUT_FRONTEND_REPLAY_NEWMARKER,
			INPUT_FRONTEND_REPLAY_RECORD,
			INPUT_FRONTEND_REPLAY_SCREENSHOT,
			INPUT_FRONTEND_REPLAY_HIDEHUD,
			INPUT_FRONTEND_REPLAY_STARTPOINT,
			INPUT_FRONTEND_REPLAY_ENDPOINT,
			INPUT_FRONTEND_REPLAY_ADVANCE,
			INPUT_FRONTEND_REPLAY_BACK,
			INPUT_FRONTEND_REPLAY_SHOWHOTKEY,
			INPUT_FRONTEND_REPLAY_TOOLS,
			INPUT_FRONTEND_REPLAY_RESTART,
			INPUT_FRONTEND_REPLAY_CYCLEMARKERLEFT,
			INPUT_FRONTEND_REPLAY_CYCLEMARKERRIGHT,
			INPUT_FRONTEND_AXIS_FWD,
			INPUT_FRONTEND_AXIS_BACK,
			INPUT_FRONTEND_AXIS_LEFT,
			INPUT_FRONTEND_AXIS_RIGHT,
			INPUT_FRONTEND_DEFINITION,
			INPUT_FRONTEND_F6,
			INPUT_FE_REPLAY_TOGGLETIME,
			INPUT_FE_REPLAY_TOGGLETIPS,
			INPUT_FE_REPLAY_PREVIEW,
			INPUT_FRONTEND_PASTE,
			INPUT_FRONTEND_CUT,
			INPUT_FRONTEND_COPY,
			INPUT_VOICE_CHAT,
			INPUT_SNIPER_ZOOM_IN_KB,
			INPUT_SNIPER_ZOOM_OUT_KB,
			INPUT_KB_PHONE_ACCEPT,
			INPUT_KB_PHONE_CANCEL,
			INPUT_VEH_ATTACK3_KB,
			INPUT_DETONATE,
			INPUT_VEH_MOVE_LEFT_2,
			INPUT_VEH_MOVE_RIGHT_2,
		};

		public enum class ePool
		{
			PedPool,
			VehiclePool,
			ObjectPool,
			BuildingPool,
			CameraPool,
			TaskPool,
			InteriorInstPool,
			VehicleStructPool,
			PedMoveBlendPool,
			DummyPedPool,
			DummyTaskPool,
			UnkPedDataPool,
			PedIntelligencePool,
			AnimBlenderPool,
			FragInstNMGtaPool,
			PedDataPool,
			QuadTreeNodePool,
			TxdPool,
			IplPool,
			PedTargettingPool,
			StuntJumpPool
		};

		public enum class eStoreType
		{
			Invalid,
			VehicleModelStore,
			PedModelStore
		};

		/// <summary>
		/// All available tasks.
		/// </summary>
		public enum class eTask
		{
			TASK_SIMPLE_MOVE_PLAYER = 2,
			TASK_COMPLEX_PLAYER_ON_FOOT = 4,
			TASK_COMPLEX_PLAYER_GUN = 6,
			TASK_COMPLEX_PLAYER_PLACE_CAR_BOMB = 7,
			TASK_COMPLEX_PLAYER_IDLES = 8,
			TASK_COMPLEX_MEDIC_TREAT_INJURED_PED = 100,
			TASK_COMPLEX_DRIVE_FIRE_TRUCK = 107,
			TASK_COMPLEX_MEDIC_DRIVER = 112,
			TASK_COMPLEX_MEDIC_PASSENGER = 113,
			TASK_COMPLEX_PLAYER_SETTINGS_TASK = 115,
			TASK_SIMPLE_STAND_STILL = 203,
			TASK_SIMPLE_GET_UP = 205,
			TASK_COMPLEX_GET_UP_AND_STAND_STILL = 206,
			TASK_SIMPLE_FALL = 207,
			TASK_COMPLEX_FALL_AND_GET_UP = 208,
			TASK_SIMPLE_JUMP_LAUNCH = 210,
			TASK_COMPLEX_JUMP = 211,
			TASK_COMPLEX_DIE = 217,
			TASK_SIMPLE_DEAD = 218,
			TASK_SIMPLE_TIRED = 219,
			TASK_COMPLEX_SIT_IDLE = 221,
			TASK_COMPLEX_SIT_DOWN_THEN_IDLE_THEN_STAND_UP = 223,
			TASK_COMPLEX_HIT_RESPONSE = 230,
			TASK_SIMPLE_JUMP_IN_AIR = 241,
			TASK_SIMPLE_JUMP_LAND = 242,
			TASK_COMPLEX_SEQUENCE = 244,
			TASK_COMPLEX_ON_FIRE = 250,
			TASK_SIMPLE_CLIMB = 254,
			TASK_COMPLEX_IN_WATER = 268,
			TASK_SIMPLE_TRIGGER_LOOK_AT = 269,
			TASK_COMPLEX_INJURED_ON_GROUND = 278,
			TASK_SIMPLE_DO_NOTHING = 281,
			TASK_SIMPLE_MOVE_DO_NOTHING = 283,
			TASK_COMPLEX_CONTROL_MOVEMENT = 285,
			TASK_COMPLEX_MOVE_SEQUENCE = 286,
			TASK_COMPLEX_CLIMB_LADDER = 287,
			TASK_COMPLEX_CLIMB_LADDER_FULLY = 289,
			TASK_COMPLEX_MOVE_AROUND_COVER_POINTS = 290,
			TASK_SIMPLE_PLAY_RANDOM_AMBIENTS = 291,
			TASK_SIMPLE_MOVE_IN_AIR = 293,
			TASK_COMPLEX_PICK_UP_OBJECT = 314,
			TASK_COMPLEX_PICK_UP_AND_CARRY_OBJECT = 315,
			TASK_SIMPLE_OPEN_DOOR = 317,
			TASK_SIMPLE_SWAP_WEAPON = 319,
			TASK_COMPLEX_SHOCKING_EVENT_WATCH = 321,
			TASK_COMPLEX_SHOCKING_EVENT_FLEE = 322,
			TASK_COMPLEX_SHOCKING_EVENT_GOTO = 323,
			TASK_COMPLEX_SHOCKING_EVENT_HURRY_AWAY = 324,
			TASK_SIMPLE_PUT_ON_HELMET = 325,
			TASK_SIMPLE_TAKE_OFF_HELMET = 326,
			TASK_COMPLEX_CAR_REACT_TO_VEHICLE_COLLISION = 327,
			TASK_COMPLEX_REACT_TO_PED_RAN_OVER = 328,
			TASK_COMPLEX_CAR_REACT_TO_VEHICLE_COLLISION_GET_OUT = 329,
			TASK_COMPLEX_STATIONARY_SCENARIO = 350,
			TASK_COMPLEX_SEATED_SCENARIO = 351,
			TASK_COMPLEX_DRIVING_SCENARIO = 353,
			TASK_COMPLEX_MOVE_BETWEEN_POINTS_SCENARIO = 354,
			TASK_COMPLEX_CHAT_SCENARIO = 355,
			TASK_COMPLEX_DRIVE_WANDER_FOR_TIME = 359,
			TASK_COMPLEX_GET_IN_CAR_SCENARIO = 361,
			TASK_COMPLEX_MOBILE_CHAT_SCENARIO = 363,
			TASK_COMPLEX_POLICE_SNIPER_SCENARIO = 365,
			TASK_COMPLEX_MOBILE_MAKE_CALL = 366,
			TASK_COMPLEX_MELEE = 431,
			TASK_SIMPLE_MOVE_MELEE_MOVEMENT = 432,
			TASK_SIMPLE_MELEE_ACTION_RESULT = 433,
			TASK_COMPLEX_EVASIVE_STEP = 502,
			TASK_COMPLEX_MOVE_STEP_AWAY_FROM_COLLISION_OBJECTS = 516,
			TASK_COMPLEX_WALK_ROUND_ENTITY = 517,
			TASK_COMPLEX_LEAVE_CAR_AND_WANDER = 572,
			TASK_COMPLEX_INVESTIGATE_DEAD_PED = 600,
			TASK_COMPLEX_REACT_TO_GUN_AIMED_AT = 601,
			TASK_COMPLEX_EXTINGUISH_FIRES = 604,
			TASK_COMPLEX_AVOID_PLAYER_TARGETTING = 605,
			TASK_COMPLEX_STEAL_CAR = 702,
			TASK_COMPLEX_LEAVE_CAR_AND_FLEE = 706,
			TASK_COMPLEX_SCREAM_IN_CAR_THEN_LEAVE = 708,
			TASK_COMPLEX_CAR_DRIVE_BASIC = 709,
			TASK_COMPLEX_DRIVE_TO_POINT = 710,
			TASK_COMPLEX_CAR_DRIVE_WANDER = 711,
			TASK_COMPLEX_LEAVE_ANY_CAR = 714,
			TASK_COMPLEX_GET_OFF_BOAT = 716,
			TASK_COMPLEX_ENTER_ANY_CAR_AS_DRIVER = 717,
			TASK_COMPLEX_CAR_DRIVE_TIMED = 719,
			TASK_COMPLEX_DRIVE_POINT_ROUTE = 721,
			TASK_COMPLEX_CAR_SET_TEMP_ACTION = 723,
			TASK_COMPLEX_CAR_DRIVE_MISSION = 724,
			TASK_COMPLEX_CAR_DRIVE = 725,
			TASK_COMPLEX_CAR_DRIVE_MISSION_FLEE_SCENE = 726,
			TASK_COMPLEX_CAR_DRIVE_MISSION_KILLED_PED = 729,
			TASK_COMPLEX_PLAYER_DRIVE = 732,
			TASK_COMPLEX_NEW_GET_IN_VEHICLE = 734,
			TASK_COMPLEX_OPEN_VEHICLE_DOOR = 735,
			TASK_COMPLEX_CLIMB_INTO_VEHICLE = 736,
			TASK_COMPLEX_CLEAR_VEHICLE_SEAT = 737,
			TASK_COMPLEX_NEW_EXIT_VEHICLE = 738,
			TASK_COMPLEX_SHUFFLE_BETWEEN_SEATS = 739,
			TASK_COMPLEX_GANG_DRIVEBY = 740,
			TASK_COMPLEX_CLOSE_VEHICLE_DOOR = 741,
			TASK_COMPLEX_BACK_OFF = 742,
			TASK_COMPLEX_BE_ARRESTED_AND_DRIVEN_AWAY = 743,
			TASK_COMPLEX_ARRESTED_AI_PED_AND_DRIVE_AWAY = 744,
			TASK_COMPLEX_GO_TO_CAR_DOOR_AND_STAND_STILL = 800,
			TASK_SIMPLE_CAR_ALIGN = 801,
			TASK_SIMPLE_CAR_OPEN_DOOR_FROM_OUTSIDE = 802,
			TASK_SIMPLE_CAR_OPEN_LOCKED_DOOR_FROM_OUTSIDE = 803,
			TASK_SIMPLE_CAR_CLOSE_DOOR_FROM_INSIDE = 805,
			TASK_SIMPLE_CAR_CLOSE_DOOR_FROM_OUTSIDE = 806,
			TASK_SIMPLE_CAR_GET_IN = 807,
			TASK_SIMPLE_CAR_SHUFFLE = 808,
			TASK_SIMPLE_CAR_SET_PED_IN_VEHICLE = 811,
			TASK_SIMPLE_CAR_GET_OUT = 813,
			TASK_SIMPLE_CAR_JUMP_OUT = 814,
			TASK_SIMPLE_CAR_SET_PED_OUT = 816,
			TASK_SIMPLE_CAR_SLOW_DRAG_OUT_PED = 820,
			TASK_SIMPLE_CAR_SLOW_BE_DRAGGED_OUT = 821,
			TASK_SIMPLE_SET_PED_AS_AUTO_DRIVER = 827,
			TASK_SIMPLE_WAIT_UNTIL_PED_IS_OUT_OF_CAR = 829,
			TASK_SIMPLE_CREATE_CAR_AND_GET_IN = 832,
			TASK_SIMPLE_START_CAR = 835,
			TASK_SIMPLE_SHUNT = 836,
			TASK_SIMPLE_SMASH_CAR_WINDOW = 838,
			TASK_SIMPLE_MOVE_GO_TO_POINT = 900,
			TASK_COMPLEX_GO_TO_POINT_SHOOTING = 901,
			TASK_COMPLEX_GO_TO_POINT_AND_STAND_STILL = 903,
			TASK_COMPLEX_MOVE_FOLLOW_POINT_ROUTE = 905,
			TASK_COMPLEX_MOVE_SEEK_ENTITY = 907,
			TASK_COMPLEX_SMART_FLEE_POINT = 910,
			TASK_COMPLEX_SMART_FLEE_ENTITY = 911,
			TASK_COMPLEX_FOLLOW_LEADER_IN_FORMATION = 913,
			TASK_COMPLEX_GO_TO_ATTRACTOR = 915,
			TASK_COMPLEX_MOVE_AVOID_OTHER_PED_WHILE_WONDERING = 917,
			TASK_COMPLEX_GO_TO_POINT_ANY_MEANS = 918,
			TASK_COMPLEX_SEEK_ENTITY_ANY_MEANS = 922,
			TASK_COMPLEX_FOLLOW_LEADER_ANY_MEANS = 923,
			TASK_COMPLEX_GO_TO_POINT_AIMING = 924,
			TASK_COMPLEX_FLEE_ANY_MEANS = 927,
			TASK_COMPLEX_FLEE_SHOOTING = 928,
			TASK_COMPLEX_FOLLOW_PATROL_ROUTE = 931,
			TASK_COMPLEX_SEEK_ENTITY_AIMING = 933,
			TASK_COMPLEX_FOLLOW_PED_FOOTSTEPS = 936,
			TASK_COMPLEX_MOVE_FOLLOW_NAV_MESH_ROUTE = 942,
			TASK_SIMPLE_MOVE_GO_TO_POINT_ON_ROUTE = 943,
			TASK_COMPLEX_ESCAPE_BLAST = 944,
			TASK_COMPLEX_MOVE_GET_TO_POINT_CONTINUOUS = 945,
			TASK_COMPLEX_COP = 946,
			TASK_COMPLEX_SEARCH_FOR_PED_ON_FOOT = 947,
			TASK_COMPLEX_SEARCH_FOR_PED_IN_CAR = 948,
			TASK_COMPLEX_MOVE_WANDER = 949,
			TASK_COMPLEX_MOVE_BE_IN_FORMATION = 950,
			TASK_COMPLEX_MOVE_CROWD_AROUND_LOCATION = 951,
			TASK_COMPLEX_MOVE_CROSS_ROAD_AT_TRAFFIC_LIGHTS = 952,
			TASK_COMPLEX_MOVE_WAIT_FOR_TRAFFIC = 953,
			TASK_COMPLEX_MOVE_GO_TO_POINT_STAND_STILL_ACHIVE_HEADING = 955,
			TASK_COMPLEX_MOVE_RETURN_TO_ROUTE = 958,
			TASK_COMPLEX_MOVE_GO_TO_SHELTER_AND_WAIT = 959,
			TASK_COMPLEX_MOVE_GET_ON_TO_MAIN_NAV_MESH = 960,
			TASK_COMPLEX_MOVE_GO_TO_POINT_RELATIVE_TO_ENTITY_AND_STAND_STILL = 962,
			TASK_COMPLEX_COP_HELICOPTOR = 963,
			TASK_COMPLEX_HELICOPTOR_STRAFE = 964,
			TASK_COMPLEX_FLEE_AND_DRIVE = 966,
			TASK_COMPLEX_GET_OUT_OF_WATER = 967,
			TASK_COMPLEX_DESTROY_CAR = 1003,
			TASK_COMPLEX_DESTROY_CAR_ARMED = 1005,
			TASK_SIMPLE_THROW_PROJECTILE = 1018,
			TASK_COMPLEX_SEEK_COVER = 1036,
			TASK_COMPLEX_AIM_AND_THROW_PROJECTILE = 1038,
			TASK_SIMPLE_PLAYER_AIM_PROJECTILE = 1039,
			TASK_COMPLEX_GUN = 1040,
			TASK_SIMPLE_AIM_GUN = 1041,
			TASK_SIMPLE_FIRE_GUN = 1042,
			TASK_SIMPLE_RELOAD_GUN = 1043,
			TASK_COMPLEX_SLIDE_INTO_COVER = 1044,
			TASK_COMPLEX_PLAYER_IN_COVER = 1046,
			TASK_COMPLEX_GO_INTO_COVER = 1047,
			TASK_COMPLEX_COMBAT_CLOSEST_TARGET_IN_AREA = 1048,
			TASK_SIMPLE_NEW_GANG_DRIVE_BY = 1049,
			TASK_COMPLEX_COMBAT_ADDITIONAL_TASK = 1050,
			TASK_COMPLEX_NEW_USE_COVER = 1054,
			TASK_COMPLEX_THROW_PROJECTILE = 1058,
			TASK_COMPLEX_ARREST_PED = 1101,
			TASK_COMPLEX_GANG_HASSLE_PED = 1212,
			TASK_SIMPLE_MOVE_SWIM = 1304,
			TASK_COMPLEX_MOVE_ABOUT_INJURED = 1310,
			TASK_COMPLEX_REVIVE = 1311,
			TASK_COMPLEX_REACT = 1312,
			TASK_COMPLEX_COMBAT = 1900,
			TASK_COMPLEX_COMBAT_FIRE_SUBTASK = 1901,
			TASK_COMPLEX_COMBAT_ADVANCE_SUBTASK = 1902,
			TASK_COMPLEX_COMBAT_SEEK_COVER_SUBTASK = 1903,
			TASK_COMPLEX_COMBAT_RETREAT_SUBTASK = 1904,
			TASK_COMPLEX_COMBAT_CHARGE_SUBTASK = 1905,
			TASK_COMPLEX_COMBAT_INVESTIGATE_SUBTASK = 1906,
			TASK_COMPLEX_COMBAT_PULL_FROM_CAR_SUBTASK = 1907,
			TASK_COMPLEX_COMBAT_PERSUE_IN_CAR_SUBTASK = 1908,
			TASK_COMPLEX_COMBAT_BUST_PED = 1910,
			TASK_COMPLEX_COMBAT_EXECUTE_PED_SUBTASK = 1911,
			TASK_COMPLEX_COMBAT_FLANK_SUBTASK = 1913,
			TASK_COMPLEX_SET_AND_GUARD_AREA = 1932,
			TASK_COMPLEX_STAND_GUARD = 1933,
			TASK_COMPLEX_SEPERATE = 1934,
			TASK_SIMPLE_NM_RELAX = 2104,
			TASK_SIMPLE_NM_POSE = 2105,
			TASK_SIMPLE_NM_BRACE = 2106,
			TASK_SIMPLE_NM_SHOT = 2107,
			TASK_SIMPLE_NM_HIGH_FALL = 2108,
			TASK_SIMPLE_NM_BALANCE = 2109,
			TASK_SIMPLE_NM_EXPLOSION = 2110,
			TASK_SIMPLE_NM_ON_FIRE = 2111,
			TASK_SIMPLE_NM_SCRIPT_CONTROL = 2112,
			TASK_SIMPLE_NM_JUMP_ROLL_FROM_ROAD_VEHICLE = 2113,
			TASK_SIMPLE_NM_SIT = 2115,
			TASK_SIMPLE_BLEND_FROM_NM = 2117,
			TASK_COMPLEX_NM = 2118,
			TASK_TYPE_NONE = 9999
		};

		public enum class eHudColour
		{
			HUD_COLOUR_PURE_WHITE,
			HUD_COLOUR_WHITE,
			HUD_COLOUR_BLACK,
			HUD_COLOUR_GREY,
			HUD_COLOUR_RED,
			HUD_COLOUR_REDLIGHT,
			HUD_COLOUR_REDDARK,
			HUD_COLOUR_BLUE,
			HUD_COLOUR_BLUELIGHT,
			HUD_COLOUR_BLUEDARK,
			HUD_COLOUR_YELLOW,
			HUD_COLOUR_YELLOWLIGHT,
			HUD_COLOUR_YELLOWDARK,
			HUD_COLOUR_ORANGE,
			HUD_COLOUR_ORANGELIGHT,
			HUD_COLOUR_ORANGEDARK,
			HUD_COLOUR_GREEN,
			HUD_COLOUR_GREENLIGHT,
			HUD_COLOUR_GREENDARK,
			HUD_COLOUR_PURPLE,
			HUD_COLOUR_PURPLELIGHT,
			HUD_COLOUR_PURPLEDARK,
			HUD_COLOUR_PINK,
			HUD_COLOUR_STAR,
			HUD_COLOUR_STARLIGHT,
			HUD_COLOUR_STARDARK,
			HUD_COLOUR_NET_PLAYER1,
			HUD_COLOUR_NET_PLAYER2,
			HUD_COLOUR_NET_PLAYER3,
			HUD_COLOUR_NET_PLAYER4,
			HUD_COLOUR_NET_PLAYER5,
			HUD_COLOUR_NET_PLAYER6,
			HUD_COLOUR_NET_PLAYER7,
			HUD_COLOUR_NET_PLAYER8,
			HUD_COLOUR_NET_PLAYER9,
			HUD_COLOUR_NET_PLAYER10,
			HUD_COLOUR_NET_PLAYER11,
			HUD_COLOUR_NET_PLAYER12,
			HUD_COLOUR_NET_PLAYER13,
			HUD_COLOUR_NET_PLAYER14,
			HUD_COLOUR_NET_PLAYER15,
			HUD_COLOUR_NET_PLAYER16,
			HUD_COLOUR_NET_PLAYER17,
			HUD_COLOUR_NET_PLAYER18,
			HUD_COLOUR_NET_PLAYER19,
			HUD_COLOUR_NET_PLAYER20,
			HUD_COLOUR_NET_PLAYER21,
			HUD_COLOUR_NET_PLAYER22,
			HUD_COLOUR_NET_PLAYER23,
			HUD_COLOUR_NET_PLAYER24,
			HUD_COLOUR_NET_PLAYER25,
			HUD_COLOUR_NET_PLAYER26,
			HUD_COLOUR_NET_PLAYER27,
			HUD_COLOUR_NET_PLAYER28,
			HUD_COLOUR_NET_PLAYER29,
			HUD_COLOUR_NET_PLAYER30,
			HUD_COLOUR_NET_PLAYER31,
			HUD_COLOUR_NET_PLAYER32,
			HUD_COLOUR_SIMPLEBLIP_DEFAULT,
			HUD_COLOUR_MENU_BLUE,
			HUD_COLOUR_MENU_GREY_LIGHT,
			HUD_COLOUR_MENU_BLUE_EXTRA_DARK,
			HUD_COLOUR_MENU_YELLOW,
			HUD_COLOUR_MENU_YELLOW_DARK,
			HUD_COLOUR_MENU_GREEN,
			HUD_COLOUR_MENU_GREY,
			HUD_COLOUR_MENU_GREY_DARK,
			HUD_COLOUR_MENU_HIGHLIGHT,
			HUD_COLOUR_MENU_STANDARD,
			HUD_COLOUR_MENU_DIMMED,
			HUD_COLOUR_MENU_EXTRA_DIMMED,
			HUD_COLOUR_BRIEF_TITLE,
			HUD_COLOUR_MID_GREY_MP,

			// E1 & E2
			HUD_COLOUR_RADAR_HEALTH = HUD_COLOUR_STAR,
			HUD_COLOUR_RADAR_ARMOUR,
			HUD_COLOUR_RADAR_DAMAGE,
		};

		public enum class eFontScaling
		{
			/// <summary>
			/// A value between 0 and 20, where 20 equals full screen size
			/// </summary>
			FontSize,
			/// <summary>
			/// A value between 0 and 1, where 1 equals full screen size
			/// </summary>
			ScreenUnits,
			/// <summary>
			/// A value between 0 and the maximum screen resolution (check CGame.Resolution to get the size)
			/// </summary>
			Pixel,
		};

		public enum class eFontEffect
		{
			None,
			Shadow,
			Edge
		};

		public enum class eConsoleLogStyle
		{
			Default,
			Debug,
			Warning,
			Error
		};

		public enum class eLineOfSightFlags
		{
			STATIC_COLLISION = 2,
			BUILDINGS = 4,
			VEHICLES = 8,
			PEDS_BOUNDING_BOX = 32,
			PEDS_COLLISION = 64,
			OBJECTS = 128
		};

		public enum class eCamType
		{
			CAM_SKELETON = 0,
			CAM_FOLLOW_PED = 1,
			CAM_FOLLOW_VEHICLE = 2,
			CAM_INTERP = 3,
			CAM_SHAKE = 4,
			CAM_FINAL = 5,
			CAM_SCRIPT = 6,
			CAM_GAME = 7,
			CAM_TRANS = 8,
			CAM_AIM_WEAPON = 9,
			CAM_BUSTED = 10,
			CAM_PHOTO = 11,
			CAM_IDLE = 12,
			CAM_2_PLAYER = 13,
			CAM_SCRIPTED = 14,
			CAM_CUTSCENE = 15,
			CAM_WASTED = 16,
			CAM_1ST_PERSON = 17,
			CAM_2_PLAYER_VEH = 18,
			CAM_AIM_WEAPON_VEH = 19,
			CAM_VIEWPORTS = 20,
			CAM_HISTORY = 21,
			CAM_CINEMATIC = 22,
			CAM_CINEMATIC_HELI_CHASE = 23,
			CAM_CINEMATIC_CAM_MAN = 24,
			CAM_SPLINE = 25,
			CAM_CINEMATOGRAPHY = 26,
			CAM_FPS_WEAPON = 27,
			CAM_FIRE_TRUCK = 28,
			CAM_RADAR = 29,
			CAM_WEAPON_AIMING = 30,
			CAM_ANIMATED = 31,
			CAM_INTERMEZZO = 32,
			CAM_VIEW_SEQ = 33,
			CAM_VIEWFIND = 34,
			CAM_PLAYER_SETTINGS = 35,
			CAM_CINEMATIC_VEH_OFFSET = 36,
			CAM_REPLAY = 37,
			CAM_FREE = 38,
			CAM_DEBUG = 39,
			CAM_MARKET = 40,
			CAM_SECTOR = 41
		};

		public enum class eSettings
		{
			SETTING_AUTOSAVE = -0x10,
			SETTING_VIBRATION = -0x8,
			SETTING_INVERT_MOUSE = 0x0,
			SETTING_INVERT_RIGHT_STICK = 0x4,
			SETTING_AUTO_AIMING = 0x8,
			SETTING_AIM_SENSITIVITY = 0xC,
			SETTING_SNIPER_AIM = 0x10,
			SETTING_CONFIGURATION = 0x14,
			SETTING_BRIGHTNESS = 0x18,
			SETTING_CONTRAST = 0x1C,
			SETTING_SATURATION = 0x20,
			SETTING_SUBTITLES = 0x28,
			SETTING_HUD = 0x2C,
			SETTING_WEAPON_TARGET = 0x30,
			SETTING_GPS_ROUTE = 0x34,
			SETTING_HANDBRAKE_CAM = 0x38,
			SETTING_RADAR = 0x3C,
			SETTING_MUSIC_LEVEL_SP = 0x44,
			SETTING_MUSIC_LEVEL = 0x48,
			SETTING_SFX_LEVEL = 0x4C,
			SETTING_GPS_SPEECH = 0x5C,
			SETTING_LANGUAGE_1 = 0x68,
			SETTING_LANGUAGE_2 = 0x6C,
			SETTING_OUTPUT = 0x114,
			SETTING_VOICE_CHAT = 0x120,
			SETTING_NOISE_EFFECT = 0x20C,
			SETTING_MOUSE_SENSITIVITY = 0x210,
			SETTING_ALWAYS_STRAFE = 0x214,
			SETTING_MOUSE_AIM = 0x218,
			SETTING_MOUSE_WHEEL_SENSITIVITY = 0x21C,
			SETTING_VIDEO_MODE = 0x220,
			SETTING_ASPECT_RATIO = 0x228,
			SETTING_TEXTURE_QUALITY = 0x22C,
			SETTING_TEXTURE_FILTER_QUALITY = 0x230,
			SETTING_VIEW_DISTANCE = 0x234,
			SETTING_DETAIL_DISTANCE = 0x238,
			SETTING_VEHICLE_DENSITY = 0x23C,
			SETTING_DEFINITION = 0x240,
			SETTING_VSYNC = 0x244,
			SETTING_NIGHT_SHADOWS = 0x248,
			SETTING_SHADOW_QUALITY = 0x24C,
			SETTING_REFLECTION_RESOLUTION = 0x250,
			SETTING_WATER_QUALITY = 0x254,
			SETTING_CLIP_CAPTURE = 0x258,
			SETTING_ALWAYS_SPRINT = 0x25C,
			SETTING_CROUCH = 0x260,
			SETTING_AUTO_SCAN = 0x268,
			SETTING_INDEPENDENCE_FM_MODE = 0x26C,
			SETTING_MICROPHONE = 0x270,
			SETTING_ENABLE_DIRECTINPUT = 0x274,
			SETTING_HELICOPTER_MOUSE_CONTROLS = 0x278
		};

		public enum class eNewGetInVehicleType
		{
			/// <summary>
			/// Get into the passenger seat if the driver is friendly.
			/// </summary>
			GET_IN_NETWORK = -5,

			/// <summary>
			/// Trains will only work using this type but regular cars are unaffected.
			/// </summary>
			GET_IN_TRAIN = -6,

			/// <summary>
			/// The default.
			/// </summary>
			GET_IN_DEFAULT_PLAYER = -7
		};

		public enum class eMissionCompleteAudio : uint32_t
		{
			MISSION_COMPLETE_1 = 1,
			SMC_6 = 5,
			SMC_7 = 7,
			SMC_10 = 10,
			SMC_11 = 11,
			SMC_15 = 15,
			SMC_18 = 18,
			SMC_24 = 24,
			SMC_25 = 25,
			SMC_27 = 27,
			SMC_28 = 28,
			SMC_33 = 33,
			SMC_34 = 34,
			SMC_35 = 35,
			SMC_42 = 42,
			SMC_43 = 43,
			SMC_50 = 50,
			SMC_51 = 51,
			SMC_52 = 52,
			SMC_53 = 53,
			SMC_54 = 54,
			SMC_55 = 55,
			SMC_56 = 56,
			SMC_57 = 57,
			SMC_58 = 58,
			SMC_59 = 59,
			SMC_60 = 60,
			SMC_61 = 61,
			SMC_62 = 62,
			SMC_63 = 63,
			SMC_64 = 64,
			SMC_65 = 65,
			SMC_66 = 66,
			SMC_67 = 67,
			SMC_68 = 68,
			SMC_69 = 69,
			SMC_71 = 71
		};

		public enum class eRadarSprite
		{
			SPRITE_HIGHER,
			SPRITE_LEVEL,
			SPRITE_LOWER,
			SPRITE_OBJECTIVE_HIGHER,
			SPRITE_OBJECTIVE,
			SPRITE_OBJECTIVE_LOWER,
			SPRITE_CENTRE,
			SPRITE_NORTH,
			SPRITE_WAYPOINT,
			SPRITE_WEAPON_PISTOL,
			SPRITE_WEAPON_SHOTGUN,
			SPRITE_WEAPON_SMG,
			SPRITE_WEAPON_ASSAULT_RIFLE,
			SPRITE_WEAPON_ROCKET,
			SPRITE_WEAPON_GRENADES,
			SPRITE_WEAPON_MOLOTOV,
			SPRITE_WEAPON_SNIPER,
			SPRITE_WEAPON_BAT,
			SPRITE_WEAPON_KNIFE,
			SPRITE_WEAPON_HEALTH,
			SPRITE_WEAPON_ARMOUR,
			SPRITE_BURGERSHOT,
			SPRITE_CHICKEN,
			SPRITE_VLAD,
			SPRITE_INTERNET,
			SPRITE_MANNY,
			SPRITE_LITTLEJACOB,
			SPRITE_ROMAN,
			SPRITE_FAUSTIN,
			SPRITE_SAFEHOUSE,
			SPRITE_TAXI,
			SPRITE_BERNIECRANE,
			SPRITE_BRUCIE,
			SPRITE_CIA,
			SPRITE_DWAYNE,
			SPRITE_ELIZABETA,
			SPRITE_GAMBETTI,
			SPRITE_JIMMY,
			SPRITE_MCDERRICK,
			SPRITE_MCFRANCIS,
			SPRITE_MCGERRY,
			SPRITE_MCKATIE,
			SPRITE_MCPACKIE,
			SPRITE_PHILBELL,
			SPRITE_PLAYBOYX,
			SPRITE_RAYBOCCINO,
			SPRITE_8BALL,
			SPRITE_BAR,
			SPRITE_BOATTOUR,
			SPRITE_BOWLING,
			SPRITE_CLOTHES,
			SPRITE_CLUB,
			SPRITE_DARTS,
			SPRITE_DWAYNE_RED,
			SPRITE_GIRLFRIEND,
			SPRITE_PLAYBOYX_RED,
			SPRITE_HELITOUR,
			SPRITE_RESTAURANT,
			SPRITE_STATION,
			SPRITE_WEAPONS,
			SPRITE_POLICE,
			SPRITE_FIRE,
			SPRITE_HOSPITAL,
			SPRITE_MALE,
			SPRITE_FEMALE,
			SPRITE_RACEFLAG,
			SPRITE_STRIPCLUB,
			SPRITE_EMPTY,
			SPRITE_POLICE_CHASE,
			SPRITE_DIMITRI,
			SPRITE_COMEDY,
			SPRITE_CABARET,
			SPRITE_RANSOM,
			SPRITE_POLICE_HELI,
			SPRITE_MICHELLE,
			SPRITE_SPRAYSHOP,
			SPRITE_ASSASSIN,
			SPRITE_SNAKE,
			SPRITE_DEAL,
			SPRITE_CAR,
			SPRITE_LAWYER,
			SPRITE_CUP,
			SPRITE_MULTIPLAYER,
			SPRITE_STATION_3,
			SPRITE_STATION_8,
			SPRITE_STATION_A,
			SPRITE_STATION_B,
			SPRITE_STATION_C,
			SPRITE_STATION_E,
			SPRITE_STATION_J,
			SPRITE_STATION_K,
			SPRITE_CARWASH,
			SPRITE_UNITED_LIBERTY_PAPER,
			SPRITE_WEAPON_UP,
			SPRITE_WEAPON_DOWN,
			SPRITE_EPISODE_BLIP_1,
			SPRITE_EPISODE_BLIP_2,
			SPRITE_EPISODE_BLIP_3,
			SPRITE_EPISODE_BLIP_4,
			SPRITE_EPISODE_BLIP_5,
			SPRITE_EPISODE_BLIP_6,
			SPRITE_EPISODE_BLIP_7,
			SPRITE_EPISODE_BLIP_8,
			SPRITE_EPISODE_BLIP_9,
			SPRITE_EPISODE_BLIP_10,
			SPRITE_EPISODE_BLIP_11,
			SPRITE_EPISODE_BLIP_12,
			SPRITE_EPISODE_BLIP_13,
			SPRITE_EPISODE_BLIP_14,
			SPRITE_EPISODE_BLIP_15,
			SPRITE_ARMWRESTLING,
			SPRITE_ROADRAGE,
			SPRITE_CARDGAME,
			SPRITE_AIRHOCKEY,
			SPRITE_GANGWAR,
			SPRITE_WEAPON_POOLCUE,
			SPRITE_WEAPON_PIPEBOMB,
			SPRITE_WEAPON_GRENADELAUNCHER,
			SPRITE_TERRY,
			SPRITE_CLAY,
			SPRITE_TERRITORY_1,
			SPRITE_TERRITORY_2,
			SPRITE_TERRITORY_3,
			SPRITE_TERRITORY_4,
			SPRITE_TERRITORY_5,
			SPRITE_TERRITORY_6,
			SPRITE_MOTORCYCLE,
			SPRITE_JIMSWEAPON,
			SPRITE_WEAPON_STICKYBOMB
		};

		public enum class eVigilanteCrimeType
		{
			ResistingArrest = 0,
			GrandTheftAuto = 1,
			ArmedAndDangerous = 2,
			DriveByActivity = 4,
			DrugDeal = 5,
			GangRelatedDisturbance = 6
		};

		public enum class eNaturalMotionMessageID : int
		{
			nm000_stopAllBehaviours = 0,
			nm008_bodyRelax = 8,
			nm014_configureBalance = 14,
			nm023_defineAttachedObject = 23,
			nm028_setStiffness = 28,
			nm041_bodyWrithe = 41,
			nm059_armsWindmillAdaptive = 59,
			nm067_pedalLegs = 67,
			nm079_bodyBalance = 79,
			nm114_leanInDirection = 114,
			nm119_leanToPosition = 119,
			nm124_leanTowardsObject = 124,
			nm130_braceForImpact = 130,
			nm145_upperBodyFlinch = 145,
			nm161_grab = 161,
			nm189_catchFall = 189,
			nm198_shot = 198,
			nm234_shotRelax = 234,
			nm237_headLook = 237,
			nm246_highFall = 246,
			nm267_stayUpright = 267,
			nm270_rollDownStairs = 270,
			nm289_fallOverWall = 289,
			nm299_pointArm = 299,
		};

		public enum class eNaturalMotionStringID : int
		{
			nm000_stopAllBehaviours, //FUNC
			nm001,
			nm002_start,
			nm003_activePose,
			nm004,
			nm005_mask,
			nm006_incomingTransforms,
			nm007,

			nm008_bodyRelax, //FUNC
			nm009,
			nm010_relaxation,
			nm011_mask,
			nm012_holdPose,
			nm013_damping,

			nm014_configureBalance, //FUNC
			nm015,
			nm016_stepHeight,
			nm017_legStiffness,
			nm018_taperKneeStrength,
			nm019_balanceAbortThreshold,
			nm020_stepClampScale,
			nm021_configureBalanceReset,
			nm022,

			nm023_defineAttachedObject, //FUNC
			nm024,
			nm025_partIndex,
			nm026_worldPos,
			nm027_objectMass,

			nm028_setStiffness, //FUNC
			nm029,
			nm030_mask,
			nm031_bodyStiffness,
			nm032_damping,
			nm033_bodyRollUp,
			nm034_Roll_Up,
			nm035_mask,
			nm036_stiffness,
			nm037_legPush,
			nm038_armReachAmount,
			nm039_useArmToSlowDown,
			nm040_asymmetricalLegs,

			nm041_bodyWrithe, //FUNC
			nm042,
			nm043_armStiffness,
			nm044_legStiffness,
			nm045_backStiffness,
			nm046_legPeriod,
			nm047_armPeriod,
			nm048_backPeriod,
			nm049_legDamping,
			nm050_armDamping,
			nm051_backDamping,
			nm052_legAmplitude,
			nm053_armAmplitude,
			nm054_backAmplitude,
			nm055_kneeAmplitude,
			nm056_elbowAmplitude,
			nm057_mask,
			nm058_rollOverFlag,

			nm059_armsWindmillAdaptive, //FUNC
			nm060,
			nm061_armStiffness,
			nm062_bodyStiffness,
			nm063_period,
			nm064_amplitude,
			nm065_phase,
			nm066_disableOnImpact, //true

			nm067_pedalLegs, //FUNC
			nm068,
			nm069_backPedal,
			nm070_legStiffness,
			nm071_pedalLeftLeg,
			nm072_pedalRightLeg,
			nm073_radius,
			nm074_angularSpeed,
			nm075_pedalOffset,
			nm076_speedAsymmetry,
			nm077_adaptivePedal4Dragging,
			nm078_angSpeedMultiplier4Dragging,

			nm079_bodyBalance, //FUNC
			nm080_balance,
			nm081_bodyStiffness, // 8.4
			nm082_damping,	// 0.7
			nm083_elbow, // 1.95
			nm084_shoulder, // 1.4
			nm085_maxSteps, // 65535
			nm086_useHeadLook,
			nm087_headLookPos,
			nm088_headLookInstanceIndex,
			nm089_headLookAlwaysTimeout, // 8.7
			nm090_somersaultAngle,
			nm091_somersaultAngleThreshold, // 0.1
			nm092_sideSomersaultAngle,
			nm093_sideSomersaultAngleThreshold, // 0.1
			nm094_returningToBalanceArmsOut, // 1.0
			nm095_armsOutOnPush, // True
			nm096_armsOutStraightenElbows,
			nm097_armsOutMinLean2,
			nm098_bodyTurnTimeout,		// 0.6
			nm099_angVelMultiplier,
			nm100_angVelThreshold,
			nm101_armsOutOnPushMultiplier, // 0.8
			nm102_armsOutOnPushTimeout, // 999.0
			nm103_useBodyTurn,
			nm104_elbowAngleOnContact,
			nm105_bendElbowsTime,
			nm106_bendElbowsGait, // -0.3
			nm107_headLookAtVelProb,
			nm108_turnOffProb,		// 0.0
			nm109_turn2VelProb,		// 0.2
			nm110_turnAwayProb,		// 0.0
			nm111_turnLeftProb,		// 0.1
			nm112_turnRightProb,		// 0.1
			nm113_turn2TargetProb,	// 0.6

			nm114_leanInDirection, //FUNC
			nm115,
			nm116_dir,
			nm117_leanAmount,
			nm118_applyAsForce,

			nm119_leanToPosition, //FUNC
			nm120,
			nm121_pos,
			nm122_leanAmount,
			nm123_applyAsForce,

			nm124_leanTowardsObject, //FUNC
			nm125,
			nm126_offset,
			nm127_leanAmount,
			nm128_instanceIndex,
			nm129_applyAsForce,

			nm130_braceForImpact, //FUNC
			nm131,
			nm132_pos,
			nm133_look,
			nm134_instanceIndex,
			nm135_braceDistance,
			nm136_reachAbsorbtionTime,
			nm137_targetPredictionTime,
			nm138_bodyStiffness,
			nm139_grabDontLetGo,
			nm140_grabStrength,
			nm141_grabDistance,
			nm142_grabReachAngle,
			nm143_grabHoldTimer,
			nm144_legStiffness,

			nm145_upperBodyFlinch, //FUNC
			nm146,
			nm147_pos,
			nm148_leftHanded,
			nm149_rightHanded,
			nm150_handDistanceVertical,
			nm151_handDistanceLeftRight,
			nm152_handDistanceFrontBack,
			nm153_bodyStiffness,
			nm154_bodyDamping,
			nm155_backBendAmount,
			nm156_useLeftArm,
			nm157_useRightArm,
			nm158_noiseScale,
			nm159_newHit,
			nm160_turnTowards,

			nm161_grab, //FUNC
			nm162_RightArmGrab,
			nm163_bodyStiffness,
			nm164_grabStrength,
			nm165_pos1,
			nm166_pos2,
			nm167_pos3,
			nm168_pos4,
			nm169_normalL,
			nm170_normalR,
			nm171_linegrab,
			nm172_surfaceGrab,
			nm173_justbrace,
			nm174_tryToPullUp,
			nm175_useLeft,
			nm176_useRight,
			nm177_instanceIndex,
			nm178_dontLetGo,
			nm179_grabDist,
			nm180_reachAngle,
			nm181_oneSideReachAngle,
			nm182_pullUpStrengthLeft,
			nm183_pullUpStrengthRight,
			nm184_pullUpTime,
			nm185_grabHoldMaxTimer,
			nm186_instancePartIndex,
			nm187,
			nm188_LeftArmGrab,

			nm189_catchFall, //FUNC
			nm190_Catch_Fall_2,
			nm191_legsStiffness,
			nm192_armsStiffness,
			nm193_torsoStiffness,
			nm194_backwardsMinArmOffset,
			nm195_forwardMaxArmOffset,
			nm196_zAxisSpinReduction,
			nm197_useHeadLook,

			nm198_shot, //FUNC
			nm199_Shot,
			nm200_bodyStiffness,
			nm201_bodyPart,
			nm202_crouching,
			nm203_reachForWound, // true
			nm204_fling,
			nm205_chickenArms,
			nm206_grabHoldTime,
			nm207_maxSteps,
			nm208_loosenessAmount,
			nm209_stableHandsAndNeck,
			nm210_useHeadLook,
			nm211_hitPoint,
			nm212_bulletVel,
			nm213_normal,
			nm214_headLook,
			nm215_timeBeforeReachForWound, // 0.1
			nm216_timeBeforeCollapseWoundLeg, // 2.0
			nm217_spinePainTime,
			nm218_spinePainMultiplier,
			nm219_spinePainTwistMultiplier,
			nm220_useCatchFallOnFall,
			nm221_headLookAtWoundMinTimer,
			nm222_headLookAtWoundMaxTimer,
			nm223_headLookAtHeadPosMinTimer,
			nm224_headLookAtHeadPosMaxTimer,
			nm225_melee,
			nm226_addShockSpin,
			nm227_randomizeShockSpinDirection,
			nm228_alwaysAddShockSpin,
			nm229_shockSpinMin,
			nm230_shockSpinMax,
			nm231_shockSpinLiftForceMult,
			nm232_shockSpinDecayMult,
			nm233_shockSpinScalePerComponent,

			nm234_shotRelax, //FUNC
			nm235,
			nm236_relaxPeriod,

			nm237_headLook, //FUNC
			nm238,
			nm239_damping,
			nm240_stiffness,
			nm241_instanceIndex,
			nm242_vel,
			nm243_pos,
			nm244_alwaysLook,
			nm245_alwaysEyesHorizontal,

			nm246_highFall,
			nm247_HighFall,
			nm248_bodyStiffness,
			nm249_bodydamping,
			nm250_pdStrength,
			nm251_crashOrLandCutOff,
			nm252_landCutOffVelocity,
			nm253_catchfalltime,
			nm254_armsUp,
			nm255_legRadius,
			nm256_legAngSpeed,
			nm257_armPeriod,
			nm258_armAmplitude,
			nm259_fowardRoll,
			nm260_aimAngleBase,
			nm261_sideD,
			nm262_fowardOffsetOfLegIK,
			nm263_fowardVelRotation,
			nm264_orientateBodyToFallDirection,
			nm265_useZeroPose,
			nm266_ignorWorldCollisions,

			nm267_stayUpright, //FUNC
			nm268,
			nm269_stiffness,

			nm270_rollDownStairs, //FUNC
			nm271,
			nm272_stiffness,
			nm273_damping,
			nm274_forcemag,
			nm275_asymmetry,
			nm276_m_useArmToSlowDown,
			nm277_useZeroPose,
			nm278_spinWhenInAir,
			nm279_m_legPush,
			nm280_armReachLength,
			nm281_m_armReachAmount,
			nm282_tryToAvoidHeadbuttingGround,
			nm283_useCustomRollDir,
			nm284_customRollDir,
			nm285_stiffnessDecayTime,
			nm286_stiffnessDecayTarget,
			nm287_asymmetricalLegs,
			nm288_zAxisSpinReduction,

			nm289_fallOverWall, //FUNC
			nm290,
			nm291_bodyStiffness,
			nm292_damping,
			nm293_magOfForce,
			nm294_maxDistanceFromPelToHitPoint,
			nm295_useSpecifiedPoint,
			nm296_fallOverPoint,
			nm297_fallOverEdge,
			nm298_bodyTwist,

			nm299_pointArm, //FUNC
			nm300,
			nm301_target,
			nm302_twist,
			nm303_armStraightness,
			nm304_useLeftArm,
			nm305_armStiffness,
			nm306_armDamping,
			nm307_instanceIndex,
			nm308_pointSwingLimit,
			nm309_useZeroPoseWhenNotPointing,
		};

		public enum class ePhoneState : uint32_t
		{
			GAME_MODE_DEATHMATCH = 0,
			GAME_MODE_TEAM_DEATHMATCH = 1,
			GAME_MODE_MAFIYA_WORK = 2,
			GAME_MODE_TEAM_MAFIYA_WORK = 3,
			GAME_MODE_TEAM_CAR_JACK_CITY = 4,
			GAME_MODE_CAR_JACK_CITY = 5,
			GAME_MODE_RACE = 6,
			GAME_MODE_GTA_RACE = 7,
			GAME_MODE_PARTY_MODE = 8,
			GAME_MODE_UNKNOWN_9 = 9,
			GAME_MODE_COPS_AND_CROOKS = 10,
			GAME_MODE_UNKNOWN_11 = 11,
			GAME_MODE_TURF_WAR = 12,
			GAME_MODE_DEAL_BREAKER = 13,
			GAME_MODE_HANGMANS_NOOSE = 14,
			GAME_MODE_BOMB_DA_BASE_II = 15,

			GAME_MODE_FREE_MODE = 16,

			// TBoGT
			GAME_MODE_TBOGT_DEATHMATCH = 26,
			GAME_MODE_TBOGT_TEAM_DEATHMATCH = 27,
			GAME_MODE_TBOGT_RACE = 28,
			GAME_MODE_TBOGT_GTA_RACE = 29,

			// TLaD
			GAME_MODE_TLAD_DEATHMATCH = 24,
			GAME_MODE_TLAD_TEAM_DEATHMATCH = 21,
			GAME_MODE_TLAD_RACE = 20,
			GAME_MODE_TLAD_CLUB_BUSINESS = 19,
			GAME_MODE_TLAD_LONE_WOLF_BIKER = 23,
			GAME_MODE_TLAD_CHOPPER_VS_CHOPPER = 17,
			GAME_MODE_TLAD_WITNESS_PROTECTION = 18,
			GAME_MODE_TLAD_OWN_THE_CITY = 22,

			Hidden = 1000,
			Hiding = 1001,

			StartMenu = 1002,
			KeypadMenu = 1003,
			CallingNumber = 1005,
			CalledNumberBusy = 1007,
			CalledNumberConnected = 1009,

			MainMenu = 1011,

			PhonebookMenu = 1012,
			PhonebookContactOptions = 1013,

			MessagesMenu = 1014,
			OpenedMessageMenu = 1015,
			OpenedMessageOptionsMenu = 1016,

			OrganizerMenu = 1017,

			MultiplayerStartGameConfirmMessageMenu = 1036,
			MultiplayerNoGFWLConnectMessageMenu = 1041,
			MultiplayerMenu = 1047,
			MultiplayerGameModeSelectionMenu = 1049,
			MultiplayerNetworkTypeSelectionMenu = 1050,
			MultiplayerNetworkModeMenu = 1052,
			MultiplayerNetworkPrivateSlotsMenu = 1053,

			OptionsMenu = 1026,
			OptionsRingtypeMenu = 1027,
			OptionsRingtoneMenu = 1028,
			OptionsSleepModeConfirmMessageMenu = 1030,

			VideoEditorConfirmMessageMenu = 1032,

			CheatsMenu = 1035,
		};

		public enum class eLightType : uint32_t
		{
			/// <summary>
			/// A point light. They are everywhere!
			/// </summary>
			Point = 0x0,
			/// <summary>
			/// A spot light.
			/// </summary>
			Spot = 0x2,
			/// <summary>
			/// Unknown for now. Mostly appears on entities like the player or vehicles. Ambient occlusion?
			/// </summary>
			Unk1 = 0x3
		};

		[System::FlagsAttribute]
		public enum class eLightFlags : uint32_t
		{
			/// <summary>
			/// This i can spot on *almost* every light so far. Not quite sure what this is for tho.
			/// </summary>
			Unk1 = 1 << 0, // 1
			/// <summary>
			/// Unknown for now.
			/// </summary>
			Unk2 = 1 << 1, // 2
			/// <summary>
			/// This flag makes the light cast a shadow!
			/// </summary>
			CastShadow = 1 << 2, // 4
			/// <summary>
			/// This flag makes the light volumetric!
			/// </summary>
			DrawVolume = 1 << 3, // 8
			/// <summary>
			/// Pretty sure this is a flag for Flickering/Buzzing light. This is quite hard to see actually.
			/// </summary>
			Buzzing = 1 << 4, // 16
			/// <summary>
			/// Interior only? Only spotted on lights that where indoors. Tho this flag is also on street lights combined with flag 64 (ExteriorOnly).
			/// </summary>
			InteriorOnly = 1 << 5, // 32
			/// <summary>
			/// Exterior only? This i can also spot on *almost* every light so far that is outside. Entities like the player and vehicles also have this flag, when entering an interior, the light with this flag goes away. Must be exterior only!
			/// </summary>
			ExteriorOnly = 1 << 6, // 64
			/// <summary>
			/// Never actually seen being used.
			/// </summary>
			Unk3 = 1 << 7, // 128
			/// <summary>
			/// This i can spot on vehicle lights (headlights, brake lights, indicator lights and sirens).
			/// </summary>
			Vehicle = 1 << 8, // 256
			/// <summary>
			/// This i can spot on traffic lights
			/// </summary>
			TrafficLight = 1 << 9 // 512
		};

		public enum class eTimeCycleParam
		{
			Ambient0Color,
			Ambient1Color,
			DirLightColor,
			DirLightMultiplier,
			Ambient0Multiplier,
			Ambient1Multiplier,
			AOStrength,
			PedAOStrength,
			RimLightingMultiplier,
			SkyLightMultiplier,
			DirLightSpecMultiplier,
			SkyBottomColorFogDensity,
			SunCore,
			CoronaBrightness,
			CoronaSize,
			DistantCoronaBrightness,
			DistantCoronaSize,
			FarClip,
			FogStart,
			DOFStart,
			NearDOFBlur,
			FarDOFBlur,
			LowCloudsColor,
			BottomCloudsColor,
			Water,
			WaterReflectionMultiplier,
			ParticleBrightness,
			Exposure,
			BloomThreshold,
			MidGrayValue,
			BloomIntensity,
			ColorCorrection,
			ColorAdd,
			Desaturation,
			Contrast,
			Gamma,
			DesaturationFar,
			ContrastFar,
			GammaFar,
			DepthFxNear,
			DepthFxFar,
			LumMin,
			LumMax,
			LumDelay,
			CloudAlpha,
			UnusedD0,
			Temperature,
			GlobalReflectionMultiplier,
			UnusedDC,
			SkyColor,
			UnusedEC,
			SkyHorizonColor,
			UnusedFC,
			SkyEastHorizonColor,
			Unused10C,
			Cloud1Color,
			Unknown11C,
			SkyHorizonHeight,
			SkyHorizonBrightness,
			SunAxisX,
			SunAxisY,
			Cloud2Color,
			Unused13C,
			Cloud2ShadowStrength,
			Cloud2Threshold,
			Cloud2Bias1,
			Cloud2Scale,
			CloudInScatteringRange,
			Cloud2Bias2,
			DetailNoiseScale,
			DetailNoiseMultiplier,
			Cloud2Offset,
			CloudWarp,
			CloudsFadeOut,
			Cloud1Bias,
			Cloud1Detail,
			Cloud1Threshold,
			Cloud1Height,
			Unused17C,
			Cloud3Color,
			Unused18C,
			Unknown190,
			SunColor,
			Unused1AC,
			CloudsBrightness,
			DetailNoiseOffset,
			StarsBrightness,
			VisibleStars,
			MoonBrightness,
			MoonColor,
			Unused1DC,
			MoonGlow,
			MoonParam3,
			SunCenterStart,
			SunCenterEnd,
			SunSize,
			Unknown200,
			SkyBrightness,
			Unused208,
			FilmGrain,
		};

		public enum class eTrafficLightState
		{
			GREEN,
			YELLOW,
			RED,
			DISABLED,
		};

		/// <summary>
		/// A bunch of different results.
		/// </summary>
		public enum class eResult : unsigned long
		{
			/// <summary>
			/// All good!
			/// </summary>
			OK,
			/// <summary>
			/// Something unknown happened.
			/// </summary>
			Unknown,
			/// <summary>
			/// The given data is invalid.
			/// </summary>
			InvalidData,
			/// <summary>
			/// The given is invalid.
			/// </summary>
			InvalidName,
			/// <summary>
			/// ImGui is not initialized.
			/// </summary>
			ImGuiNotInitialized,
			/// <summary>
			/// Something is already added, a function already completed or whatever.
			/// </summary>
			Already,

			// D3DERR
			D3DERR_NotAvailable = D3DERR_NOTAVAILABLE,
			D3DERR_OutOfVideomemory = D3DERR_OUTOFVIDEOMEMORY,
			D3DERR_InvalidCall = D3DERR_INVALIDCALL,
			D3DXERR_InvalidData = _D3DXERR::D3DXERR_INVALIDDATA,
			OutOfMemory = E_OUTOFMEMORY,
		};

		// ImGui
		public enum class eImDrawFlags
		{
			None = 0,

			/// <summary>
			/// PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)
			/// </summary>
			Closed = 1 << 0,

			/// <summary>
			/// AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding > 0.0f, we default to all corners). Was 0x01.
			/// </summary>
			RoundCornersTopLeft = 1 << 4,

			/// <summary>
			/// AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding > 0.0f, we default to all corners). Was 0x02.
			/// </summary>
			RoundCornersTopRight = 1 << 5,

			/// <summary>
			/// AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding > 0.0f, we default to all corners). Was 0x04.
			/// </summary>
			RoundCornersBottomLeft = 1 << 6,

			/// <summary>
			/// AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding > 0.0f, we default to all corners). Wax 0x08.
			/// </summary>
			RoundCornersBottomRight = 1 << 7,

			/// <summary>
			/// AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding > 0.0f). This is NOT zero, NOT an implicit flag!
			/// </summary>
			RoundCornersNone = 1 << 8,

			RoundCornersTop = RoundCornersTopLeft | RoundCornersTopRight,
			RoundCornersBottom = RoundCornersBottomLeft | RoundCornersBottomRight,
			RoundCornersLeft = RoundCornersBottomLeft | RoundCornersTopLeft,
			RoundCornersRight = RoundCornersBottomRight | RoundCornersTopRight,
			RoundCornersAll = RoundCornersTopLeft | RoundCornersTopRight | RoundCornersBottomLeft | RoundCornersBottomRight,
			
			/// <summary>
			/// Default to ALL corners if none of the _RoundCornersXX flags are specified.
			/// </summary>
			RoundCornersDefault_ = RoundCornersAll,

			RoundCornersMask_ = RoundCornersAll | RoundCornersNone,
		};
		public enum class eImGuiKey : int
		{
			// Keyboard
			ImGuiKey_None = 0,
			ImGuiKey_Tab = 512,             // == ImGuiKey_NamedKey_BEGIN
			ImGuiKey_LeftArrow,
			ImGuiKey_RightArrow,
			ImGuiKey_UpArrow,
			ImGuiKey_DownArrow,
			ImGuiKey_PageUp,
			ImGuiKey_PageDown,
			ImGuiKey_Home,
			ImGuiKey_End,
			ImGuiKey_Insert,
			ImGuiKey_Delete,
			ImGuiKey_Backspace,
			ImGuiKey_Space,
			ImGuiKey_Enter,
			ImGuiKey_Escape,
			ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,
			ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,
			ImGuiKey_Menu,
			ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey_7, ImGuiKey_8, ImGuiKey_9,
			ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey_H, ImGuiKey_I, ImGuiKey_J,
			ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey_R, ImGuiKey_S, ImGuiKey_T,
			ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,
			ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,
			ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,
			ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,
			ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,
			ImGuiKey_Apostrophe,        // '
			ImGuiKey_Comma,             // ,
			ImGuiKey_Minus,             // -
			ImGuiKey_Period,            // .
			ImGuiKey_Slash,             // /
			ImGuiKey_Semicolon,         // ;
			ImGuiKey_Equal,             // =
			ImGuiKey_LeftBracket,       // [
			ImGuiKey_Backslash,         // \ (this text inhibit multiline comment caused by backslash)
			ImGuiKey_RightBracket,      // ]
			ImGuiKey_GraveAccent,       // `
			ImGuiKey_CapsLock,
			ImGuiKey_ScrollLock,
			ImGuiKey_NumLock,
			ImGuiKey_PrintScreen,
			ImGuiKey_Pause,
			ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,
			ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,
			ImGuiKey_KeypadDecimal,
			ImGuiKey_KeypadDivide,
			ImGuiKey_KeypadMultiply,
			ImGuiKey_KeypadSubtract,
			ImGuiKey_KeypadAdd,
			ImGuiKey_KeypadEnter,
			ImGuiKey_KeypadEqual,
			ImGuiKey_AppBack,               // Available on some keyboard/mouses. Often referred as "Browser Back"
			ImGuiKey_AppForward,

			// Gamepad (some of those are analog values, 0.0f to 1.0f)                          // NAVIGATION ACTION
			// (download controller mapping PNG/PSD at http://dearimgui.com/controls_sheets)
			ImGuiKey_GamepadStart,          // Menu (Xbox)      + (Switch)   Start/Options (PS)
			ImGuiKey_GamepadBack,           // View (Xbox)      - (Switch)   Share (PS)
			ImGuiKey_GamepadFaceLeft,       // X (Xbox)         Y (Switch)   Square (PS)        // Tap: Toggle Menu. Hold: Windowing mode (Focus/Move/Resize windows)
			ImGuiKey_GamepadFaceRight,      // B (Xbox)         A (Switch)   Circle (PS)        // Cancel / Close / Exit
			ImGuiKey_GamepadFaceUp,         // Y (Xbox)         X (Switch)   Triangle (PS)      // Text Input / On-screen Keyboard
			ImGuiKey_GamepadFaceDown,       // A (Xbox)         B (Switch)   Cross (PS)         // Activate / Open / Toggle / Tweak
			ImGuiKey_GamepadDpadLeft,       // D-pad Left                                       // Move / Tweak / Resize Window (in Windowing mode)
			ImGuiKey_GamepadDpadRight,      // D-pad Right                                      // Move / Tweak / Resize Window (in Windowing mode)
			ImGuiKey_GamepadDpadUp,         // D-pad Up                                         // Move / Tweak / Resize Window (in Windowing mode)
			ImGuiKey_GamepadDpadDown,       // D-pad Down                                       // Move / Tweak / Resize Window (in Windowing mode)
			ImGuiKey_GamepadL1,             // L Bumper (Xbox)  L (Switch)   L1 (PS)            // Tweak Slower / Focus Previous (in Windowing mode)
			ImGuiKey_GamepadR1,             // R Bumper (Xbox)  R (Switch)   R1 (PS)            // Tweak Faster / Focus Next (in Windowing mode)
			ImGuiKey_GamepadL2,             // L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]
			ImGuiKey_GamepadR2,             // R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]
			ImGuiKey_GamepadL3,             // L Stick (Xbox)   L3 (Switch)  L3 (PS)
			ImGuiKey_GamepadR3,             // R Stick (Xbox)   R3 (Switch)  R3 (PS)
			ImGuiKey_GamepadLStickLeft,     // [Analog]                                         // Move Window (in Windowing mode)
			ImGuiKey_GamepadLStickRight,    // [Analog]                                         // Move Window (in Windowing mode)
			ImGuiKey_GamepadLStickUp,       // [Analog]                                         // Move Window (in Windowing mode)
			ImGuiKey_GamepadLStickDown,     // [Analog]                                         // Move Window (in Windowing mode)
			ImGuiKey_GamepadRStickLeft,     // [Analog]
			ImGuiKey_GamepadRStickRight,    // [Analog]
			ImGuiKey_GamepadRStickUp,       // [Analog]
			ImGuiKey_GamepadRStickDown,     // [Analog]

			// Aliases: Mouse Buttons (auto-submitted from AddMouseButtonEvent() calls)
			// - This is mirroring the data also written to io.MouseDown[], io.MouseWheel, in a format allowing them to be accessed via standard key API.
			ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_MouseX2, ImGuiKey_MouseWheelX, ImGuiKey_MouseWheelY,

			// [Internal] Reserved for mod storage
			ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGuiKey_ReservedForModSuper,
			ImGuiKey_COUNT,

			// Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls)
			// - This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing
			//   them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc.
			// - Code polling every key (e.g. an interface to detect a key press for input mapping) might want to ignore those
			//   and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiMod_Ctrl).
			// - In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys.
			//   In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and
			//   backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...
			ImGuiMod_None = 0,
			ImGuiMod_Ctrl = 1 << 12, // Ctrl
			ImGuiMod_Shift = 1 << 13, // Shift
			ImGuiMod_Alt = 1 << 14, // Option/Menu
			ImGuiMod_Super = 1 << 15, // Cmd/Super/Windows
			ImGuiMod_Shortcut = 1 << 11, // Alias for Ctrl (non-macOS) _or_ Super (macOS).
			ImGuiMod_Mask_ = 0xF800,  // 5-bits

			// [Internal] Prior to 1.87 we required user to fill io.KeysDown[512] using their own native index + the io.KeyMap[] array.
			// We are ditching this method but keeping a legacy path for user code doing e.g. IsKeyPressed(MY_NATIVE_KEY_CODE)
			// If you need to iterate all keys (for e.g. an input mapper) you may use ImGuiKey_NamedKey_BEGIN..ImGuiKey_NamedKey_END.
			ImGuiKey_NamedKey_BEGIN = 512,
			ImGuiKey_NamedKey_END = ImGuiKey_COUNT,
			ImGuiKey_NamedKey_COUNT = ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN,
#ifdef IMGUI_DISABLE_OBSOLETE_KEYIO
			ImGuiKey_KeysData_SIZE = ImGuiKey_NamedKey_COUNT,  // Size of KeysData[]: only hold named keys
			ImGuiKey_KeysData_OFFSET = ImGuiKey_NamedKey_BEGIN,  // Accesses to io.KeysData[] must use (key - ImGuiKey_KeysData_OFFSET) index.
#else
			ImGuiKey_KeysData_SIZE = ImGuiKey_COUNT,           // Size of KeysData[]: hold legacy 0..512 keycodes + named keys
			ImGuiKey_KeysData_OFFSET = 0,                        // Accesses to io.KeysData[] must use (key - ImGuiKey_KeysData_OFFSET) index.
#endif

#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
			ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGuiMod_Alt, ImGuiKey_ModSuper = ImGuiMod_Super, // Renamed in 1.89
			ImGuiKey_KeyPadEnter = ImGuiKey_KeypadEnter,    // Renamed in 1.87
#endif
		};
		public enum class eImGuiInputFlags
		{
			// Flags for IsKeyPressed(), IsMouseClicked(), Shortcut()
			None = 0,
			Repeat = 1 << 0,   // Return true on successive repeats. Default for legacy IsKeyPressed(). NOT Default for legacy IsMouseClicked(). MUST BE == 1.
			RepeatRateDefault = 1 << 1,   // Repeat rate: Regular (default)
			RepeatRateNavMove = 1 << 2,   // Repeat rate: Fast
			RepeatRateNavTweak = 1 << 3,   // Repeat rate: Faster
			RepeatRateMask_ = RepeatRateDefault | RepeatRateNavMove | RepeatRateNavTweak,

			// Flags for SetItemKeyOwner()
			CondHovered = 1 << 4,   // Only set if item is hovered (default to both)
			CondActive = 1 << 5,   // Only set if item is active (default to both)
			CondDefault_ = CondHovered | CondActive,
			CondMask_ = CondHovered | CondActive,

			// Flags for SetKeyOwner(), SetItemKeyOwner()
			LockThisFrame = 1 << 6,   // Access to key data will require EXPLICIT owner ID (ImGuiKeyOwner_Any/0 will NOT accepted for polling). Cleared at end of frame. This is useful to make input-owner-aware code steal keys from non-input-owner-aware code.
			LockUntilRelease = 1 << 7,   // Access to key data will require EXPLICIT owner ID (ImGuiKeyOwner_Any/0 will NOT accepted for polling). Cleared when the key is released or at end of each frame if key is released. This is useful to make input-owner-aware code steal keys from non-input-owner-aware code.

			// Routing policies for Shortcut() + low-level SetShortcutRouting()
			// - The general idea is that several callers register interest in a shortcut, and only one owner gets it.
			// - When a policy (other than _RouteAlways) is set, Shortcut() will register itself with SetShortcutRouting(),
			//   allowing the system to decide where to route the input among other route-aware calls.
			// - Shortcut() uses RouteFocused by default: meaning that a simple Shortcut() poll
			//   will register a route and only succeed when parent window is in the focus stack and if no-one
			//   with a higher priority is claiming the shortcut.
			// - Using RouteAlways is roughly equivalent to doing e.g. IsKeyPressed(key) + testing mods.
			// - Priorities: GlobalHigh > Focused (when owner is active item) > Global > Focused (when focused window) > GlobalLow.
			// - Can select only 1 policy among all available.
			RouteFocused = 1 << 8,   // (Default) Register focused route: Accept inputs if window is in focus stack. Deep-most focused window takes inputs. ActiveId takes inputs over deep-most focused window.
			RouteGlobalLow = 1 << 9,   // Register route globally (lowest priority: unless a focused window or active item registered the route) -> recommended Global priority.
			RouteGlobal = 1 << 10,  // Register route globally (medium priority: unless an active item registered the route, e.g. CTRL+A registered by InputText).
			RouteGlobalHigh = 1 << 11,  // Register route globally (highest priority: unlikely you need to use that: will interfere with every active items)
			RouteMask_ = RouteFocused | RouteGlobal | RouteGlobalLow | RouteGlobalHigh, // _Always not part of this!
			RouteAlways = 1 << 12,  // Do not register route, poll keys directly.
			RouteUnlessBgFocused = 1 << 13,  // Global routes will not be applied if underlying background/void is focused (== no Dear ImGui windows are focused). Useful for overlay applications.
			RouteExtraMask_ = RouteAlways | RouteUnlessBgFocused
		};
		public enum class eImGuiMouseButton
		{
			Left = 0,
			Right = 1,
			Middle = 2,
			COUNT = 5
		};
		public enum class eImGuiMouseCursor
		{
			None = -1,
			Arrow = 0,
			TextInput,         // When hovering over InputText, etc.
			ResizeAll,         // (Unused by Dear ImGui functions)
			ResizeNS,          // When hovering over a horizontal border
			ResizeEW,          // When hovering over a vertical border or a column
			ResizeNESW,        // When hovering over the bottom-left corner of a window
			ResizeNWSE,        // When hovering over the bottom-right corner of a window
			Hand,              // (Unused by Dear ImGui functions. Use for e.g. hyperlinks)
			NotAllowed,        // When hovering something with disallowed interaction. Usually a crossed circle.
			COUNT
		};
		public enum class eImGuiButtonFlags
		{
			None = 0,

			/// <summary>
			/// React on left mouse button (default).
			/// </summary>
			MouseButtonLeft = 1 << 0,
			/// <summary>
			/// React on right mouse button.
			/// </summary>
			MouseButtonRight = 1 << 1,
			/// <summary>
			/// React on center mouse button
			/// </summary>
			MouseButtonMiddle = 1 << 2,

			// [Internal]
			MouseButtonMask_ = MouseButtonLeft | MouseButtonRight | MouseButtonMiddle,
			MouseButtonDefault_ = MouseButtonLeft,
		};
		public enum class eImGuiMouseSource : int
		{
			Unknown = -1,
			/// <summary>
			/// Input is coming from an actual mouse.
			/// </summary>
			Mouse = 0,
			/// <summary>
			/// Input is coming from a touch screen (no hovering prior to initial press, less precise initial press aiming, dual-axis wheeling possible).
			/// </summary>
			TouchScreen,
			/// <summary>
			/// Input is coming from a pressure/magnetic pen (often used in conjunction with high-sampling rates).
			/// </summary>
			Pen
		};

		public enum class eImGuiHoveredFlags
		{
			/// <summary>
			/// Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.
			/// </summary>
			None = 0,
			/// <summary>
			/// IsWindowHovered() only: Return true if any children of the window is hovered
			/// </summary>
			ChildWindows = 1 << 0,
			/// <summary>
			/// IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)
			/// </summary>
			RootWindow = 1 << 1,
			/// <summary>
			/// IsWindowHovered() only: Return true if any window is hovered
			/// </summary>
			AnyWindow = 1 << 2,
			/// <summary>
			/// IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
			/// </summary>
			NoPopupHierarchy = 1 << 3,
			/// <summary>
			/// IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
			/// </summary>
			DockHierarchy = 1 << 4,
			/// <summary>
			/// Return true even if a popup window is normally blocking access to this item/window
			/// </summary>
			AllowWhenBlockedByPopup = 1 << 5,
			//ImGuiHoveredFlags_AllowWhenBlockedByModal     = 1 << 6,   // Return true even if a modal popup window is normally blocking access to this item/window. FIXME-TODO: Unavailable yet.
			
			/// <summary>
			/// Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.
			/// </summary>
			AllowWhenBlockedByActiveItem = 1 << 7,
			/// <summary>
			/// IsItemHovered() only: Return true even if the item uses AllowOverlap mode and is overlapped by another hoverable item.
			/// </summary>
			AllowWhenOverlappedByItem = 1 << 8,
			/// <summary>
			/// IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window.
			/// </summary>
			AllowWhenOverlappedByWindow = 1 << 9,
			/// <summary>
			/// IsItemHovered() only: Return true even if the item is disabled
			/// </summary>
			AllowWhenDisabled = 1 << 10,
			/// <summary>
			/// IsItemHovered() only: Disable using gamepad/keyboard navigation state when active, always query mouse
			/// </summary>
			NoNavOverride = 1 << 11,
			AllowWhenOverlapped = AllowWhenOverlappedByItem | AllowWhenOverlappedByWindow,
			RectOnly = AllowWhenBlockedByPopup | AllowWhenBlockedByActiveItem | AllowWhenOverlapped,
			RootAndChildWindows = RootWindow | ChildWindows,

			// Tooltips mode
			// - typically used in IsItemHovered() + SetTooltip() sequence.
			// - this is a shortcut to pull flags from 'style.HoverFlagsForTooltipMouse' or 'style.HoverFlagsForTooltipNav' where you can reconfigure desired behavior.
			//   e.g. 'TooltipHoveredFlagsForMouse' defaults to 'ImGuiHoveredFlags_Stationary | ImGuiHoveredFlags_DelayShort'.
			// - for frequently actioned or hovered items providing a tooltip, you want may to use ImGuiHoveredFlags_ForTooltip (stationary + delay) so the tooltip doesn't show too often.
			// - for items which main purpose is to be hovered, or items with low affordance, or in less consistent apps, prefer no delay or shorter delay.
			
			/// <summary>
			/// Shortcut for standard flags when using IsItemHovered() + SetTooltip() sequence.
			/// </summary>
			ForTooltip = 1 << 12,

			// (Advanced) Mouse Hovering delays.
			// - generally you can use ImGuiHoveredFlags_ForTooltip to use application-standardized flags.
			// - use those if you need specific overrides.

			/// <summary>
			/// // Require mouse to be stationary for style.HoverStationaryDelay (~0.15 sec) _at least one time_. After this, can move on same item/window. Using the stationary test tends to reduces the need for a long delay.
			/// </summary>
			Stationary = 1 << 13,
			/// <summary>
			/// IsItemHovered() only: Return true immediately (default). As this is the default you generally ignore this.
			/// </summary>
			DelayNone = 1 << 14,
			/// <summary>
			/// IsItemHovered() only: Return true after style.HoverDelayShort elapsed (~0.15 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).
			/// </summary>
			DelayShort = 1 << 15,
			/// <summary>
			/// IsItemHovered() only: Return true after style.HoverDelayNormal elapsed (~0.40 sec) (shared between items) + requires mouse to be stationary for style.HoverStationaryDelay (once per item).
			/// </summary>
			DelayNormal = 1 << 16,
			/// <summary>
			/// IsItemHovered() only: Disable shared delay system where moving from one item to the next keeps the previous timer for a short time (standard for tooltips with long delays)
			/// </summary>
			NoSharedDelay = 1 << 17,
		};

		public enum class eImGuiFocusedFlags
		{
			None = 0,
			/// <summary>
			/// Return true if any children of the window is focused
			/// </summary>
			ChildWindows = 1 << 0,
			/// <summary>
			/// Test from root window (top most parent of the current hierarchy)
			/// </summary>
			RootWindow = 1 << 1,
			/// <summary>
			/// Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!
			/// </summary>
			AnyWindow = 1 << 2,
			/// <summary>
			/// Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)
			/// </summary>
			NoPopupHierarchy = 1 << 3,
			/// <summary>
			/// Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)
			/// </summary>
			DockHierarchy = 1 << 4,

			RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows,
		};

		/// <summary>
		/// Flags for ImGui::BeginTabItem().
		/// </summary>
		public enum class eImGuiTabItemFlags
		{
			None = 0,

			/// <summary>
			/// Display a dot next to the title + tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
			/// </summary>
			UnsavedDocument = 1 << 0,
			/// <summary>
			/// Trigger flag to programmatically make the tab selected when calling BeginTabItem().
			/// </summary>
			SetSelected = 1 << 1,
			/// <summary>
			/// Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() and IsMouseClicked(2)) *p_open = false.
			/// </summary>
			NoCloseWithMiddleMouseButton = 1 << 2,
			/// <summary>
			/// Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem().
			/// </summary>
			NoPushId = 1 << 3,
			/// <summary>
			/// Disable tooltip for the given tab.
			/// </summary>
			NoTooltip = 1 << 4,
			/// <summary>
			/// Disable reordering this tab or having another tab cross over this tab.
			/// </summary>
			NoReorder = 1 << 5,
			/// <summary>
			/// Enforce the tab position to the left of the tab bar (after the tab list popup button).
			/// </summary>
			Leading = 1 << 6,
			/// <summary>
			/// Enforce the tab position to the right of the tab bar (before the scrolling buttons).
			/// </summary>
			Trailing = 1 << 7,
		};

		public enum class eImGuiSeparatorFlags
		{
			None = 0,

			/// <summary>
			/// Axis default to current layout type, so generally Horizontal unless e.g. in a menu bar.
			/// </summary>
			Horizontal = 1 << 0,
			Vertical = 1 << 1,

			/// <summary>
			/// Make separator cover all columns of a legacy Columns() set.
			/// </summary>
			SpanAllColumns = 1 << 2,
		};

		public enum class eImGuiTooltipFlags
		{
			None = 0,

			/// <summary>
			/// Clear/ignore previously submitted tooltip (defaults to append).
			/// </summary>
			OverridePrevious = 1 << 1,
		};

		public enum class eImGuiPopupFlags
		{
			None = 0,

			/// <summary>
			/// For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left).
			/// </summary>
			MouseButtonLeft = 0,
			/// <summary>
			/// For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right).
			/// </summary>
			MouseButtonRight = 1,
			/// <summary>
			/// For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle).
			/// </summary>
			MouseButtonMiddle = 2,
			MouseButtonMask_ = 0x1F,
			MouseButtonDefault_ = 1,
			/// <summary>
			/// For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack.
			/// </summary>
			NoOpenOverExistingPopup = 1 << 5,
			/// <summary>
			/// For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space.
			/// </summary>
			NoOpenOverItems = 1 << 6,
			/// <summary>
			/// For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.
			/// </summary>
			AnyPopupId = 1 << 7,
			/// <summary>
			/// For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level).
			/// </summary>
			AnyPopupLevel = 1 << 8,

			AnyPopup = AnyPopupId | AnyPopupLevel,
		};

		/// <summary>
		/// Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton().
		/// </summary>
		public enum class eImGuiColorEditFlags
		{
			None = 0,

			/// <summary>
			/// ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).
			/// </summary>
			NoAlpha = 1 << 1,
			/// <summary>
			/// ColorEdit: disable picker when clicking on color square.
			/// </summary>
			NoPicker = 1 << 2,
			/// <summary>
			/// ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.
			/// </summary>
			NoOptions = 1 << 3,
			/// <summary>
			/// ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs).
			/// </summary>
			NoSmallPreview = 1 << 4,
			/// <summary>
			/// ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).
			/// </summary>
			NoInputs = 1 << 5,
			/// <summary>
			/// ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.
			/// </summary>
			NoTooltip = 1 << 6,
			/// <summary>
			/// ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).
			/// </summary>
			NoLabel = 1 << 7,
			/// <summary>
			/// ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.
			/// </summary>
			NoSidePreview = 1 << 8,
			/// <summary>
			/// ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.
			/// </summary>
			NoDragDrop = 1 << 9,
			/// <summary>
			/// ColorButton: disable border (which is enforced by default).
			/// </summary>
			NoBorder = 1 << 10,

			// User Options (right-click on widget to change some of them).

			/// <summary>
			/// ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.
			/// </summary>
			AlphaBar = 1 << 16,
			/// <summary>
			/// ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.
			/// </summary>
			AlphaPreview = 1 << 17,
			/// <summary>
			/// ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.
			/// </summary>
			AlphaPreviewHalf = 1 << 18,
			/// <summary>
			/// (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use Float flag as well).
			/// </summary>
			HDR = 1 << 19,
			/// <summary>
			/// [Display] ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.
			/// </summary>
			DisplayRGB = 1 << 20,
			DisplayHSV = 1 << 21,
			DisplayHex = 1 << 22,
			/// <summary>
			/// [DataType] ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.
			/// </summary>
			Uint8 = 1 << 23,
			/// <summary>
			/// [DataType] ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.
			/// </summary>
			Float = 1 << 24,
			/// <summary>
			/// [Picker] ColorPicker: bar for Hue, rectangle for Sat/Value.
			/// </summary>
			PickerHueBar = 1 << 25,
			/// <summary>
			/// [Picker] ColorPicker: wheel for Hue, triangle for Sat/Value.
			/// </summary>
			PickerHueWheel = 1 << 26,
			/// <summary>
			/// [Input] ColorEdit, ColorPicker: input and output data in RGB format.
			/// </summary>
			InputRGB = 1 << 27,
			/// <summary>
			/// [Input] ColorEdit, ColorPicker: input and output data in HSV format.
			/// </summary>
			InputHSV = 1 << 28,

			/// <summary>
			/// Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to
			/// override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.
			/// </summary>
			DefaultOptions_ = Uint8 | DisplayRGB | InputRGB | PickerHueBar,

			// [Internal] Masks
			DisplayMask_ = DisplayRGB | DisplayHSV | DisplayHex,
			DataTypeMask_ = Uint8 | Float,
			PickerMask_ = PickerHueWheel | PickerHueBar,
			InputMask_ = InputRGB | InputHSV,
		};

		// Enumeration for ImGui::SetWindow***(), SetNextWindow***(), SetNextItem***() functions
		// Represent a condition.
		// Important: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always.
		public enum class eImGuiCond
		{
			/// <summary>
			/// No condition (always set the variable), same as _Always.
			/// </summary>
			None = 0,
			/// <summary>
			/// No condition (always set the variable), same as _None.
			/// </summary>
			Always = 1 << 0,
			/// <summary>
			/// Set the variable once per runtime session (only the first call will succeed).
			/// </summary>
			Once = 1 << 1,
			/// <summary>
			/// Set the variable if the object/window has no persistently saved data (no entry in .ini file).
			/// </summary>
			FirstUseEver = 1 << 2,
			/// <summary>
			/// Set the variable if the object/window is appearing after being hidden/inactive (or the first time).
			/// </summary>
			Appearing = 1 << 3,
		};

		/// <summary>
		/// Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload().
		/// </summary>
		public enum class eImGuiDragDropFlags
		{
			None = 0,

			// BeginDragDropSource() flags
			
			/// <summary>
			/// Disable preview tooltip. By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disables this behavior.
			/// </summary>
			SourceNoPreviewTooltip = 1 << 0,
			/// <summary>
			/// By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disables this behavior so you can still call IsItemHovered() on the source item.
			/// </summary>
			SourceNoDisableHover = 1 << 1,
			/// <summary>
			/// Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.
			/// </summary>
			SourceNoHoldToOpenOthers = 1 << 2,
			/// <summary>
			/// Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.
			/// </summary>
			SourceAllowNullID = 1 << 3,
			/// <summary>
			/// External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously.
			/// </summary>
			SourceExtern = 1 << 4,
			/// <summary>
			/// Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged).
			/// </summary>
			SourceAutoExpirePayload = 1 << 5,
			
			// AcceptDragDropPayload() flags
			
			/// <summary>
			/// AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.
			/// </summary>
			AcceptBeforeDelivery = 1 << 10,
			/// <summary>
			/// Do not draw the default highlight rectangle when hovering over target.
			/// </summary>
			AcceptNoDrawDefaultRect = 1 << 11,
			/// <summary>
			/// Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.
			/// </summary>
			AcceptNoPreviewTooltip = 1 << 12,

			AcceptPeekOnly = AcceptBeforeDelivery | AcceptNoDrawDefaultRect, // For peeking ahead and inspecting the payload before delivery.
		};

		// Early work-in-progress API for ScrollToItem()
		public enum class eImGuiScrollFlags
		{
			None = 0,

			/// <summary>
			/// If item is not visible: scroll as little as possible on X axis to bring item back into view [default for X axis].
			/// </summary>
			KeepVisibleEdgeX = 1 << 0,
			/// <summary>
			/// If item is not visible: scroll as little as possible on Y axis to bring item back into view [default for Y axis for windows that are already visible].
			/// </summary>
			KeepVisibleEdgeY = 1 << 1,
			/// <summary>
			/// If item is not visible: scroll to make the item centered on X axis [rarely used].
			/// </summary>
			KeepVisibleCenterX = 1 << 2,
			/// <summary>
			/// If item is not visible: scroll to make the item centered on Y axis.
			/// </summary>
			KeepVisibleCenterY = 1 << 3,
			/// <summary>
			/// Always center the result item on X axis [rarely used].
			/// </summary>
			AlwaysCenterX = 1 << 4,
			/// <summary>
			/// Always center the result item on Y axis [default for Y axis for appearing window).
			/// </summary>
			AlwaysCenterY = 1 << 5,
			/// <summary>
			/// Disable forwarding scrolling to parent window if required to keep item/rect visible (only scroll window the function was applied to)..
			/// </summary>
			NoScrollParent = 1 << 6,

			MaskX_ = KeepVisibleEdgeX | KeepVisibleCenterX | AlwaysCenterX,
			MaskY_ = KeepVisibleEdgeY | KeepVisibleCenterY | AlwaysCenterY,
		};

		public enum class eImGuiSliderFlags
		{
			None = 0,

			/// <summary>
			/// Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.
			/// </summary>
			AlwaysClamp = 1 << 4,
			/// <summary>
			/// Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.
			/// </summary>
			Logarithmic = 1 << 5,
			/// <summary>
			/// Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits).
			/// </summary>
			NoRoundToFormat = 1 << 6,
			/// <summary>
			/// Disable CTRL+Click or Enter key allowing to input text directly into the widget.
			/// </summary>
			NoInput = 1 << 7,

			/// <summary>
			/// [Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.
			/// </summary>
			InvalidMask_ = 0x7000000F,
		};

		/// <summary>
		/// Flags for ImGui::BeginTabBar().
		/// </summary>
		public enum class eImGuiTabBarFlags
		{
			None = 0,

			/// <summary>
			/// Allow manually dragging tabs to re-order them + New tabs are appended at the end of list-
			/// </summary>
			Reorderable = 1 << 0,
			/// <summary>
			/// Automatically select new tabs when they appear.
			/// </summary>
			AutoSelectNewTabs = 1 << 1,
			/// <summary>
			/// Disable buttons to open the tab list popup.
			/// </summary>
			TabListPopupButton = 1 << 2,
			/// <summary>
			/// Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() and IsMouseClicked(2)) *p_open = false.
			/// </summary>
			NoCloseWithMiddleMouseButton = 1 << 3,
			/// <summary>
			/// Disable scrolling buttons (apply when fitting policy is FittingPolicyScroll).
			/// </summary>
			NoTabListScrollingButtons = 1 << 4,
			/// <summary>
			/// Disable tooltips when hovering a tab.
			/// </summary>
			NoTooltip = 1 << 5,
			/// <summary>
			/// Resize tabs when they don't fit.
			/// </summary>
			FittingPolicyResizeDown = 1 << 6,
			/// <summary>
			/// Add scroll buttons when tabs don't fit.
			/// </summary>
			FittingPolicyScroll = 1 << 7,

			FittingPolicyMask_ = FittingPolicyResizeDown | FittingPolicyScroll,
			FittingPolicyDefault_ = FittingPolicyResizeDown,
		};

		/// <summary>
		/// Flags for ImGui::Selectable().
		/// </summary>
		public enum class eImGuiSelectableFlags
		{
			None = 0,

			/// <summary>
			/// Clicking this doesn't close parent popup window.
			/// </summary>
			DontClosePopups = 1 << 0,
			/// <summary>
			/// Frame will span all columns of its container table (text will still fit in current column).
			/// </summary>
			SpanAllColumns = 1 << 1,
			/// <summary>
			/// Generate press events on double clicks too.
			/// </summary>
			AllowDoubleClick = 1 << 2,
			/// <summary>
			/// Cannot be selected, display grayed out text.
			/// </summary>
			Disabled = 1 << 3,
			/// <summary>
			/// (WIP) Hit testing to allow subsequent widgets to overlap this one.
			/// </summary>
			AllowOverlap = 1 << 4,
		};

		/// <summary>
		/// Flags for ImGui::BeginCombo().
		/// </summary>
		public enum class eImGuiComboFlags
		{
			None = 0,

			/// <summary>
			/// Align the popup toward the left by default.
			/// </summary>
			PopupAlignLeft = 1 << 0,
			/// <summary>
			/// Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo().
			/// </summary>
			HeightSmall = 1 << 1,
			/// <summary>
			/// Max ~8 items visible (default).
			/// </summary>
			HeightRegular = 1 << 2,
			/// <summary>
			/// Max ~20 items visible.
			/// </summary>
			HeightLarge = 1 << 3,
			/// <summary>
			/// As many fitting items as possible.
			/// </summary>
			HeightLargest = 1 << 4,
			/// <summary>
			/// Display on the preview box without the square arrow button.
			/// </summary>
			NoArrowButton = 1 << 5,
			/// <summary>
			/// Display only a square arrow button.
			/// </summary>
			NoPreview = 1 << 6,
			/// <summary>
			/// Width dynamically calculated from preview contents.
			/// </summary>
			WidthFitPreview = 1 << 7,

			HeightMask_ = HeightSmall | HeightRegular | HeightLarge | HeightLargest,
		};
		
		/// <summary>
		/// X/Y enums are fixed to 0/1 so they may be used to index Vector2.
		/// </summary>
		public enum class eImGuiAxis
		{
			None = -1,
			X = 0,
			Y = 1
		};

		/// <summary>
		/// A cardinal direction.
		/// </summary>
		public enum class eImGuiDir
		{
			None = -1,
			Left = 0,
			Right = 1,
			Up = 2,
			Down = 3,
			COUNT
		};

		/// <summary>
		/// Flags for ImGuiIV.Begin()
		/// </summary>
		[FlagsAttribute]
		public enum class eImGuiWindowFlags
		{
			None = 0,
			/// <summary>
			/// Disable title-bar
			/// </summary>
			NoTitleBar = 1 << 0,
			/// <summary>
			/// Disable user resizing with the lower-right grip
			/// </summary>
			NoResize = 1 << 1,
			/// <summary>
			/// Disable user moving the window
			/// </summary>
			NoMove = 1 << 2,
			/// <summary>
			/// Disable scrollbars (window can still scroll with mouse or programmatically)
			/// </summary>
			NoScrollbar = 1 << 3,
			/// <summary>
			/// Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.
			/// </summary>
			NoScrollWithMouse = 1 << 4,
			/// <summary>
			/// Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).
			/// </summary>
			NoCollapse = 1 << 5,
			/// <summary>
			/// Resize every window to its content every frame
			/// </summary>
			AlwaysAutoResize = 1 << 6,
			/// <summary>
			/// Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).
			/// </summary>
			NoBackground = 1 << 7,
			/// <summary>
			/// Never load/save settings in .ini file
			/// </summary>
			NoSavedSettings = 1 << 8,
			/// <summary>
			/// Disable catching mouse, hovering test with pass through.
			/// </summary>
			NoMouseInputs = 1 << 9,
			/// <summary>
			/// Has a menu-bar
			/// </summary>
			MenuBar = 1 << 10,
			/// <summary>
			/// Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.
			/// </summary>
			HorizontalScrollbar = 1 << 11,
			/// <summary>
			/// Disable taking focus when transitioning from hidden to visible state
			/// </summary>
			NoFocusOnAppearing = 1 << 12,
			/// <summary>
			/// Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)
			/// </summary>
			NoBringToFrontOnFocus = 1 << 13,
			/// <summary>
			/// Always show vertical scrollbar (even if ContentSize.y < Size.y)
			/// </summary>
			AlwaysVerticalScrollbar = 1 << 14,
			/// <summary>
			/// Always show horizontal scrollbar (even if ContentSize.x < Size.x)
			/// </summary>
			AlwaysHorizontalScrollbar = 1 << 15,
			/// <summary>
			/// No gamepad/keyboard navigation within the window
			/// </summary>
			NoNavInputs = 1 << 16,
			/// <summary>
			/// No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)
			/// </summary>
			NoNavFocus = 1 << 17,
			/// <summary>
			/// Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
			/// </summary>
			UnsavedDocument = 1 << 18,
			/// <summary>
			/// Disable docking of this window
			/// </summary>
			NoDocking = 1 << 19,

			NoNav = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
			NoDecoration = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,
			NoInputs = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
		};

		[FlagsAttribute]
		public enum class eImGuiWindowFlagsEx : uint32_t
		{
			None = 0,
			/// <summary>
			/// This makes the window not being able to enable the mouse cursor.
			/// </summary>
			NoMouseEnable = 1 << 0,
			/// <summary>
			/// This makes the window able to disable the controller input, so GTA IV doesn't receive any controller input anymore. 
			/// Useful for when you want to navigate through your ImGui window with a controller.
			/// </summary>
			DisableControllerInput = 1 << 1,
		};

		/// <summary>
		/// Flags for ImGuiIV.BeginChild()
		/// </summary>
		public enum class eImGuiChildFlags
		{
			None = 0,
			/// <summary>
			/// Show an outer border and enable WindowPadding. (IMPORTANT: this is always == 1 == true for legacy reason)
			/// </summary>
			Border = 1 << 0,
			/// <summary>
			/// Pad with style.WindowPadding even if no border are drawn (no padding by default for non-bordered child windows because it makes more sense)
			/// </summary>
			AlwaysUseWindowPadding = 1 << 1,
			/// <summary>
			/// Allow resize from right border (layout direction). Enable .ini saving (unless ImGuiWindowFlags_NoSavedSettings passed to window flags)
			/// </summary>
			ResizeX = 1 << 2,
			/// <summary>
			/// Allow resize from bottom border (layout direction).
			/// </summary>
			ResizeY = 1 << 3,
			/// <summary>
			/// Enable auto-resizing width. Read "IMPORTANT: Size measurement" details above.
			/// </summary>
			AutoResizeX = 1 << 4,
			/// <summary>
			/// Enable auto-resizing height. Read "IMPORTANT: Size measurement" details above.
			/// </summary>
			AutoResizeY = 1 << 5,
			/// <summary>
			/// Combined with AutoResizeX/AutoResizeY. Always measure size even when child is hidden, always return true, always disable clipping optimization! NOT RECOMMENDED.
			/// </summary>
			AlwaysAutoResize = 1 << 6,
			/// <summary>
			/// Style the child window like a framed item: use FrameBg, FrameRounding, FrameBorderSize, FramePadding instead of ChildBg, ChildRounding, ChildBorderSize, WindowPadding.
			/// </summary>
			FrameStyle = 1 << 7,
		};

		/// <summary>
		/// See ImGuiStyle for descriptions
		/// </summary>
		public enum class eImGuiStyleVar
		{
			/// <summary>
			/// Type: float
			/// </summary>
			Alpha,
			/// <summary>
			/// Type: float
			/// </summary>
			DisabledAlpha,
			/// <summary>
			/// Type: Vector2
			/// </summary>
			WindowPadding,
			/// <summary>
			/// Type: float
			/// </summary>
			WindowRounding,
			/// <summary>
			/// Type: float
			/// </summary>
			WindowBorderSize,
			/// <summary>
			/// Type: Vector2
			/// </summary>
			WindowMinSize,
			/// <summary>
			/// Type: Vector2
			/// </summary>
			WindowTitleAlign,
			/// <summary>
			/// Type: float
			/// </summary>
			ChildRounding,
			/// <summary>
			/// Type: float
			/// </summary>
			ChildBorderSize,
			/// <summary>
			/// Type: float
			/// </summary>
			PopupRounding,
			/// <summary>
			/// Type: float
			/// </summary>
			PopupBorderSize,
			/// <summary>
			/// Type: Vector2
			/// </summary>
			FramePadding,
			/// <summary>
			/// Type: float
			/// </summary>
			FrameRounding,
			/// <summary>
			/// Type: float
			/// </summary>
			FrameBorderSize,
			/// <summary>
			/// Type: Vector2
			/// </summary>
			ItemSpacing,
			/// <summary>
			/// Type: Vector2
			/// </summary>
			ItemInnerSpacing,
			/// <summary>
			/// Type: float
			/// </summary>
			IndentSpacing,
			/// <summary>
			/// Type: Vector2
			/// </summary>
			CellPadding,
			/// <summary>
			/// Type: float
			/// </summary>
			ScrollbarSize,
			/// <summary>
			/// Type: float
			/// </summary>
			ScrollbarRounding,
			/// <summary>
			/// Type: float
			/// </summary>
			GrabMinSize,
			/// <summary>
			/// Type: float
			/// </summary>
			GrabRounding,
			/// <summary>
			/// Type: float
			/// </summary>
			TabRounding,
			/// <summary>
			/// Type: float
			/// </summary>
			TabBarBorderSize,
			/// <summary>
			/// Type: Vector2
			/// </summary>
			ButtonTextAlign,
			/// <summary>
			/// Type: Vector2
			/// </summary>
			SelectableTextAlign,
			/// <summary>
			/// Type: float
			/// </summary>
			SeparatorTextBorderSize,
			/// <summary>
			/// Type: Vector2
			/// </summary>
			SeparatorTextAlign,
			/// <summary>
			/// Type: Vector2
			/// </summary>
			SeparatorTextPadding
		};

		/// <summary>
		/// Enumeration for ImGuiIV.PushStyleColor() / ImGuiIV.PopStyleColor().
		/// </summary>
		public enum class eImGuiCol
		{
			Text,
			TextDisabled,
			/// <summary>
			/// Background of normal windows.
			/// </summary>
			WindowBg,
			/// <summary>
			/// Background of child windows.
			/// </summary>
			ChildBg,
			/// <summary>
			/// Background of popups, menus, tooltips windows.
			/// </summary>
			PopupBg,
			Border,
			BorderShadow,
			/// <summary>
			/// Background of checkbox, radio button, plot, slider, text input.
			/// </summary>
			FrameBg,
			FrameBgHovered,
			FrameBgActive,
			TitleBg,
			TitleBgActive,
			TitleBgCollapsed,
			MenuBarBg,
			ScrollbarBg,
			ScrollbarGrab,
			ScrollbarGrabHovered,
			ScrollbarGrabActive,
			CheckMark,
			SliderGrab,
			SliderGrabActive,
			Button,
			ButtonHovered,
			ButtonActive,
			/// <summary>
			/// Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem.
			/// </summary>
			Header,
			HeaderHovered,
			HeaderActive,
			Separator,
			SeparatorHovered,
			SeparatorActive,
			/// <summary>
			/// Resize grip in lower-right and lower-left corners of windows.
			/// </summary>
			ResizeGrip,
			ResizeGripHovered,
			ResizeGripActive,
			/// <summary>
			/// TabItem in a TabBar.
			/// </summary>
			Tab,
			TabHovered,
			TabActive,
			TabUnfocused,
			TabUnfocusedActive,
			PlotLines,
			PlotLinesHovered,
			PlotHistogram,
			PlotHistogramHovered,
			/// <summary>
			/// Table header background.
			/// </summary>
			TableHeaderBg,
			/// <summary>
			/// Table outer and header borders (prefer using Alpha=1.0 here).
			/// </summary>
			TableBorderStrong,
			/// <summary>
			/// Table inner borders (prefer using Alpha=1.0 here).
			/// </summary>
			TableBorderLight,
			/// <summary>
			/// Table row background (even rows).
			/// </summary>
			TableRowBg,
			/// <summary>
			/// Table row background (odd rows).
			/// </summary>
			TableRowBgAlt,
			TextSelectedBg,
			/// <summary>
			/// Rectangle highlighting a drop target.
			/// </summary>
			DragDropTarget,
			/// <summary>
			/// Gamepad/keyboard: current highlighted item.
			/// </summary>
			NavHighlight,
			/// <summary>
			/// Highlight window when using CTRL+TAB.
			/// </summary>
			NavWindowingHighlight,
			/// <summary>
			/// Darken/colorize entire screen behind the CTRL+TAB window list, when active.
			/// </summary>
			NavWindowingDimBg,
			/// <summary>
			/// Darken/colorize entire screen behind a modal window, when one is active.
			/// </summary>
			ModalWindowDimBg
		};

		/// <summary>
		/// Flags for ImGuiIV.InputText()
		/// (Those are per-item flags. There are shared flags in ImGuiIO: io.ConfigInputTextCursorBlink and io.ConfigInputTextEnterKeepActive)
		/// </summary>
		public enum class eImGuiInputTextFlags
		{
			None = 0,

			/// <summary>
			/// Allow 0123456789.+-*/
			/// </summary>
			CharsDecimal = 1 << 0,
			/// <summary>
			/// 0123456789ABCDEFabcdef
			/// </summary>
			CharsHexadecimal = 1 << 1,
			/// <summary>
			/// Turn a..z into A..Z
			/// </summary>
			CharsUppercase = 1 << 2,
			/// <summary>
			/// Filter out spaces, tabs
			/// </summary>
			CharsNoBlank = 1 << 3,
			/// <summary>
			/// Select entire text when first taking mouse focus.
			/// </summary>
			AutoSelectAll = 1 << 4,
			/// <summary>
			/// Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.
			/// </summary>
			EnterReturnsTrue = 1 << 5,
			/// <summary>
			/// Callback on pressing TAB (for completion handling).
			/// </summary>
			CallbackCompletion = 1 << 6,
			/// <summary>
			/// Callback on pressing Up/Down arrows (for history handling).
			/// </summary>
			CallbackHistory = 1 << 7,
			/// <summary>
			/// Callback on each iteration. User code may query cursor position, modify text buffer.
			/// </summary>
			CallbackAlways = 1 << 8,
			/// <summary>
			/// Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.
			/// </summary>
			CallbackCharFilter = 1 << 9,
			/// <summary>
			/// Pressing TAB input a '\t' character into the text field.
			/// </summary>
			AllowTabInput = 1 << 10,
			/// <summary>
			/// In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).
			/// </summary>
			CtrlEnterForNewLine = 1 << 11,
			/// <summary>
			/// Disable following the cursor horizontally.
			/// </summary>
			NoHorizontalScroll = 1 << 12,
			/// <summary>
			/// Overwrite mode.
			/// </summary>
			AlwaysOverwrite = 1 << 13,
			/// <summary>
			/// Read-only mode.
			/// </summary>
			ReadOnly = 1 << 14,
			/// <summary>
			/// Password mode, display all characters as '*'.
			/// </summary>
			Password = 1 << 15,
			/// <summary>
			/// Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().
			/// </summary>
			NoUndoRedo = 1 << 16,
			/// <summary>
			/// Allow 0123456789.+-*/eE (Scientific notation input).
			/// </summary>
			CharsScientific = 1 << 17,
			/// <summary>
			/// Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this).
			/// </summary>
			CallbackResize = 1 << 18,
			/// <summary>
			/// Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active).
			/// </summary>
			CallbackEdit = 1 << 19,
			/// <summary>
			/// Escape key clears content if not empty, and deactivate otherwise (contrast to default behavior of Escape to revert).
			/// </summary>
			EscapeClearsAll = 1 << 20,
		};

		public enum class eImGuiTreeNodeFlags
		{
			None = 0,
			/// <summary>
			/// Draw as selected.
			/// </summary>
			Selected = 1 << 0,
			/// <summary>
			/// Draw frame with background (e.g. for CollapsingHeader).
			/// </summary>
			Framed = 1 << 1,
			/// <summary>
			/// Hit testing to allow subsequent widgets to overlap this one.
			/// </summary>
			AllowOverlap = 1 << 2,
			/// <summary>
			/// Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack.
			/// </summary>
			NoTreePushOnOpen = 1 << 3,
			/// <summary>
			/// Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes).
			/// </summary>
			NoAutoOpenOnLog = 1 << 4,
			/// <summary>
			/// Default node to be open.
			/// </summary>
			DefaultOpen = 1 << 5,
			/// <summary>
			/// Need double-click to open node.
			/// </summary>
			OpenOnDoubleClick = 1 << 6,
			/// <summary>
			/// Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.
			/// </summary>
			OpenOnArrow = 1 << 7,
			/// <summary>
			/// No collapsing, no arrow (use as a convenience for leaf nodes).
			/// </summary>
			Leaf = 1 << 8,
			/// <summary>
			/// Display a bullet instead of arrow.
			/// </summary>
			Bullet = 1 << 9,
			/// <summary>
			/// Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().
			/// </summary>
			FramePadding = 1 << 10,
			/// <summary>
			/// Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.
			/// </summary>
			SpanAvailWidth = 1 << 11,
			/// <summary>
			/// Extend hit box to the left-most and right-most edges (bypass the indented area).
			/// </summary>
			SpanFullWidth = 1 << 12,
			/// <summary>
			/// (WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop).
			/// </summary>
			NavLeftJumpsBackHere = 1 << 13,
			CollapsingHeader = Framed | NoTreePushOnOpen | NoAutoOpenOnLog,

#ifndef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
			AllowItemOverlap = AllowOverlap,
#endif
		};

		public enum class eImGuiTableFlags
		{
			// Features
			None = 0,
			/// <summary>
			/// Enable resizing columns.
			/// </summary>
			Resizable = 1 << 0,
			/// <summary>
			/// Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers).
			/// </summary>
			Reorderable = 1 << 1,
			/// <summary>
			/// Enable hiding/disabling columns in context menu.
			/// </summary>
			Hideable = 1 << 2,
			/// <summary>
			/// Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.
			/// </summary>
			Sortable = 1 << 3,
			/// <summary>
			/// Disable persisting columns order, width and sort settings in the .ini file.
			/// </summary>
			NoSavedSettings = 1 << 4,
			/// <summary>
			/// Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().
			/// </summary>
			ContextMenuInBody = 1 << 5,
			// Decorations
			/// <summary>
			/// Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually).
			/// </summary>
			RowBg = 1 << 6,
			/// <summary>
			/// Draw horizontal borders between rows.
			/// </summary>
			BordersInnerH = 1 << 7,
			/// <summary>
			/// Draw horizontal borders at the top and bottom.
			/// </summary>
			BordersOuterH = 1 << 8,
			/// <summary>
			/// Draw vertical borders between columns.
			/// </summary>
			BordersInnerV = 1 << 9,
			/// <summary>
			/// Draw vertical borders on the left and right sides.
			/// </summary>
			BordersOuterV = 1 << 10,
			/// <summary>
			/// Draw horizontal borders.
			/// </summary>
			BordersH = BordersInnerH | BordersOuterH,
			/// <summary>
			/// Draw vertical borders.
			/// </summary>
			BordersV = BordersInnerV | BordersOuterV,
			/// <summary>
			/// Draw inner borders.
			/// </summary>
			BordersInner = BordersInnerV | BordersInnerH,
			/// <summary>
			/// Draw outer borders.
			/// </summary>
			BordersOuter = BordersOuterV | BordersOuterH,
			/// <summary>
			/// Draw all borders.
			/// </summary>
			Borders = BordersInner | BordersOuter,
			/// <summary>
			/// [ALPHA] Disable vertical borders in columns Body (borders will always appear in Headers). -> May move to style.
			/// </summary>
			NoBordersInBody = 1 << 11,
			/// <summary>
			/// [ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers). -> May move to style.
			/// </summary>
			NoBordersInBodyUntilResize = 1 << 12,
			// Sizing Policy (read above for defaults)
			/// <summary>
			/// Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.
			/// </summary>
			SizingFixedFit = 1 << 13,
			/// <summary>
			/// Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.
			/// </summary>
			SizingFixedSame = 2 << 13,
			/// <summary>
			/// Columns default to _WidthStretch with default weights proportional to each columns contents widths.
			/// </summary>
			SizingStretchProp = 3 << 13,
			/// <summary>
			/// Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().
			/// </summary>
			SizingStretchSame = 4 << 13,
			// Sizing Extra Options
			/// <summary>
			/// Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.
			/// </summary>
			NoHostExtendX = 1 << 16,
			/// <summary>
			/// Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.
			/// </summary>
			NoHostExtendY = 1 << 17,
			/// <summary>
			/// Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.
			/// </summary>
			NoKeepColumnsVisible = 1 << 18,
			/// <summary>
			/// Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.
			/// </summary>
			PreciseWidths = 1 << 19,
			// Clipping
			/// <summary>
			/// Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().
			/// </summary>
			NoClip = 1 << 20,
			// Padding
			/// <summary>
			/// Default if BordersOuterV is on. Enable outermost padding. Generally desirable if you have headers.
			/// </summary>
			PadOuterX = 1 << 21,
			/// <summary>
			/// Default if BordersOuterV is off. Disable outermost padding.
			/// </summary>
			NoPadOuterX = 1 << 22,
			/// <summary>
			/// Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).
			/// </summary>
			NoPadInnerX = 1 << 23,
			// Scrolling
			/// <summary>
			/// Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this creates a child window, ScrollY is currently generally recommended when using ScrollX.
			/// </summary>
			ScrollX = 1 << 24,
			/// <summary>
			/// Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.
			/// </summary>
			ScrollY = 1 << 25,
			// Sorting
			/// <summary>
			/// Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).
			/// </summary>
			SortMulti = 1 << 26,
			/// <summary>
			/// Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).
			/// </summary>
			SortTristate = 1 << 27,
		};

		public enum class eImGuiTableRowFlags
		{
			None = 0,
			/// <summary>
			/// Identify header row (set default background color + width of its contents accounted differently for auto column width).
			/// </summary>
			Headers = 1 << 0
		};

		public enum class eImGuiTableColumnFlags
		{
			// Input configuration flags
			None = 0,
			/// <summary>
			/// Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)
			/// </summary>
			Disabled = 1 << 0,
			/// <summary>
			/// Default as a hidden/disabled column.
			/// </summary>
			DefaultHide = 1 << 1,
			/// <summary>
			/// Default as a sorting column.
			/// </summary>
			DefaultSort = 1 << 2,
			/// <summary>
			/// Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).
			/// </summary>
			WidthStretch = 1 << 3,
			/// <summary>
			/// Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).
			/// </summary>
			WidthFixed = 1 << 4,
			/// <summary>
			/// Disable manual resizing.
			/// </summary>
			NoResize = 1 << 5,
			/// <summary>
			/// Disable manual reordering this column, this will also prevent other columns from crossing over this column.
			/// </summary>
			NoReorder = 1 << 6,
			/// <summary>
			/// Disable ability to hide/disable this column.
			/// </summary>
			NoHide = 1 << 7,
			/// <summary>
			/// Disable clipping for this column (all NoClip columns will render in a same draw command).
			/// </summary>
			NoClip = 1 << 8,
			/// <summary>
			/// Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).
			/// </summary>
			NoSort = 1 << 9,
			/// <summary>
			/// Disable ability to sort in the ascending direction.
			/// </summary>
			NoSortAscending = 1 << 10,
			/// <summary>
			/// Disable ability to sort in the descending direction.
			/// </summary>
			NoSortDescending = 1 << 11,
			/// <summary>
			/// TableHeadersRow() will not submit horizontal label for this column. Convenient for some small columns. Name will still appear in context menu or in angled headers.
			/// </summary>
			NoHeaderLabel = 1 << 12,
			/// <summary>
			/// Disable header text width contribution to automatic column width.
			/// </summary>
			NoHeaderWidth = 1 << 13,
			/// <summary>
			/// Make the initial sort direction Ascending when first sorting on this column (default).
			/// </summary>
			PreferSortAscending = 1 << 14,
			/// <summary>
			/// Make the initial sort direction Descending when first sorting on this column.
			/// </summary>
			PreferSortDescending = 1 << 15,
			/// <summary>
			/// Use current Indent value when entering cell (default for column 0).
			/// </summary>
			IndentEnable = 1 << 16,
			/// <summary>
			/// Ignore current Indent value when entering cell (default for columns > 0). Indentation changes _within_ the cell will still be honored.
			/// </summary>
			IndentDisable = 1 << 17,
			/// <summary>
			/// TableHeadersRow() will submit an angled header row for this column. Note this will add an extra row.
			/// </summary>
			AngledHeader = 1 << 18,

			// Output status flags, read-only via TableGetColumnFlags()
			
			/// <summary>
			/// [READONLY OUTPUT FLAG] Status: is enabled == not hidden by user/api (referred to as "Hide" in _DefaultHide and _NoHide) flags.
			/// </summary>
			IsEnabled = 1 << 24,
			/// <summary>
			/// [READONLY OUTPUT FLAG] Status: is visible == is enabled AND not clipped by scrolling.
			/// </summary>
			IsVisible = 1 << 25,
			/// <summary>
			/// [READONLY OUTPUT FLAG] Status: is currently part of the sort specs
			/// </summary>
			IsSorted = 1 << 26,
			/// <summary>
			/// [READONLY OUTPUT FLAG] Status: is hovered by mouse
			/// </summary>
			IsHovered = 1 << 27,
		};

	}
}